(dp1
S'output'
p2
S"<type 'exceptions.WindowsError'> [Error 3] Le chemin d\x92acc\xe8s sp\xe9cifi\xe9 est introuvable: 'C:/Users/Bussiere/Dropbox/Projets/jackpoint/web2py/applications/README/cron'"
p3
sS'layer'
p4
S'C:\\Users\\Bussiere\\Dropbox\\Projets\\jackpoint\\web2py\\applications\\admin\\controllers/default.py'
p5
sS'code'
p6
S'# coding: utf8\n\nEXPERIMENTAL_STUFF = True\n\nif EXPERIMENTAL_STUFF:\n    is_mobile = request.user_agent().is_mobile\n    if is_mobile:\n        response.view = response.view.replace(\'default/\',\'default.mobile/\')\n        response.menu = []\n\nfrom gluon.admin import *\nfrom gluon.fileutils import abspath, read_file, write_file\nfrom glob import glob\nimport shutil\nimport platform\n\nif DEMO_MODE and request.function in [\'change_password\',\'pack\',\'pack_plugin\',\'upgrade_web2py\',\'uninstall\',\'cleanup\',\'compile_app\',\'remove_compiled_app\',\'delete\',\'delete_plugin\',\'create_file\',\'upload_file\',\'update_languages\',\'reload_routes\']:\n    session.flash = T(\'disabled in demo mode\')\n    redirect(URL(\'site\'))\n\nif not is_manager() and request.function in [\'change_password\',\'upgrade_web2py\']:\n    session.flash = T(\'disabled in multi user mode\')\n    redirect(URL(\'site\'))\n\nif FILTER_APPS and request.args(0) and not request.args(0) in FILTER_APPS:\n    session.flash = T(\'disabled in demo mode\')\n    redirect(URL(\'site\'))\n\ndef safe_open(a,b):\n    if DEMO_MODE and \'w\' in b:\n        class tmp:\n            def write(self,data): pass\n        return tmp()\n    return open(a,b)\n\ndef safe_read(a, b=\'r\'):\n    safe_file = safe_open(a, b)\n    try:\n        return safe_file.read()\n    finally:\n        safe_file.close()\n\ndef safe_write(a, value, b=\'w\'):\n    safe_file = safe_open(a, b)\n    try:\n        safe_file.write(value)\n    finally:\n        safe_file.close()\n\ndef get_app(name=None):\n    app = name or request.args(0)\n    if app and (not MULTI_USER_MODE or db(db.app.name==app)(db.app.owner==auth.user.id).count()):\n        return app\n    session.flash = \'App does not exist or your are not authorized\'\n    redirect(URL(\'site\'))\n\ndef index():\n    """ Index handler """\n\n    send = request.vars.send\n    if DEMO_MODE:\n        session.authorized = True\n        session.last_time = t0\n    if not send:\n        send = URL(\'site\')\n    if session.authorized:\n        redirect(send)\n    elif request.vars.password:\n        if verify_password(request.vars.password):\n            session.authorized = True\n            login_record(True)\n\n            if CHECK_VERSION:\n                session.check_version = True\n            else:\n                session.check_version = False\n\n            session.last_time = t0\n            if isinstance(send, list):  # ## why does this happen?\n                send = str(send[0])\n\n            redirect(send)\n        else:\n            times_denied = login_record(False)\n            if times_denied >= allowed_number_of_attempts:\n                response.flash = \\\n                    T(\'admin disabled because too many invalid login attempts\')\n            elif times_denied == allowed_number_of_attempts - 1:\n                response.flash = \\\n                    T(\'You have one more login attempt before you are locked out\')\n            else:\n                response.flash = T(\'invalid password.\')\n    return dict(send=send)\n\n\ndef check_version():\n    """ Checks if web2py is up to date """\n\n    session.forget()\n    session._unlock(response)\n\n    new_version, version_number = check_new_version(request.env.web2py_version,\n                                    WEB2PY_VERSION_URL)\n\n    if new_version == -1:\n        return A(T(\'Unable to check for upgrades\'), _href=WEB2PY_URL)\n    elif new_version != True:\n        return A(T(\'web2py is up to date\'), _href=WEB2PY_URL)\n    elif platform.system().lower() in (\'windows\',\'win32\',\'win64\') and os.path.exists("web2py.exe"):\n        return SPAN(\'You should upgrade to version %s\' % version_number)\n    else:\n        return sp_button(URL(\'upgrade_web2py\'), T(\'upgrade now\')) \\\n          + XML(\' <strong class="upgrade_version">%s</strong>\' % version_number)\n\n\ndef logout():\n    """ Logout handler """\n    session.authorized = None\n    if MULTI_USER_MODE:\n        redirect(URL(\'user/logout\'))\n    redirect(URL(\'index\'))\n\n\ndef change_password():\n\n    if session.pam_user:\n        session.flash = T(\'PAM authenticated user, cannot change password here\')\n        redirect(URL(\'site\'))\n    form=SQLFORM.factory(Field(\'current_admin_password\',\'password\'),\n                         Field(\'new_admin_password\',\'password\',requires=IS_STRONG()),\n                         Field(\'new_admin_password_again\',\'password\'))\n    if form.accepts(request.vars):\n        if not verify_password(request.vars.current_admin_password):\n            form.errors.current_admin_password = T(\'invalid password\')\n        elif form.vars.new_admin_password != form.vars.new_admin_password_again:\n            form.errors.new_admin_password_again = T(\'no match\')\n        else:\n            path = abspath(\'parameters_%s.py\' % request.env.server_port)\n            safe_write(path, \'password="%s"\' % CRYPT()(request.vars.new_admin_password)[0])\n            session.flash = T(\'password changed\')\n            redirect(URL(\'site\'))\n    return dict(form=form)\n\ndef site():\n    """ Site handler """\n\n    myversion = request.env.web2py_version\n\n    # Shortcut to make the elif statements more legible\n    file_or_appurl = \'file\' in request.vars or \'appurl\' in request.vars\n\n    if DEMO_MODE:\n        pass\n\n    elif request.vars.filename and not \'file\' in request.vars:\n        # create a new application\n        appname = cleanpath(request.vars.filename).replace(\'.\', \'_\')\n        if app_create(appname, request):\n            if MULTI_USER_MODE:\n                db.app.insert(name=appname,owner=auth.user.id)\n            session.flash = T(\'new application "%s" created\', appname)\n            redirect(URL(\'design\',args=appname))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s" (it may exist already)\', request.vars.filename)\n        redirect(URL(r=request))\n\n    elif file_or_appurl and not request.vars.filename:\n        # can\'t do anything without an app name\n        msg = \'you must specify a name for the uploaded application\'\n        response.flash = T(msg)\n\n    elif file_or_appurl and request.vars.filename:\n        # fetch an application via URL or file upload\n        f = None\n        if request.vars.appurl is not \'\':\n            try:\n                f = urllib.urlopen(request.vars.appurl)\n            except Exception, e:\n                session.flash = DIV(T(\'Unable to download app because:\'),PRE(str(e)))\n                redirect(URL(r=request))\n            fname = request.vars.appurl\n        elif request.vars.file is not \'\':\n            f = request.vars.file.file\n            fname = request.vars.file.filename\n\n        if f:\n            appname = cleanpath(request.vars.filename).replace(\'.\', \'_\')\n            installed = app_install(appname, f, request, fname,\n                                    overwrite=request.vars.overwrite_check)\n        if f and installed:\n            msg = \'application %(appname)s installed with md5sum: %(digest)s\'\n            session.flash = T(msg, dict(appname=appname,\n                                        digest=md5_hash(installed)))\n        elif f and request.vars.overwrite_check:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=request.vars.filename))\n\n        else:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=request.vars.filename))\n\n        redirect(URL(r=request))\n\n    regex = re.compile(\'^\\w+$\')\n\n    if is_manager():\n        apps = [f for f in os.listdir(apath(r=request)) if regex.match(f)]\n    else:\n        apps = [f.name for f in db(db.app.owner==auth.user_id).select()]\n\n    if FILTER_APPS:\n        apps = [f for f in apps if f in FILTER_APPS]\n\n    apps = sorted(apps,lambda a,b:cmp(a.upper(),b.upper()))\n\n    return dict(app=None, apps=apps, myversion=myversion)\n\n\ndef pack():\n    app = get_app()\n\n    if len(request.args) == 1:\n        fname = \'web2py.app.%s.w2p\' % app\n        filename = app_pack(app, request)\n    else:\n        fname = \'web2py.app.%s.compiled.w2p\' % app\n        filename = app_pack_compiled(app, request)\n\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/w2p\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return safe_read(filename, \'rb\')\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(\'site\'))\n\ndef pack_plugin():\n    app = get_app()\n    if len(request.args) == 2:\n        fname = \'web2py.plugin.%s.w2p\' % request.args[1]\n        filename = plugin_pack(app, request.args[1], request)\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/w2p\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return safe_read(filename, \'rb\')\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(\'plugin\',args=request.args))\n\ndef upgrade_web2py():\n    if \'upgrade\' in request.vars:\n        (success, error) = upgrade(request)\n        if success:\n            session.flash = T(\'web2py upgraded; please restart it\')\n        else:\n            session.flash = T(\'unable to upgrade because "%s"\', error)\n        redirect(URL(\'site\'))\n    elif \'noupgrade\' in request.vars:\n        redirect(URL(\'site\'))\n    return dict()\n\ndef uninstall():\n    app = get_app()\n    if \'delete\' in request.vars:\n        if MULTI_USER_MODE:\n            if is_manager() and db(db.app.name==app).delete():\n                pass\n            elif db(db.app.name==app)(db.app.owner==auth.user.id).delete():\n                pass\n            else:\n                session.flash = T(\'no permission to uninstall "%s"\', app)\n                redirect(URL(\'site\'))\n        if app_uninstall(app, request):\n            session.flash = T(\'application "%s" uninstalled\', app)\n        else:\n            session.flash = T(\'unable to uninstall "%s"\', app)\n        redirect(URL(\'site\'))\n    elif \'nodelete\' in request.vars:\n        redirect(URL(\'site\'))\n    return dict(app=app)\n\n\ndef cleanup():\n    app = get_app()\n    clean = app_cleanup(app, request)\n    if not clean:\n        session.flash = T("some files could not be removed")\n    else:\n        session.flash = T(\'cache, errors and sessions cleaned\')\n\n    redirect(URL(\'site\'))\n\n\ndef compile_app():\n    app = get_app()\n    c = app_compile(app, request)\n    if not c:\n        session.flash = T(\'application compiled\')\n    else:\n        session.flash = DIV(T(\'Cannot compile: there are errors in your app:\'),\n                              CODE(c))\n    redirect(URL(\'site\'))\n\n\ndef remove_compiled_app():\n    """ Remove the compiled application """\n    app = get_app()\n    remove_compiled_application(apath(app, r=request))\n    session.flash = T(\'compiled application removed\')\n    redirect(URL(\'site\'))\n\ndef delete():\n    """ Object delete handler """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    sender = request.vars.sender\n\n    if isinstance(sender, list):  # ## fix a problem with Vista\n        sender = sender[0]\n\n    if \'nodelete\' in request.vars:\n        redirect(URL(sender))\n    elif \'delete\' in request.vars:\n        try:\n            os.unlink(apath(filename, r=request))\n            session.flash = T(\'file "%(filename)s" deleted\',\n                              dict(filename=filename))\n        except Exception:\n            session.flash = T(\'unable to delete file "%(filename)s"\',\n                              dict(filename=filename))\n        redirect(URL(sender))\n    return dict(filename=filename, sender=sender)\n\ndef enable():\n    app = get_app()\n    filename = os.path.join(apath(app, r=request),\'DISABLED\')\n    if os.path.exists(filename):\n        os.unlink(filename)\n        return SPAN(T(\'Disable\'),_style=\'color:green\')\n    else:\n        open(filename,\'wb\').write(time.ctime())\n        return SPAN(T(\'Enable\'),_style=\'color:red\')\n\ndef peek():\n    """ Visualize object code """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    try:\n        data = safe_read(apath(filename, r=request)).replace(\'\\r\',\'\')\n    except IOError:\n        session.flash = T(\'file does not exist\')\n        redirect(URL(\'site\'))\n\n    extension = filename[filename.rfind(\'.\') + 1:].lower()\n\n    return dict(app=request.args[0],\n                filename=filename,\n                data=data,\n                extension=extension)\n\n\ndef test():\n    """ Execute controller tests """\n    app = get_app()\n    if len(request.args) > 1:\n        file = request.args[1]\n    else:\n        file = \'.*\\.py\'\n\n    controllers = listdir(apath(\'%s/controllers/\' % app, r=request), file + \'$\')\n\n    return dict(app=app, controllers=controllers)\n\ndef keepalive():\n    return \'\'\n\ndef search():\n    keywords=request.vars.keywords or \'\'\n    app = get_app()\n    def match(filename,keywords):\n        filename=os.path.join(apath(app, r=request),filename)\n        if keywords in read_file(filename,\'rb\'):\n            return True\n        return False\n    path = apath(request.args[0], r=request)\n    files1 = glob(os.path.join(path,\'*/*.py\'))\n    files2 = glob(os.path.join(path,\'*/*.html\'))\n    files3 = glob(os.path.join(path,\'*/*/*.html\'))\n    files=[x[len(path)+1:].replace(\'\\\\\',\'/\') for x in files1+files2+files3 if match(x,keywords)]\n    return response.json({\'files\':files})\n\ndef edit():\n    """ File edit handler """\n    # Load json only if it is ajax edited...\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    # Try to discover the file type\n    if filename[-3:] == \'.py\':\n        filetype = \'python\'\n    elif filename[-5:] == \'.html\':\n        filetype = \'html\'\n    elif filename[-5:] == \'.load\':\n        filetype = \'html\'\n    elif filename[-4:] == \'.css\':\n        filetype = \'css\'\n    elif filename[-3:] == \'.js\':\n        filetype = \'js\'\n    else:\n        filetype = \'html\'\n\n    # ## check if file is not there\n\n    path = apath(filename, r=request)\n\n    if (\'revert\' in request.vars) and os.path.exists(path + \'.bak\'):\n        try:\n            data = safe_read(path + \'.bak\')\n            data1 = safe_read(path)\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                 return response.json({\'error\': str(T(\'Invalid action\'))})\n            else:\n                redirect(URL(\'site\'))\n\n        safe_write(path, data)\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n        safe_write(path + \'.bak\', data1)\n        response.flash = T(\'file "%s" of %s restored\', (filename, saved_on))\n    else:\n        try:\n            data = safe_read(path)\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': str(T(\'Invalid action\'))})\n            else:\n                redirect(URL(\'site\'))\n\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n\n        if request.vars.file_hash and request.vars.file_hash != file_hash:\n            session.flash = T(\'file changed on disk\')\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            safe_write(path + \'.1\', data)\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': str(T(\'file changed on disk\')),\n                                      \'redirect\': URL(\'resolve\',\n                                                      args=request.args)})\n            else:\n                redirect(URL(\'resolve\', args=request.args))\n        elif request.vars.data:\n            safe_write(path + \'.bak\', data)\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            safe_write(path, data)\n            file_hash = md5_hash(data)\n            saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n            response.flash = T(\'file saved on %s\', saved_on)\n\n    data_or_revert = (request.vars.data or request.vars.revert)\n\n    # Check compile errors\n    highlight = None\n    if filetype == \'python\' and request.vars.data:\n        import _ast\n        try:\n            code = request.vars.data.rstrip().replace(\'\\r\\n\',\'\\n\')+\'\\n\'\n            compile(code, path, "exec", _ast.PyCF_ONLY_AST)\n        except Exception, e:\n            start = sum([len(line)+1 for l, line\n                            in enumerate(request.vars.data.split("\\n"))\n                            if l < e.lineno-1])\n            if e.text and e.offset:\n                offset = e.offset - (len(e.text) - len(e.text.splitlines()[-1]))\n            else:\n                offset = 0\n            highlight = {\'start\': start, \'end\': start + offset + 1}\n            try:\n                ex_name = e.__class__.__name__\n            except:\n                ex_name = \'unknown exception!\'\n            response.flash = DIV(T(\'failed to compile file because:\'), BR(),\n                                 B(ex_name), T(\' at line %s\') % e.lineno,\n                                 offset and T(\' at char %s\') % offset or \'\',\n                                 PRE(str(e)))\n\n    if data_or_revert and request.args[1] == \'modules\':\n        # Lets try to reload the modules\n        try:\n            mopath = \'.\'.join(request.args[2:])[:-3]\n            exec \'import applications.%s.modules.%s\' % (request.args[0], mopath)\n            reload(sys.modules[\'applications.%s.modules.%s\'\n                    % (request.args[0], mopath)])\n        except Exception, e:\n            response.flash = DIV(T(\'failed to reload module because:\'),PRE(str(e)))\n\n    edit_controller = None\n    editviewlinks = None\n    view_link = None\n    if filetype == \'html\' and len(request.args) >= 3:\n        cfilename = os.path.join(request.args[0], \'controllers\',\n                                 request.args[2] + \'.py\')\n        if os.path.exists(apath(cfilename, r=request)):\n            edit_controller = URL(\'edit\', args=[cfilename])\n            view = request.args[3].replace(\'.html\',\'\')\n            view_link = URL(request.args[0],request.args[2],view)\n    elif filetype == \'python\' and request.args[1] == \'controllers\':\n        ## it\'s a controller file.\n        ## Create links to all of the associated view files.\n        app = get_app()\n        viewname = os.path.splitext(request.args[2])[0]\n        viewpath = os.path.join(app,\'views\',viewname)\n        aviewpath = apath(viewpath, r=request)\n        viewlist = []\n        if os.path.exists(aviewpath):\n            if os.path.isdir(aviewpath):\n                viewlist = glob(os.path.join(aviewpath,\'*.html\'))\n        elif os.path.exists(aviewpath+\'.html\'):\n            viewlist.append(aviewpath+\'.html\')\n        if len(viewlist):\n            editviewlinks = []\n            for v in viewlist:\n                vf = os.path.split(v)[-1]\n                vargs = "/".join([viewpath.replace(os.sep,"/"),vf])\n                editviewlinks.append(A(T(vf.split(".")[0]),\\\n                    _href=URL(\'edit\',args=[vargs])))\n\n    if len(request.args) > 2 and request.args[1] == \'controllers\':\n        controller = (request.args[2])[:-3]\n        functions = regex_expose.findall(data)\n    else:\n        (controller, functions) = (None, None)\n\n    if \'from_ajax\' in request.vars:\n        return response.json({\'file_hash\': file_hash, \'saved_on\': saved_on, \'functions\':functions, \'controller\': controller, \'application\': request.args[0], \'highlight\': highlight })\n    else:\n\n        editarea_preferences = {}\n        editarea_preferences[\'FONT_SIZE\'] = \'10\'\n        editarea_preferences[\'FULL_SCREEN\'] = \'false\'\n        editarea_preferences[\'ALLOW_TOGGLE\'] = \'true\'\n        editarea_preferences[\'REPLACE_TAB_BY_SPACES\'] = \'4\'\n        editarea_preferences[\'DISPLAY\'] = \'onload\'\n        for key in editarea_preferences:\n            if globals().has_key(key):\n                editarea_preferences[key]=globals()[key]\n        return dict(app=request.args[0],\n                    filename=filename,\n                    filetype=filetype,\n                    data=data,\n                    edit_controller=edit_controller,\n                    file_hash=file_hash,\n                    saved_on=saved_on,\n                    controller=controller,\n                    functions=functions,\n                    view_link=view_link,\n                    editarea_preferences=editarea_preferences,\n                    editviewlinks=editviewlinks)\n\ndef resolve():\n    """\n    """\n\n    filename = \'/\'.join(request.args)\n    # ## check if file is not there\n    path = apath(filename, r=request)\n    a = safe_read(path).split(\'\\n\')\n    try:\n        b = safe_read(path + \'.1\').split(\'\\n\')\n    except IOError:\n        session.flash = \'Other file, no longer there\'\n        redirect(URL(\'edit\', args=request.args))\n\n    d = difflib.ndiff(a, b)\n\n    def leading(line):\n        """  """\n\n        # TODO: we really need to comment this\n        z = \'\'\n        for (k, c) in enumerate(line):\n            if c == \' \':\n                z += \'&nbsp;\'\n            elif c == \' \\t\':\n                z += \'&nbsp;\'\n            elif k == 0 and c == \'?\':\n                pass\n            else:\n                break\n\n        return XML(z)\n\n    def getclass(item):\n        """ Determine item class """\n\n        if item[0] == \' \':\n            return \'normal\'\n        if item[0] == \'+\':\n            return \'plus\'\n        if item[0] == \'-\':\n            return \'minus\'\n\n    if request.vars:\n        c = \'\\n\'.join([item[2:].rstrip() for (i, item) in enumerate(d) if item[0] \\\n                           == \' \' or \'line%i\' % i in request.vars])\n        safe_write(path, c)\n        session.flash = \'files merged\'\n        redirect(URL(\'edit\', args=request.args))\n    else:\n        # Making the short circuit compatible with <= python2.4\n        gen_data = lambda index,item: not item[:1] in [\'+\',\'-\'] and "" \\\n                   or INPUT(_type=\'checkbox\',\n                            _name=\'line%i\' % index,\n                            value=item[0] == \'+\')\n\n        diff = TABLE(*[TR(TD(gen_data(i,item)),\n                          TD(item[0]),\n                          TD(leading(item[2:]),\n                          TT(item[2:].rstrip())), _class=getclass(item))\n                       for (i, item) in enumerate(d) if item[0] != \'?\'])\n\n    return dict(diff=diff, filename=filename)\n\n\ndef edit_language():\n    """ Edit language file """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    from gluon.languages import read_dict, write_dict\n    strings = read_dict(apath(filename, r=request))\n    keys = sorted(strings.keys(),lambda x,y: cmp(x.lower(), y.lower()))\n    rows = []\n    rows.append(H2(T(\'Original/Translation\')))\n\n    for key in keys:\n        name = md5_hash(key)\n        if key==strings[key]:\n            _class=\'untranslated\'\n        else:\n            _class=\'translated\'\n        if len(key) <= 40:\n            elem = INPUT(_type=\'text\', _name=name,value=strings[key],\n                         _size=70,_class=_class)\n        else:\n            elem = TEXTAREA(_name=name, value=strings[key], _cols=70,\n                            _rows=5, _class=_class)\n\n        # Making the short circuit compatible with <= python2.4\n        k = (strings[key] != key) and key or B(key)\n\n        rows.append(P(k, BR(), elem, TAG.BUTTON(T(\'delete\'),\n                            _onclick=\'return delkey("%s")\' % name), _id=name))\n\n    rows.append(INPUT(_type=\'submit\', _value=T(\'update\')))\n    form = FORM(*rows)\n    if form.accepts(request.vars, keepvalues=True):\n        strs = dict()\n        for key in keys:\n            name = md5_hash(key)\n            if form.vars[name]==chr(127): continue\n            strs[key] = form.vars[name]\n        write_dict(apath(filename, r=request), strs)\n        session.flash = T(\'file saved on %(time)s\', dict(time=time.ctime()))\n        redirect(URL(r=request,args=request.args))\n    return dict(app=request.args[0], filename=filename, form=form)\n\n\ndef about():\n    """ Read about info """\n    app = get_app()\n    # ## check if file is not there\n    about = safe_read(apath(\'%s/ABOUT\' % app, r=request))\n    license = safe_read(apath(\'%s/LICENSE\' % app, r=request))\n    return dict(app=app, about=MARKMIN(about), license=MARKMIN(license))\n\n\ndef design():\n    """ Application design handler """\n    app = get_app()\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    if request.vars.pluginfile!=None and not isinstance(request.vars.pluginfile,str):\n        filename=os.path.basename(request.vars.pluginfile.filename)\n        if plugin_install(app, request.vars.pluginfile.file,\n                          request, filename):\n            session.flash = T(\'new plugin installed\')\n            redirect(URL(\'design\',args=app))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s"\', request.vars.filename)\n        redirect(URL(r=request))\n    elif isinstance(request.vars.pluginfile,str):\n        session.flash = T(\'plugin not specified\')\n        redirect(URL(r=request))\n\n\n    # If we have only pyc files it means that\n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = safe_read(apath(\'%s/models/%s\' % (app, m), r=request))\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = safe_read(apath(\'%s/controllers/%s\' % (app, c), r=request))\n        items = regex_expose.findall(data)\n        functions[c] = items\n\n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+(\\.\\w+)+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views if not x.endswith(\'.bak\')]\n    extend = {}\n    include = {}\n    for c in views:\n        data = safe_read(apath(\'%s/views/%s\' % (app, c), r=request))\n        items = regex_extend.findall(data)\n\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n\n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n\n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n\n    # Get all languages\n    languages = listdir(apath(\'%s/languages/\' % app, r=request), \'[\\w-]*\\.py\')\n\n    #Get crontab\n    cronfolder = apath(\'%s/cron\' % app, r=request)\n    if not os.path.exists(cronfolder): os.mkdir(cronfolder)\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab):\n        safe_write(crontab, \'#crontab\')\n\n    plugins=[]\n    def filter_plugins(items,plugins):\n        plugins+=[item[7:].split(\'/\')[0].split(\'.\')[0] for item in items if item.startswith(\'plugin_\')]\n        plugins[:]=list(set(plugins))\n        plugins.sort()\n        return [item for item in items if not item.startswith(\'plugin_\')]\n\n    return dict(app=app,\n                models=filter_plugins(models,plugins),\n                defines=defines,\n                controllers=filter_plugins(controllers,plugins),\n                functions=functions,\n                views=filter_plugins(views,plugins),\n                modules=filter_plugins(modules,plugins),\n                extend=extend,\n                include=include,\n                statics=filter_plugins(statics,plugins),\n                languages=languages,\n                crontab=crontab,\n                plugins=plugins)\n\ndef delete_plugin():\n    """ Object delete handler """\n    app=request.args(0)\n    plugin = request.args(1)\n    plugin_name=\'plugin_\'+plugin\n    if \'nodelete\' in request.vars:\n        redirect(URL(\'design\',args=app))\n    elif \'delete\' in request.vars:\n        try:\n            for folder in [\'models\',\'views\',\'controllers\',\'static\',\'modules\']:\n                path=os.path.join(apath(app,r=request),folder)\n                for item in os.listdir(path):\n                    if item.rsplit(\'.\',1)[0] == plugin_name:\n                        filename=os.path.join(path,item)\n                        if os.path.isdir(filename):\n                            shutil.rmtree(filename)\n                        else:\n                            os.unlink(filename)\n            session.flash = T(\'plugin "%(plugin)s" deleted\',\n                              dict(plugin=plugin))\n        except Exception:\n            session.flash = T(\'unable to delete file plugin "%(plugin)s"\',\n                              dict(plugin=plugin))\n        redirect(URL(\'design\',args=request.args(0)))\n    return dict(plugin=plugin)\n\ndef plugin():\n    """ Application design handler """\n    app = get_app()\n    plugin = request.args(1)\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    # If we have only pyc files it means that\n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = safe_read(apath(\'%s/models/%s\' % (app, m), r=request))\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = safe_read(apath(\'%s/controllers/%s\' % (app, c), r=request))\n        items = regex_expose.findall(data)\n        functions[c] = items\n\n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+\\.\\w+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views]\n    extend = {}\n    include = {}\n    for c in views:\n        data = safe_read(apath(\'%s/views/%s\' % (app, c), r=request))\n        items = regex_extend.findall(data)\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n\n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n\n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n\n    # Get all languages\n    languages = listdir(apath(\'%s/languages/\' % app, r=request), \'[\\w-]*\\.py\')\n\n    #Get crontab\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab):\n        safe_write(crontab, \'#crontab\')\n\n    def filter_plugins(items):\n        regex=re.compile(\'^plugin_\'+plugin+\'(/.*|\\..*)?$\')\n        return [item for item in items if regex.match(item)]\n\n    return dict(app=app,\n                models=filter_plugins(models),\n                defines=defines,\n                controllers=filter_plugins(controllers),\n                functions=functions,\n                views=filter_plugins(views),\n                modules=filter_plugins(modules),\n                extend=extend,\n                include=include,\n                statics=filter_plugins(statics),\n                languages=languages,\n                crontab=crontab)\n\n\ndef create_file():\n    """ Create files handler """\n    try:\n        app = get_app(name=request.vars.location.split(\'/\')[0])\n        path = apath(request.vars.location, r=request)\n        filename = re.sub(\'[^\\w./-]+\', \'_\', request.vars.filename)\n\n        if path[-11:] == \'/languages/\':\n            # Handle language files\n            if len(filename) == 0:\n                raise SyntaxError\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n            app = path.split(\'/\')[-3]\n            path=os.path.join(apath(app, r=request),\'languages\',filename)\n            if not os.path.exists(path):\n                safe_write(path, \'\')\n            findT(apath(app, r=request), filename[:-3])\n            session.flash = T(\'language file "%(filename)s" created/updated\',\n                              dict(filename=filename))\n            redirect(request.vars.sender)\n\n        elif path[-8:] == \'/models/\':\n            # Handle python models\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = \'# coding: utf8\\n\'\n\n        elif path[-13:] == \'/controllers/\':\n            # Handle python controllers\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = \'# coding: utf8\\n# %s\\ndef index(): return dict(message="hello from %s")\'\n            text = text % (T(\'try something like\'), filename)\n\n        elif path[-7:] == \'/views/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            # Handle template (html) views\n            if filename.find(\'.\')<0:\n                filename += \'.html\'\n            extension = filename.split(\'.\')[-1].lower()\n\n            if len(filename) == 5:\n                raise SyntaxError\n\n            msg = T(\'This is the %(filename)s template\',\n                    dict(filename=filename))\n            if extension == \'html\':\n                text = dedent("""\n                   {{extend \'layout.html\'}}\n                   <h1>%s</h1>\n                   {{=BEAUTIFY(response._vars)}}""" % msg)\n            else:\n                generic = os.path.join(path,\'generic.\'+extension)\n                if os.path.exists(generic):\n                    text = read_file(generic)\n                else:\n                    text = \'\'\n\n        elif path[-9:] == \'/modules/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            # Handle python module files\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = dedent("""\n                   #!/usr/bin/env python\n                   # coding: utf8\n                   from gluon import *\\n""")\n\n        elif path[-8:] == \'/static/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            text = \'\'\n        else:\n            redirect(request.vars.sender)\n\n        full_filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(full_filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        if os.path.exists(full_filename):\n            raise SyntaxError\n\n        safe_write(full_filename, text)\n        session.flash = T(\'file "%(filename)s" created\',\n                          dict(filename=full_filename[len(path):]))\n        redirect(URL(\'edit\',\n                 args=[os.path.join(request.vars.location, filename)]))\n    except Exception, e:\n        if not isinstance(e,HTTP):\n            session.flash = T(\'cannot create file\')\n\n    redirect(request.vars.sender)\n\n\ndef upload_file():\n    """ File uploading handler """\n\n    try:\n        filename = None\n        app = get_app(name=request.vars.location.split(\'/\')[0])\n        path = apath(request.vars.location, r=request)\n\n        if request.vars.filename:\n            filename = re.sub(\'[^\\w\\./]+\', \'_\', request.vars.filename)\n        else:\n            filename = os.path.split(request.vars.file.filename)[-1]\n\n        if path[-8:] == \'/models/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-9:] == \'/modules/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-13:] == \'/controllers/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-7:] == \'/views/\' and not filename[-5:] == \'.html\':\n            filename += \'.html\'\n\n        if path[-11:] == \'/languages/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        safe_write(filename, request.vars.file.file.read(), \'wb\')\n        session.flash = T(\'file "%(filename)s" uploaded\',\n                          dict(filename=filename[len(path):]))\n    except Exception:\n        if filename:\n            d = dict(filename = filename[len(path):])\n        else:\n            d = dict(filename = \'unkown\')\n        session.flash = T(\'cannot upload file "%(filename)s"\', d)\n\n    redirect(request.vars.sender)\n\n\ndef errors():\n    """ Error handler """\n    import operator\n    import os\n    import pickle\n    import hashlib\n\n    app = get_app()\n\n    method = request.args(1) or \'new\'\n    db_ready = {}\n    db_ready[\'status\'] = get_ticket_storage(app)\n    db_ready[\'errmessage\'] = "No ticket_storage.txt found under /private folder"\n    db_ready[\'errlink\'] = "http://web2py.com/books/default/chapter/29/13#Collecting-tickets"\n\n    if method == \'new\':\n        errors_path = apath(\'%s/errors\' % app, r=request)\n\n        delete_hashes = []\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                delete_hashes.append(item[7:])\n\n        hash2error = dict()\n\n        for fn in listdir(errors_path, \'^\\w.*\'):\n            fullpath = os.path.join(errors_path, fn)\n            if not os.path.isfile(fullpath): continue\n            try:\n                fullpath_file = open(fullpath, \'r\')\n                try:\n                    error = pickle.load(fullpath_file)\n                finally:\n                    fullpath_file.close()\n            except IOError:\n                continue\n\n            hash = hashlib.md5(error[\'traceback\']).hexdigest()\n\n            if hash in delete_hashes:\n                os.unlink(fullpath)\n            else:\n                try:\n                    hash2error[hash][\'count\'] += 1\n                except KeyError:\n                    error_lines = error[\'traceback\'].split("\\n")\n                    last_line = error_lines[-2]\n                    error_causer = os.path.split(error[\'layer\'])[1]\n                    hash2error[hash] = dict(count=1, pickel=error,\n                                            causer=error_causer,\n                                            last_line=last_line,\n                                            hash=hash,ticket=fn)\n\n        decorated = [(x[\'count\'], x) for x in hash2error.values()]\n        decorated.sort(key=operator.itemgetter(0), reverse=True)\n\n        return dict(errors = [x[1] for x in decorated], app=app, method=method, db_ready=db_ready)\n\n    elif method == \'dbnew\':\n        errors_path = apath(\'%s/errors\' % app, r=request)\n        tk_db, tk_table = get_ticket_storage(app)\n\n        delete_hashes = []\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                delete_hashes.append(item[7:])\n\n        hash2error = dict()\n\n        for fn in tk_db(tk_table.id>0).select():\n            try:\n                error = pickle.loads(fn.ticket_data)\n            except AttributeError:\n                tk_db(tk_table.id == fn.id).delete()\n                tk_db.commit()\n\n            hash = hashlib.md5(error[\'traceback\']).hexdigest()\n\n            if hash in delete_hashes:\n                tk_db(tk_table.id == fn.id).delete()\n                tk_db.commit()\n            else:\n                try:\n                    hash2error[\'hash\'][\'count\'] += 1\n                except KeyError:\n                    error_lines = error[\'traceback\'].split("\\n")\n                    last_line = error_lines[-2]\n                    error_causer = os.path.split(error[\'layer\'])[1]\n                    hash2error[hash] = dict(count=1, pickel=error,\n                                            causer=error_causer,\n                                            last_line=last_line,\n                                            hash=hash,ticket=fn.ticket_id)\n\n        decorated = [(x[\'count\'], x) for x in hash2error.values()]\n\n        decorated.sort(key=operator.itemgetter(0), reverse=True)\n\n        return dict(errors = [x[1] for x in decorated], app=app, method=method)\n\n    elif method == \'dbold\':\n        tk_db, tk_table = get_ticket_storage(app)\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                tk_db(tk_table.ticket_id == item[7:]).delete()\n                tk_db.commit()\n        tickets_ = tk_db(tk_table.id>0).select(tk_table.ticket_id, tk_table.created_datetime, orderby=~tk_table.created_datetime)\n        tickets = [row.ticket_id for row in tickets_]\n        times = dict([(row.ticket_id, row.created_datetime) for row in tickets_])\n\n        return dict(app=app, tickets=tickets, method=method, times=times)\n\n    else:\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                os.unlink(apath(\'%s/errors/%s\' % (app, item[7:]), r=request))\n        func = lambda p: os.stat(apath(\'%s/errors/%s\' % \\\n                                           (app, p), r=request)).st_mtime\n        tickets = sorted(listdir(apath(\'%s/errors/\' % app, r=request), \'^\\w.*\'),\n                         key=func,\n                         reverse=True)\n\n        return dict(app=app, tickets=tickets, method=method, db_ready=db_ready)\n\ndef get_ticket_storage(app):\n    private_folder = apath(\'%s/private\' % app, r=request)\n    ticket_file = os.path.join(private_folder, \'ticket_storage.txt\')\n    if os.path.exists(ticket_file):\n        db_string = open(ticket_file).read()\n        db_string = db_string.strip().replace(\'\\r\',\'\').replace(\'\\n\',\'\')\n    else:\n        return False\n    tickets_table = \'web2py_ticket\'\n    tablename = tickets_table + \'_\' + app\n    db_path = apath(\'%s/databases\' % app, r=request)\n    ticketsdb = DAL(db_string, folder=db_path, auto_import=True)\n    if not ticketsdb.get(tablename):\n        table = ticketsdb.define_table(\n                tablename,\n                Field(\'ticket_id\', length=100),\n                Field(\'ticket_data\', \'text\'),\n                Field(\'created_datetime\', \'datetime\'),\n                )\n    return ticketsdb , ticketsdb.get(tablename)\n\ndef make_link(path):\n    """ Create a link from a path """\n    tryFile = path.replace(\'\\\\\', \'/\')\n\n    if os.path.isabs(tryFile) and os.path.isfile(tryFile):\n        (folder, filename) = os.path.split(tryFile)\n        (base, ext) = os.path.splitext(filename)\n        app = get_app()\n\n        editable = {\'controllers\': \'.py\', \'models\': \'.py\', \'views\': \'.html\'}\n        for key in editable.keys():\n            check_extension = folder.endswith("%s/%s" % (app,key))\n            if ext.lower() == editable[key] and check_extension:\n                return A(\'"\' + tryFile + \'"\',\n                         _href=URL(r=request,\n                         f=\'edit/%s/%s/%s\' % (app, key, filename))).xml()\n    return \'\'\n\n\ndef make_links(traceback):\n    """ Make links using the given traceback """\n\n    lwords = traceback.split(\'"\')\n\n    # Making the short circuit compatible with <= python2.4\n    result = (len(lwords) != 0) and lwords[0] or \'\'\n\n    i = 1\n\n    while i < len(lwords):\n        link = make_link(lwords[i])\n\n        if link == \'\':\n            result += \'"\' + lwords[i]\n        else:\n            result += link\n\n            if i + 1 < len(lwords):\n                result += lwords[i + 1]\n                i = i + 1\n\n        i = i + 1\n\n    return result\n\n\nclass TRACEBACK(object):\n    """ Generate the traceback """\n\n    def __init__(self, text):\n        """ TRACEBACK constructor """\n\n        self.s = make_links(CODE(text).xml())\n\n    def xml(self):\n        """ Returns the xml """\n\n        return self.s\n\n\ndef ticket():\n    """ Ticket handler """\n\n    if len(request.args) != 2:\n        session.flash = T(\'invalid ticket\')\n        redirect(URL(\'site\'))\n\n    app = get_app()\n    myversion = request.env.web2py_version\n    ticket = request.args[1]\n    e = RestrictedError()\n    e.load(request, app, ticket)\n\n    return dict(app=app,\n                ticket=ticket,\n                output=e.output,\n                traceback=(e.traceback and TRACEBACK(e.traceback)),\n                snapshot=e.snapshot,\n                code=e.code,\n                layer=e.layer,\n                myversion=myversion)\n\ndef ticketdb():\n    """ Ticket handler """\n\n    if len(request.args) != 2:\n        session.flash = T(\'invalid ticket\')\n        redirect(URL(\'site\'))\n\n    app = get_app()\n    myversion = request.env.web2py_version\n    ticket = request.args[1]\n    e = RestrictedError()\n    request.tickets_db = get_ticket_storage(app)[0]\n    e.load(request, app, ticket)\n    response.view = \'default/ticket.html\'\n    return dict(app=app,\n                ticket=ticket,\n                output=e.output,\n                traceback=(e.traceback and TRACEBACK(e.traceback)),\n                snapshot=e.snapshot,\n                code=e.code,\n                layer=e.layer,\n                myversion=myversion)\n\ndef error():\n    """ Generate a ticket (for testing) """\n    raise RuntimeError(\'admin ticket generator at your service\')\n\ndef update_languages():\n    """ Update available languages """\n\n    app = get_app()\n    update_all_languages(apath(app, r=request))\n    session.flash = T(\'Language files (static strings) updated\')\n    redirect(URL(\'design\',args=app,anchor=\'languages\'))\n\n\ndef twitter():\n    session.forget()\n    session._unlock(response)\n    import gluon.tools\n    import gluon.contrib.simplejson as sj\n    try:\n        if TWITTER_HASH:\n            page = urllib.urlopen("http://search.twitter.com/search.json?q=%%40%s" % TWITTER_HASH).read()\n            data = sj.loads(page  , encoding="utf-8")[\'results\']\n            d = dict()\n            for e in data:\n                d[e["id"]] = e\n            r = reversed(sorted(d))\n            return dict(tweets = [d[k] for k in r])\n        else:\n            return \'disabled\'\n    except Exception, e:\n        return DIV(T(\'Unable to download because:\'),BR(),str(e))\n\n\ndef user():\n    if MULTI_USER_MODE:\n        if not db(db.auth_user).count():\n            auth.settings.registration_requires_approval = False\n        return dict(form=auth())\n    else:\n        return dict(form=T("Disabled"))\n\ndef reload_routes():\n    """ Reload routes.py """\n    import gluon.rewrite\n    gluon.rewrite.load()\n    redirect(URL(\'site\'))\n\n\n\nresponse._vars=response._caller(design)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'winerror'
p12
S'3'
sS'__hash__'
p13
S"<method-wrapper '__hash__' of exceptions.WindowsError object at 0x042EA768>"
p14
sS'__setattr__'
p15
S"<method-wrapper '__setattr__' of exceptions.WindowsError object at 0x042EA768>"
p16
sS'__reduce_ex__'
p17
S'<built-in method __reduce_ex__ of exceptions.WindowsError object at 0x042EA768>'
p18
sS'__getslice__'
p19
S"<method-wrapper '__getslice__' of exceptions.WindowsError object at 0x042EA768>"
p20
sS'__getitem__'
p21
S"<method-wrapper '__getitem__' of exceptions.WindowsError object at 0x042EA768>"
p22
sS'__setstate__'
p23
S'<built-in method __setstate__ of exceptions.WindowsError object at 0x042EA768>'
p24
sS'__reduce__'
p25
S'<built-in method __reduce__ of exceptions.WindowsError object at 0x042EA768>'
p26
sS'__str__'
p27
S"<method-wrapper '__str__' of exceptions.WindowsError object at 0x042EA768>"
p28
sS'args'
p29
S"(3, 'Le chemin d\\x92acc\\xe8s sp\\xe9cifi\\xe9 est introuvable')"
p30
sS'__getattribute__'
p31
S"<method-wrapper '__getattribute__' of exceptions.WindowsError object at 0x042EA768>"
p32
sS'__class__'
p33
S"<type 'exceptions.WindowsError'>"
p34
sS'filename'
p35
S"'C:/Users/Bussiere/Dropbox/Projets/jackpoint/web2py/applications/README/cron'"
p36
sS'__delattr__'
p37
S"<method-wrapper '__delattr__' of exceptions.WindowsError object at 0x042EA768>"
p38
sS'strerror'
p39
S"'Le chemin d\\x92acc\\xe8s sp\\xe9cifi\\xe9 est introuvable'"
p40
sS'__repr__'
p41
S"<method-wrapper '__repr__' of exceptions.WindowsError object at 0x042EA768>"
p42
sS'errno'
p43
S'2'
sS'__dict__'
p44
S'{}'
p45
sS'__doc__'
p46
S"'MS-Windows OS system call failed.'"
p47
sS'__init__'
p48
S"<method-wrapper '__init__' of exceptions.WindowsError object at 0x042EA768>"
p49
sS'__new__'
p50
S'<built-in method __new__ of type object at 0x1E1CD5B8>'
p51
ssS'evalue'
p52
S"[Error 3] Le chemin d\x92acc\xe8s sp\xe9cifi\xe9 est introuvable: 'C:/Users/Bussiere/Dropbox/Projets/jackpoint/web2py/applications/README/cron'"
p53
sS'request'
p54
ccopy_reg
_reconstructor
p55
(cgluon.html
BEAUTIFY
p56
c__builtin__
object
p57
NtRp58
(dp59
S'attributes'
p60
(dp61
sS'components'
p62
(lp63
g55
(cgluon.html
TABLE
p64
g57
NtRp65
(dp66
g60
(dp67
S'level'
p68
I5
ssS'parent'
p69
Nsg62
(lp70
g55
(cgluon.html
TR
p71
g57
NtRp72
(dp73
g60
(dp74
sg69
g65
sg62
(lp75
g55
(cgluon.html
TD
p76
g57
NtRp77
(dp78
g60
(dp79
S'_style'
p80
S'font-weight:bold;vertical-align:top'
p81
ssg69
g72
sg62
(lp82
S'ajax'
p83
asbag55
(g76
g57
NtRp84
(dp85
g60
(dp86
S'_valign'
p87
S'top'
p88
ssg69
g72
sg62
(lp89
S':'
asbag55
(g76
g57
NtRp90
(dp91
g60
(dp92
sg69
g72
sg62
(lp93
g55
(g56
g57
NtRp94
(dp95
g60
(dp96
g68
I5
ssg69
g90
sg62
(lp97
S'False'
p98
asbasbasbag55
(g71
g57
NtRp99
(dp100
g60
(dp101
sg69
g65
sg62
(lp102
g55
(g76
g57
NtRp103
(dp104
g60
(dp105
g80
g81
ssg69
g99
sg62
(lp106
S'application'
p107
asbag55
(g76
g57
NtRp108
(dp109
g60
(dp110
g87
g88
ssg69
g99
sg62
(lp111
S':'
asbag55
(g76
g57
NtRp112
(dp113
g60
(dp114
sg69
g99
sg62
(lp115
g55
(g56
g57
NtRp116
(dp117
g60
(dp118
g68
I5
ssg69
g112
sg62
(lp119
S'admin'
p120
asbasbasbag55
(g71
g57
NtRp121
(dp122
g60
(dp123
sg69
g65
sg62
(lp124
g55
(g76
g57
NtRp125
(dp126
g60
(dp127
g80
g81
ssg69
g121
sg62
(lp128
g29
asbag55
(g76
g57
NtRp129
(dp130
g60
(dp131
g87
g88
ssg69
g121
sg62
(lp132
S':'
asbag55
(g76
g57
NtRp133
(dp134
g60
(dp135
sg69
g121
sg62
(lp136
g55
(g56
g57
NtRp137
(dp138
g60
(dp139
g68
I5
ssg69
g133
sg62
(lp140
g55
(g64
g57
NtRp141
(dp142
g60
(dp143
g68
I4
ssg69
Nsg62
(lp144
g55
(g71
g57
NtRp145
(dp146
g60
(dp147
sg69
g141
sg62
(lp148
g55
(g76
g57
NtRp149
(dp150
g60
(dp151
sg69
g145
sg62
(lp152
g55
(g56
g57
NtRp153
(dp154
g60
(dp155
g68
I4
ssg69
g149
sg62
(lp156
S'README'
p157
asbasbasbasbasbasbasbag55
(g71
g57
NtRp158
(dp159
g60
(dp160
sg69
g65
sg62
(lp161
g55
(g76
g57
NtRp162
(dp163
g60
(dp164
g80
g81
ssg69
g158
sg62
(lp165
S'body'
p166
asbag55
(g76
g57
NtRp167
(dp168
g60
(dp169
g87
g88
ssg69
g158
sg62
(lp170
S':'
asbag55
(g76
g57
NtRp171
(dp172
g60
(dp173
sg69
g158
sg62
(lp174
g55
(g56
g57
NtRp175
(dp176
g60
(dp177
g68
I5
ssg69
g171
sg62
(lp178
S'<cStringIO.StringO object at 0x03F6C380>'
p179
asbasbasbag55
(g71
g57
NtRp180
(dp181
g60
(dp182
sg69
g65
sg62
(lp183
g55
(g76
g57
NtRp184
(dp185
g60
(dp186
g80
g81
ssg69
g180
sg62
(lp187
S'client'
p188
asbag55
(g76
g57
NtRp189
(dp190
g60
(dp191
g87
g88
ssg69
g180
sg62
(lp192
S':'
asbag55
(g76
g57
NtRp193
(dp194
g60
(dp195
sg69
g180
sg62
(lp196
g55
(g56
g57
NtRp197
(dp198
g60
(dp199
g68
I5
ssg69
g193
sg62
(lp200
S'127.0.0.1'
p201
asbasbasbag55
(g71
g57
NtRp202
(dp203
g60
(dp204
sg69
g65
sg62
(lp205
g55
(g76
g57
NtRp206
(dp207
g60
(dp208
g80
g81
ssg69
g202
sg62
(lp209
S'controller'
p210
asbag55
(g76
g57
NtRp211
(dp212
g60
(dp213
g87
g88
ssg69
g202
sg62
(lp214
S':'
asbag55
(g76
g57
NtRp215
(dp216
g60
(dp217
sg69
g202
sg62
(lp218
g55
(g56
g57
NtRp219
(dp220
g60
(dp221
g68
I5
ssg69
g215
sg62
(lp222
S'default'
p223
asbasbasbag55
(g71
g57
NtRp224
(dp225
g60
(dp226
sg69
g65
sg62
(lp227
g55
(g76
g57
NtRp228
(dp229
g60
(dp230
g80
g81
ssg69
g224
sg62
(lp231
S'cookies'
p232
asbag55
(g76
g57
NtRp233
(dp234
g60
(dp235
g87
g88
ssg69
g224
sg62
(lp236
S':'
asbag55
(g76
g57
NtRp237
(dp238
g60
(dp239
sg69
g224
sg62
(lp240
g55
(g56
g57
NtRp241
(dp242
g60
(dp243
g68
I5
ssg69
g237
sg62
(lp244
g55
(g64
g57
NtRp245
(dp246
g60
(dp247
g68
I4
ssg69
Nsg62
(lp248
g55
(g71
g57
NtRp249
(dp250
g60
(dp251
sg69
g245
sg62
(lp252
g55
(g76
g57
NtRp253
(dp254
g60
(dp255
g80
g81
ssg69
g249
sg62
(lp256
S'session_id_admin'
p257
asbag55
(g76
g57
NtRp258
(dp259
g60
(dp260
g87
g88
ssg69
g249
sg62
(lp261
S':'
asbag55
(g76
g57
NtRp262
(dp263
g60
(dp264
sg69
g249
sg62
(lp265
g55
(g56
g57
NtRp266
(dp267
g60
(dp268
g68
I4
ssg69
g262
sg62
(lp269
g55
(g64
g57
NtRp270
(dp271
g60
(dp272
g68
I3
ssg69
Nsg62
(lp273
g55
(g71
g57
NtRp274
(dp275
g60
(dp276
sg69
g270
sg62
(lp277
g55
(g76
g57
NtRp278
(dp279
g60
(dp280
g80
g81
ssg69
g274
sg62
(lp281
S'comment'
p282
asbag55
(g76
g57
NtRp283
(dp284
g60
(dp285
g87
g88
ssg69
g274
sg62
(lp286
S':'
asbag55
(g76
g57
NtRp287
(dp288
g60
(dp289
sg69
g274
sg62
(lp290
g55
(g56
g57
NtRp291
(dp292
g60
(dp293
g68
I3
ssg69
g287
sg62
(lp294
S''
asbasbasbag55
(g71
g57
NtRp295
(dp296
g60
(dp297
sg69
g270
sg62
(lp298
g55
(g76
g57
NtRp299
(dp300
g60
(dp301
g80
g81
ssg69
g295
sg62
(lp302
S'domain'
p303
asbag55
(g76
g57
NtRp304
(dp305
g60
(dp306
g87
g88
ssg69
g295
sg62
(lp307
S':'
asbag55
(g76
g57
NtRp308
(dp309
g60
(dp310
sg69
g295
sg62
(lp311
g55
(g56
g57
NtRp312
(dp313
g60
(dp314
g68
I3
ssg69
g308
sg62
(lp315
S''
asbasbasbag55
(g71
g57
NtRp316
(dp317
g60
(dp318
sg69
g270
sg62
(lp319
g55
(g76
g57
NtRp320
(dp321
g60
(dp322
g80
g81
ssg69
g316
sg62
(lp323
S'expires'
p324
asbag55
(g76
g57
NtRp325
(dp326
g60
(dp327
g87
g88
ssg69
g316
sg62
(lp328
S':'
asbag55
(g76
g57
NtRp329
(dp330
g60
(dp331
sg69
g316
sg62
(lp332
g55
(g56
g57
NtRp333
(dp334
g60
(dp335
g68
I3
ssg69
g329
sg62
(lp336
S''
asbasbasbag55
(g71
g57
NtRp337
(dp338
g60
(dp339
sg69
g270
sg62
(lp340
g55
(g76
g57
NtRp341
(dp342
g60
(dp343
g80
g81
ssg69
g337
sg62
(lp344
S'max-age'
p345
asbag55
(g76
g57
NtRp346
(dp347
g60
(dp348
g87
g88
ssg69
g337
sg62
(lp349
S':'
asbag55
(g76
g57
NtRp350
(dp351
g60
(dp352
sg69
g337
sg62
(lp353
g55
(g56
g57
NtRp354
(dp355
g60
(dp356
g68
I3
ssg69
g350
sg62
(lp357
S''
asbasbasbag55
(g71
g57
NtRp358
(dp359
g60
(dp360
sg69
g270
sg62
(lp361
g55
(g76
g57
NtRp362
(dp363
g60
(dp364
g80
g81
ssg69
g358
sg62
(lp365
S'path'
p366
asbag55
(g76
g57
NtRp367
(dp368
g60
(dp369
g87
g88
ssg69
g358
sg62
(lp370
S':'
asbag55
(g76
g57
NtRp371
(dp372
g60
(dp373
sg69
g358
sg62
(lp374
g55
(g56
g57
NtRp375
(dp376
g60
(dp377
g68
I3
ssg69
g371
sg62
(lp378
S''
asbasbasbag55
(g71
g57
NtRp379
(dp380
g60
(dp381
sg69
g270
sg62
(lp382
g55
(g76
g57
NtRp383
(dp384
g60
(dp385
g80
g81
ssg69
g379
sg62
(lp386
S'secure'
p387
asbag55
(g76
g57
NtRp388
(dp389
g60
(dp390
g87
g88
ssg69
g379
sg62
(lp391
S':'
asbag55
(g76
g57
NtRp392
(dp393
g60
(dp394
sg69
g379
sg62
(lp395
g55
(g56
g57
NtRp396
(dp397
g60
(dp398
g68
I3
ssg69
g392
sg62
(lp399
S''
asbasbasbag55
(g71
g57
NtRp400
(dp401
g60
(dp402
sg69
g270
sg62
(lp403
g55
(g76
g57
NtRp404
(dp405
g60
(dp406
g80
g81
ssg69
g400
sg62
(lp407
S'version'
p408
asbag55
(g76
g57
NtRp409
(dp410
g60
(dp411
g87
g88
ssg69
g400
sg62
(lp412
S':'
asbag55
(g76
g57
NtRp413
(dp414
g60
(dp415
sg69
g400
sg62
(lp416
g55
(g56
g57
NtRp417
(dp418
g60
(dp419
g68
I3
ssg69
g413
sg62
(lp420
S''
asbasbasbasbasbasbasbag55
(g71
g57
NtRp421
(dp422
g60
(dp423
sg69
g245
sg62
(lp424
g55
(g76
g57
NtRp425
(dp426
g60
(dp427
g80
g81
ssg69
g421
sg62
(lp428
S'session_id_init'
p429
asbag55
(g76
g57
NtRp430
(dp431
g60
(dp432
g87
g88
ssg69
g421
sg62
(lp433
S':'
asbag55
(g76
g57
NtRp434
(dp435
g60
(dp436
sg69
g421
sg62
(lp437
g55
(g56
g57
NtRp438
(dp439
g60
(dp440
g68
I4
ssg69
g434
sg62
(lp441
g55
(g64
g57
NtRp442
(dp443
g60
(dp444
g68
I3
ssg69
Nsg62
(lp445
g55
(g71
g57
NtRp446
(dp447
g60
(dp448
sg69
g442
sg62
(lp449
g55
(g76
g57
NtRp450
(dp451
g60
(dp452
g80
g81
ssg69
g446
sg62
(lp453
g282
asbag55
(g76
g57
NtRp454
(dp455
g60
(dp456
g87
g88
ssg69
g446
sg62
(lp457
S':'
asbag55
(g76
g57
NtRp458
(dp459
g60
(dp460
sg69
g446
sg62
(lp461
g55
(g56
g57
NtRp462
(dp463
g60
(dp464
g68
I3
ssg69
g458
sg62
(lp465
S''
asbasbasbag55
(g71
g57
NtRp466
(dp467
g60
(dp468
sg69
g442
sg62
(lp469
g55
(g76
g57
NtRp470
(dp471
g60
(dp472
g80
g81
ssg69
g466
sg62
(lp473
g303
asbag55
(g76
g57
NtRp474
(dp475
g60
(dp476
g87
g88
ssg69
g466
sg62
(lp477
S':'
asbag55
(g76
g57
NtRp478
(dp479
g60
(dp480
sg69
g466
sg62
(lp481
g55
(g56
g57
NtRp482
(dp483
g60
(dp484
g68
I3
ssg69
g478
sg62
(lp485
S''
asbasbasbag55
(g71
g57
NtRp486
(dp487
g60
(dp488
sg69
g442
sg62
(lp489
g55
(g76
g57
NtRp490
(dp491
g60
(dp492
g80
g81
ssg69
g486
sg62
(lp493
g324
asbag55
(g76
g57
NtRp494
(dp495
g60
(dp496
g87
g88
ssg69
g486
sg62
(lp497
S':'
asbag55
(g76
g57
NtRp498
(dp499
g60
(dp500
sg69
g486
sg62
(lp501
g55
(g56
g57
NtRp502
(dp503
g60
(dp504
g68
I3
ssg69
g498
sg62
(lp505
S''
asbasbasbag55
(g71
g57
NtRp506
(dp507
g60
(dp508
sg69
g442
sg62
(lp509
g55
(g76
g57
NtRp510
(dp511
g60
(dp512
g80
g81
ssg69
g506
sg62
(lp513
g345
asbag55
(g76
g57
NtRp514
(dp515
g60
(dp516
g87
g88
ssg69
g506
sg62
(lp517
S':'
asbag55
(g76
g57
NtRp518
(dp519
g60
(dp520
sg69
g506
sg62
(lp521
g55
(g56
g57
NtRp522
(dp523
g60
(dp524
g68
I3
ssg69
g518
sg62
(lp525
S''
asbasbasbag55
(g71
g57
NtRp526
(dp527
g60
(dp528
sg69
g442
sg62
(lp529
g55
(g76
g57
NtRp530
(dp531
g60
(dp532
g80
g81
ssg69
g526
sg62
(lp533
g366
asbag55
(g76
g57
NtRp534
(dp535
g60
(dp536
g87
g88
ssg69
g526
sg62
(lp537
S':'
asbag55
(g76
g57
NtRp538
(dp539
g60
(dp540
sg69
g526
sg62
(lp541
g55
(g56
g57
NtRp542
(dp543
g60
(dp544
g68
I3
ssg69
g538
sg62
(lp545
S''
asbasbasbag55
(g71
g57
NtRp546
(dp547
g60
(dp548
sg69
g442
sg62
(lp549
g55
(g76
g57
NtRp550
(dp551
g60
(dp552
g80
g81
ssg69
g546
sg62
(lp553
g387
asbag55
(g76
g57
NtRp554
(dp555
g60
(dp556
g87
g88
ssg69
g546
sg62
(lp557
S':'
asbag55
(g76
g57
NtRp558
(dp559
g60
(dp560
sg69
g546
sg62
(lp561
g55
(g56
g57
NtRp562
(dp563
g60
(dp564
g68
I3
ssg69
g558
sg62
(lp565
S''
asbasbasbag55
(g71
g57
NtRp566
(dp567
g60
(dp568
sg69
g442
sg62
(lp569
g55
(g76
g57
NtRp570
(dp571
g60
(dp572
g80
g81
ssg69
g566
sg62
(lp573
g408
asbag55
(g76
g57
NtRp574
(dp575
g60
(dp576
g87
g88
ssg69
g566
sg62
(lp577
S':'
asbag55
(g76
g57
NtRp578
(dp579
g60
(dp580
sg69
g566
sg62
(lp581
g55
(g56
g57
NtRp582
(dp583
g60
(dp584
g68
I3
ssg69
g578
sg62
(lp585
S''
asbasbasbasbasbasbasbasbasbasbasbag55
(g71
g57
NtRp586
(dp587
g60
(dp588
sg69
g65
sg62
(lp589
g55
(g76
g57
NtRp590
(dp591
g60
(dp592
g80
g81
ssg69
g586
sg62
(lp593
S'env'
p594
asbag55
(g76
g57
NtRp595
(dp596
g60
(dp597
g87
g88
ssg69
g586
sg62
(lp598
S':'
asbag55
(g76
g57
NtRp599
(dp600
g60
(dp601
sg69
g586
sg62
(lp602
g55
(g56
g57
NtRp603
(dp604
g60
(dp605
g68
I5
ssg69
g599
sg62
(lp606
g55
(g64
g57
NtRp607
(dp608
g60
(dp609
g68
I4
ssg69
Nsg62
(lp610
g55
(g71
g57
NtRp611
(dp612
g60
(dp613
sg69
g607
sg62
(lp614
g55
(g76
g57
NtRp615
(dp616
g60
(dp617
g80
g81
ssg69
g611
sg62
(lp618
S'app_folders'
p619
asbag55
(g76
g57
NtRp620
(dp621
g60
(dp622
g87
g88
ssg69
g611
sg62
(lp623
S':'
asbag55
(g76
g57
NtRp624
(dp625
g60
(dp626
sg69
g611
sg62
(lp627
g55
(g56
g57
NtRp628
(dp629
g60
(dp630
g68
I4
ssg69
g624
sg62
(lp631
S"set(['C:\\\\Users\\\\Bussiere\\\\Dropbox\\\\Projets\\\\jackpoint\\\\web2py\\\\applications\\\\init\\\\', 'C:\\\\Users\\\\Bussiere\\\\Dropbox\\\\Projets\\\\jackpoint\\\\web2py\\\\applications\\\\admin\\\\'])"
p632
asbasbasbag55
(g71
g57
NtRp633
(dp634
g60
(dp635
sg69
g607
sg62
(lp636
g55
(g76
g57
NtRp637
(dp638
g60
(dp639
g80
g81
ssg69
g633
sg62
(lp640
S'applications_parent'
p641
asbag55
(g76
g57
NtRp642
(dp643
g60
(dp644
g87
g88
ssg69
g633
sg62
(lp645
S':'
asbag55
(g76
g57
NtRp646
(dp647
g60
(dp648
sg69
g633
sg62
(lp649
g55
(g56
g57
NtRp650
(dp651
g60
(dp652
g68
I4
ssg69
g646
sg62
(lp653
S'C:\\Users\\Bussiere\\Dropbox\\Projets\\jackpoint\\web2py'
p654
asbasbasbag55
(g71
g57
NtRp655
(dp656
g60
(dp657
sg69
g607
sg62
(lp658
g55
(g76
g57
NtRp659
(dp660
g60
(dp661
g80
g81
ssg69
g655
sg62
(lp662
S'cmd_args'
p663
asbag55
(g76
g57
NtRp664
(dp665
g60
(dp666
g87
g88
ssg69
g655
sg62
(lp667
S':'
asbag55
(g76
g57
NtRp668
(dp669
g60
(dp670
sg69
g655
sg62
(lp671
g55
(g56
g57
NtRp672
(dp673
g60
(dp674
g68
I4
ssg69
g668
sg62
(lp675
g55
(g64
g57
NtRp676
(dp677
g60
(dp678
g68
I3
ssg69
Nsg62
(lp679
sbasbasbasbag55
(g71
g57
NtRp680
(dp681
g60
(dp682
sg69
g607
sg62
(lp683
g55
(g76
g57
NtRp684
(dp685
g60
(dp686
g80
g81
ssg69
g680
sg62
(lp687
S'cmd_options'
p688
asbag55
(g76
g57
NtRp689
(dp690
g60
(dp691
g87
g88
ssg69
g680
sg62
(lp692
S':'
asbag55
(g76
g57
NtRp693
(dp694
g60
(dp695
sg69
g680
sg62
(lp696
g55
(g56
g57
NtRp697
(dp698
g60
(dp699
g68
I4
ssg69
g693
sg62
(lp700
S"<Values at 0x3c40f58: {'verbose': False, 'ip': '127.0.0.1', 'shutdown_timeout': 5, 'taskbar': False, 'nocron': False, 'pid_filename': 'httpserver.pid', 'maxthreads': None, 'softcron': False, 'server_name': 'Batou', 'bpython': False, 'nogui': False, 'port': 8000, 'extcron': False, 'debuglevel': 30, 'test': None, 'folder': 'C:\\\\Users\\\\Bussiere\\\\Dropbox\\\\Projets\\\\jackpoint\\\\web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'password': '<ask>', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p701
asbasbasbag55
(g71
g57
NtRp702
(dp703
g60
(dp704
sg69
g607
sg62
(lp705
g55
(g76
g57
NtRp706
(dp707
g60
(dp708
g80
g81
ssg69
g702
sg62
(lp709
S'db_sessions'
p710
asbag55
(g76
g57
NtRp711
(dp712
g60
(dp713
g87
g88
ssg69
g702
sg62
(lp714
S':'
asbag55
(g76
g57
NtRp715
(dp716
g60
(dp717
sg69
g702
sg62
(lp718
g55
(g56
g57
NtRp719
(dp720
g60
(dp721
g68
I4
ssg69
g715
sg62
(lp722
S'set([])'
p723
asbasbasbag55
(g71
g57
NtRp724
(dp725
g60
(dp726
sg69
g607
sg62
(lp727
g55
(g76
g57
NtRp728
(dp729
g60
(dp730
g80
g81
ssg69
g724
sg62
(lp731
S'debugging'
p732
asbag55
(g76
g57
NtRp733
(dp734
g60
(dp735
g87
g88
ssg69
g724
sg62
(lp736
S':'
asbag55
(g76
g57
NtRp737
(dp738
g60
(dp739
sg69
g724
sg62
(lp740
g55
(g56
g57
NtRp741
(dp742
g60
(dp743
g68
I4
ssg69
g737
sg62
(lp744
S'True'
p745
asbasbasbag55
(g71
g57
NtRp746
(dp747
g60
(dp748
sg69
g607
sg62
(lp749
g55
(g76
g57
NtRp750
(dp751
g60
(dp752
g80
g81
ssg69
g746
sg62
(lp753
S'gluon_parent'
p754
asbag55
(g76
g57
NtRp755
(dp756
g60
(dp757
g87
g88
ssg69
g746
sg62
(lp758
S':'
asbag55
(g76
g57
NtRp759
(dp760
g60
(dp761
sg69
g746
sg62
(lp762
g55
(g56
g57
NtRp763
(dp764
g60
(dp765
g68
I4
ssg69
g759
sg62
(lp766
S'C:\\Users\\Bussiere\\Dropbox\\Projets\\jackpoint\\web2py'
p767
asbasbasbag55
(g71
g57
NtRp768
(dp769
g60
(dp770
sg69
g607
sg62
(lp771
g55
(g76
g57
NtRp772
(dp773
g60
(dp774
g80
g81
ssg69
g768
sg62
(lp775
S'http_accept'
p776
asbag55
(g76
g57
NtRp777
(dp778
g60
(dp779
g87
g88
ssg69
g768
sg62
(lp780
S':'
asbag55
(g76
g57
NtRp781
(dp782
g60
(dp783
sg69
g768
sg62
(lp784
g55
(g56
g57
NtRp785
(dp786
g60
(dp787
g68
I4
ssg69
g781
sg62
(lp788
S'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
p789
asbasbasbag55
(g71
g57
NtRp790
(dp791
g60
(dp792
sg69
g607
sg62
(lp793
g55
(g76
g57
NtRp794
(dp795
g60
(dp796
g80
g81
ssg69
g790
sg62
(lp797
S'http_accept_charset'
p798
asbag55
(g76
g57
NtRp799
(dp800
g60
(dp801
g87
g88
ssg69
g790
sg62
(lp802
S':'
asbag55
(g76
g57
NtRp803
(dp804
g60
(dp805
sg69
g790
sg62
(lp806
g55
(g56
g57
NtRp807
(dp808
g60
(dp809
g68
I4
ssg69
g803
sg62
(lp810
S'ISO-8859-1,utf-8;q=0.7,*;q=0.3'
p811
asbasbasbag55
(g71
g57
NtRp812
(dp813
g60
(dp814
sg69
g607
sg62
(lp815
g55
(g76
g57
NtRp816
(dp817
g60
(dp818
g80
g81
ssg69
g812
sg62
(lp819
S'http_accept_encoding'
p820
asbag55
(g76
g57
NtRp821
(dp822
g60
(dp823
g87
g88
ssg69
g812
sg62
(lp824
S':'
asbag55
(g76
g57
NtRp825
(dp826
g60
(dp827
sg69
g812
sg62
(lp828
g55
(g56
g57
NtRp829
(dp830
g60
(dp831
g68
I4
ssg69
g825
sg62
(lp832
S'gzip,deflate,sdch'
p833
asbasbasbag55
(g71
g57
NtRp834
(dp835
g60
(dp836
sg69
g607
sg62
(lp837
g55
(g76
g57
NtRp838
(dp839
g60
(dp840
g80
g81
ssg69
g834
sg62
(lp841
S'http_accept_language'
p842
asbag55
(g76
g57
NtRp843
(dp844
g60
(dp845
g87
g88
ssg69
g834
sg62
(lp846
S':'
asbag55
(g76
g57
NtRp847
(dp848
g60
(dp849
sg69
g834
sg62
(lp850
g55
(g56
g57
NtRp851
(dp852
g60
(dp853
g68
I4
ssg69
g847
sg62
(lp854
S'en-US,en;q=0.8'
p855
asbasbasbag55
(g71
g57
NtRp856
(dp857
g60
(dp858
sg69
g607
sg62
(lp859
g55
(g76
g57
NtRp860
(dp861
g60
(dp862
g80
g81
ssg69
g856
sg62
(lp863
S'http_connection'
p864
asbag55
(g76
g57
NtRp865
(dp866
g60
(dp867
g87
g88
ssg69
g856
sg62
(lp868
S':'
asbag55
(g76
g57
NtRp869
(dp870
g60
(dp871
sg69
g856
sg62
(lp872
g55
(g56
g57
NtRp873
(dp874
g60
(dp875
g68
I4
ssg69
g869
sg62
(lp876
S'keep-alive'
p877
asbasbasbag55
(g71
g57
NtRp878
(dp879
g60
(dp880
sg69
g607
sg62
(lp881
g55
(g76
g57
NtRp882
(dp883
g60
(dp884
g80
g81
ssg69
g878
sg62
(lp885
S'http_cookie'
p886
asbag55
(g76
g57
NtRp887
(dp888
g60
(dp889
g87
g88
ssg69
g878
sg62
(lp890
S':'
asbag55
(g76
g57
NtRp891
(dp892
g60
(dp893
sg69
g878
sg62
(lp894
g55
(g56
g57
NtRp895
(dp896
g60
(dp897
g68
I4
ssg69
g891
sg62
(lp898
S'session_id_init=127.0.0.1-f148abf3-88d6-429a-ad58-8a2bd4fe4df6; session_id_admin=127.0.0.1-39f0a94b-773e-4424-b240-8c1ea9c1ed01'
p899
asbasbasbag55
(g71
g57
NtRp900
(dp901
g60
(dp902
sg69
g607
sg62
(lp903
g55
(g76
g57
NtRp904
(dp905
g60
(dp906
g80
g81
ssg69
g900
sg62
(lp907
S'http_host'
p908
asbag55
(g76
g57
NtRp909
(dp910
g60
(dp911
g87
g88
ssg69
g900
sg62
(lp912
S':'
asbag55
(g76
g57
NtRp913
(dp914
g60
(dp915
sg69
g900
sg62
(lp916
g55
(g56
g57
NtRp917
(dp918
g60
(dp919
g68
I4
ssg69
g913
sg62
(lp920
S'127.0.0.1:8000'
p921
asbasbasbag55
(g71
g57
NtRp922
(dp923
g60
(dp924
sg69
g607
sg62
(lp925
g55
(g76
g57
NtRp926
(dp927
g60
(dp928
g80
g81
ssg69
g922
sg62
(lp929
S'http_referer'
p930
asbag55
(g76
g57
NtRp931
(dp932
g60
(dp933
g87
g88
ssg69
g922
sg62
(lp934
S':'
asbag55
(g76
g57
NtRp935
(dp936
g60
(dp937
sg69
g922
sg62
(lp938
g55
(g56
g57
NtRp939
(dp940
g60
(dp941
g68
I4
ssg69
g935
sg62
(lp942
S'http://127.0.0.1:8000/admin/default/site'
p943
asbasbasbag55
(g71
g57
NtRp944
(dp945
g60
(dp946
sg69
g607
sg62
(lp947
g55
(g76
g57
NtRp948
(dp949
g60
(dp950
g80
g81
ssg69
g944
sg62
(lp951
S'http_user_agent'
p952
asbag55
(g76
g57
NtRp953
(dp954
g60
(dp955
g87
g88
ssg69
g944
sg62
(lp956
S':'
asbag55
(g76
g57
NtRp957
(dp958
g60
(dp959
sg69
g944
sg62
(lp960
g55
(g56
g57
NtRp961
(dp962
g60
(dp963
g68
I4
ssg69
g957
sg62
(lp964
S'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.18 (KHTML, like Gecko) Chrome/18.0.1011.0 Safari/535.18'
p965
asbasbasbag55
(g71
g57
NtRp966
(dp967
g60
(dp968
sg69
g607
sg62
(lp969
g55
(g76
g57
NtRp970
(dp971
g60
(dp972
g80
g81
ssg69
g966
sg62
(lp973
S'is_jython'
p974
asbag55
(g76
g57
NtRp975
(dp976
g60
(dp977
g87
g88
ssg69
g966
sg62
(lp978
S':'
asbag55
(g76
g57
NtRp979
(dp980
g60
(dp981
sg69
g966
sg62
(lp982
g55
(g56
g57
NtRp983
(dp984
g60
(dp985
g68
I4
ssg69
g979
sg62
(lp986
g98
asbasbasbag55
(g71
g57
NtRp987
(dp988
g60
(dp989
sg69
g607
sg62
(lp990
g55
(g76
g57
NtRp991
(dp992
g60
(dp993
g80
g81
ssg69
g987
sg62
(lp994
S'is_pypy'
p995
asbag55
(g76
g57
NtRp996
(dp997
g60
(dp998
g87
g88
ssg69
g987
sg62
(lp999
S':'
asbag55
(g76
g57
NtRp1000
(dp1001
g60
(dp1002
sg69
g987
sg62
(lp1003
g55
(g56
g57
NtRp1004
(dp1005
g60
(dp1006
g68
I4
ssg69
g1000
sg62
(lp1007
g98
asbasbasbag55
(g71
g57
NtRp1008
(dp1009
g60
(dp1010
sg69
g607
sg62
(lp1011
g55
(g76
g57
NtRp1012
(dp1013
g60
(dp1014
g80
g81
ssg69
g1008
sg62
(lp1015
S'path_info'
p1016
asbag55
(g76
g57
NtRp1017
(dp1018
g60
(dp1019
g87
g88
ssg69
g1008
sg62
(lp1020
S':'
asbag55
(g76
g57
NtRp1021
(dp1022
g60
(dp1023
sg69
g1008
sg62
(lp1024
g55
(g56
g57
NtRp1025
(dp1026
g60
(dp1027
g68
I4
ssg69
g1021
sg62
(lp1028
S'/admin/default/design/README'
p1029
asbasbasbag55
(g71
g57
NtRp1030
(dp1031
g60
(dp1032
sg69
g607
sg62
(lp1033
g55
(g76
g57
NtRp1034
(dp1035
g60
(dp1036
g80
g81
ssg69
g1030
sg62
(lp1037
S'query_string'
p1038
asbag55
(g76
g57
NtRp1039
(dp1040
g60
(dp1041
g87
g88
ssg69
g1030
sg62
(lp1042
S':'
asbag55
(g76
g57
NtRp1043
(dp1044
g60
(dp1045
sg69
g1030
sg62
(lp1046
g55
(g56
g57
NtRp1047
(dp1048
g60
(dp1049
g68
I4
ssg69
g1043
sg62
(lp1050
S''
asbasbasbag55
(g71
g57
NtRp1051
(dp1052
g60
(dp1053
sg69
g607
sg62
(lp1054
g55
(g76
g57
NtRp1055
(dp1056
g60
(dp1057
g80
g81
ssg69
g1051
sg62
(lp1058
S'remote_addr'
p1059
asbag55
(g76
g57
NtRp1060
(dp1061
g60
(dp1062
g87
g88
ssg69
g1051
sg62
(lp1063
S':'
asbag55
(g76
g57
NtRp1064
(dp1065
g60
(dp1066
sg69
g1051
sg62
(lp1067
g55
(g56
g57
NtRp1068
(dp1069
g60
(dp1070
g68
I4
ssg69
g1064
sg62
(lp1071
g201
asbasbasbag55
(g71
g57
NtRp1072
(dp1073
g60
(dp1074
sg69
g607
sg62
(lp1075
g55
(g76
g57
NtRp1076
(dp1077
g60
(dp1078
g80
g81
ssg69
g1072
sg62
(lp1079
S'remote_port'
p1080
asbag55
(g76
g57
NtRp1081
(dp1082
g60
(dp1083
g87
g88
ssg69
g1072
sg62
(lp1084
S':'
asbag55
(g76
g57
NtRp1085
(dp1086
g60
(dp1087
sg69
g1072
sg62
(lp1088
g55
(g56
g57
NtRp1089
(dp1090
g60
(dp1091
g68
I4
ssg69
g1085
sg62
(lp1092
S'61698'
p1093
asbasbasbag55
(g71
g57
NtRp1094
(dp1095
g60
(dp1096
sg69
g607
sg62
(lp1097
g55
(g76
g57
NtRp1098
(dp1099
g60
(dp1100
g80
g81
ssg69
g1094
sg62
(lp1101
S'request_method'
p1102
asbag55
(g76
g57
NtRp1103
(dp1104
g60
(dp1105
g87
g88
ssg69
g1094
sg62
(lp1106
S':'
asbag55
(g76
g57
NtRp1107
(dp1108
g60
(dp1109
sg69
g1094
sg62
(lp1110
g55
(g56
g57
NtRp1111
(dp1112
g60
(dp1113
g68
I4
ssg69
g1107
sg62
(lp1114
S'GET'
p1115
asbasbasbag55
(g71
g57
NtRp1116
(dp1117
g60
(dp1118
sg69
g607
sg62
(lp1119
g55
(g76
g57
NtRp1120
(dp1121
g60
(dp1122
g80
g81
ssg69
g1116
sg62
(lp1123
S'script_name'
p1124
asbag55
(g76
g57
NtRp1125
(dp1126
g60
(dp1127
g87
g88
ssg69
g1116
sg62
(lp1128
S':'
asbag55
(g76
g57
NtRp1129
(dp1130
g60
(dp1131
sg69
g1116
sg62
(lp1132
g55
(g56
g57
NtRp1133
(dp1134
g60
(dp1135
g68
I4
ssg69
g1129
sg62
(lp1136
S''
asbasbasbag55
(g71
g57
NtRp1137
(dp1138
g60
(dp1139
sg69
g607
sg62
(lp1140
g55
(g76
g57
NtRp1141
(dp1142
g60
(dp1143
g80
g81
ssg69
g1137
sg62
(lp1144
S'server_name'
p1145
asbag55
(g76
g57
NtRp1146
(dp1147
g60
(dp1148
g87
g88
ssg69
g1137
sg62
(lp1149
S':'
asbag55
(g76
g57
NtRp1150
(dp1151
g60
(dp1152
sg69
g1137
sg62
(lp1153
g55
(g56
g57
NtRp1154
(dp1155
g60
(dp1156
g68
I4
ssg69
g1150
sg62
(lp1157
S'Batou'
p1158
asbasbasbag55
(g71
g57
NtRp1159
(dp1160
g60
(dp1161
sg69
g607
sg62
(lp1162
g55
(g76
g57
NtRp1163
(dp1164
g60
(dp1165
g80
g81
ssg69
g1159
sg62
(lp1166
S'server_port'
p1167
asbag55
(g76
g57
NtRp1168
(dp1169
g60
(dp1170
g87
g88
ssg69
g1159
sg62
(lp1171
S':'
asbag55
(g76
g57
NtRp1172
(dp1173
g60
(dp1174
sg69
g1159
sg62
(lp1175
g55
(g56
g57
NtRp1176
(dp1177
g60
(dp1178
g68
I4
ssg69
g1172
sg62
(lp1179
S'8000'
p1180
asbasbasbag55
(g71
g57
NtRp1181
(dp1182
g60
(dp1183
sg69
g607
sg62
(lp1184
g55
(g76
g57
NtRp1185
(dp1186
g60
(dp1187
g80
g81
ssg69
g1181
sg62
(lp1188
S'server_protocol'
p1189
asbag55
(g76
g57
NtRp1190
(dp1191
g60
(dp1192
g87
g88
ssg69
g1181
sg62
(lp1193
S':'
asbag55
(g76
g57
NtRp1194
(dp1195
g60
(dp1196
sg69
g1181
sg62
(lp1197
g55
(g56
g57
NtRp1198
(dp1199
g60
(dp1200
g68
I4
ssg69
g1194
sg62
(lp1201
S'HTTP/1.1'
p1202
asbasbasbag55
(g71
g57
NtRp1203
(dp1204
g60
(dp1205
sg69
g607
sg62
(lp1206
g55
(g76
g57
NtRp1207
(dp1208
g60
(dp1209
g80
g81
ssg69
g1203
sg62
(lp1210
S'server_software'
p1211
asbag55
(g76
g57
NtRp1212
(dp1213
g60
(dp1214
g87
g88
ssg69
g1203
sg62
(lp1215
S':'
asbag55
(g76
g57
NtRp1216
(dp1217
g60
(dp1218
sg69
g1203
sg62
(lp1219
g55
(g56
g57
NtRp1220
(dp1221
g60
(dp1222
g68
I4
ssg69
g1216
sg62
(lp1223
S'Rocket 1.2.4'
p1224
asbasbasbag55
(g71
g57
NtRp1225
(dp1226
g60
(dp1227
sg69
g607
sg62
(lp1228
g55
(g76
g57
NtRp1229
(dp1230
g60
(dp1231
g80
g81
ssg69
g1225
sg62
(lp1232
S'web2py_crontype'
p1233
asbag55
(g76
g57
NtRp1234
(dp1235
g60
(dp1236
g87
g88
ssg69
g1225
sg62
(lp1237
S':'
asbag55
(g76
g57
NtRp1238
(dp1239
g60
(dp1240
sg69
g1225
sg62
(lp1241
g55
(g56
g57
NtRp1242
(dp1243
g60
(dp1244
g68
I4
ssg69
g1238
sg62
(lp1245
S'hard'
p1246
asbasbasbag55
(g71
g57
NtRp1247
(dp1248
g60
(dp1249
sg69
g607
sg62
(lp1250
g55
(g76
g57
NtRp1251
(dp1252
g60
(dp1253
g80
g81
ssg69
g1247
sg62
(lp1254
S'web2py_path'
p1255
asbag55
(g76
g57
NtRp1256
(dp1257
g60
(dp1258
g87
g88
ssg69
g1247
sg62
(lp1259
S':'
asbag55
(g76
g57
NtRp1260
(dp1261
g60
(dp1262
sg69
g1247
sg62
(lp1263
g55
(g56
g57
NtRp1264
(dp1265
g60
(dp1266
g68
I4
ssg69
g1260
sg62
(lp1267
g654
asbasbasbag55
(g71
g57
NtRp1268
(dp1269
g60
(dp1270
sg69
g607
sg62
(lp1271
g55
(g76
g57
NtRp1272
(dp1273
g60
(dp1274
g80
g81
ssg69
g1268
sg62
(lp1275
S'web2py_version'
p1276
asbag55
(g76
g57
NtRp1277
(dp1278
g60
(dp1279
g87
g88
ssg69
g1268
sg62
(lp1280
S':'
asbag55
(g76
g57
NtRp1281
(dp1282
g60
(dp1283
sg69
g1268
sg62
(lp1284
g55
(g56
g57
NtRp1285
(dp1286
g60
(dp1287
g68
I4
ssg69
g1281
sg62
(lp1288
g55
(g64
g57
NtRp1289
(dp1290
g60
(dp1291
g68
I3
ssg69
Nsg62
(lp1292
g55
(g71
g57
NtRp1293
(dp1294
g60
(dp1295
sg69
g1289
sg62
(lp1296
g55
(g76
g57
NtRp1297
(dp1298
g60
(dp1299
sg69
g1293
sg62
(lp1300
g55
(g56
g57
NtRp1301
(dp1302
g60
(dp1303
g68
I3
ssg69
g1297
sg62
(lp1304
S'1'
asbasbasbag55
(g71
g57
NtRp1305
(dp1306
g60
(dp1307
sg69
g1289
sg62
(lp1308
g55
(g76
g57
NtRp1309
(dp1310
g60
(dp1311
sg69
g1305
sg62
(lp1312
g55
(g56
g57
NtRp1313
(dp1314
g60
(dp1315
g68
I3
ssg69
g1309
sg62
(lp1316
S'99'
p1317
asbasbasbag55
(g71
g57
NtRp1318
(dp1319
g60
(dp1320
sg69
g1289
sg62
(lp1321
g55
(g76
g57
NtRp1322
(dp1323
g60
(dp1324
sg69
g1318
sg62
(lp1325
g55
(g56
g57
NtRp1326
(dp1327
g60
(dp1328
g68
I3
ssg69
g1322
sg62
(lp1329
S'7'
asbasbasbag55
(g71
g57
NtRp1330
(dp1331
g60
(dp1332
sg69
g1289
sg62
(lp1333
g55
(g76
g57
NtRp1334
(dp1335
g60
(dp1336
sg69
g1330
sg62
(lp1337
g55
(g56
g57
NtRp1338
(dp1339
g60
(dp1340
g68
I3
ssg69
g1334
sg62
(lp1341
S'datetime.datetime(2012, 3, 4, 22, 12, 8)'
p1342
asbasbasbag55
(g71
g57
NtRp1343
(dp1344
g60
(dp1345
sg69
g1289
sg62
(lp1346
g55
(g76
g57
NtRp1347
(dp1348
g60
(dp1349
sg69
g1343
sg62
(lp1350
g55
(g56
g57
NtRp1351
(dp1352
g60
(dp1353
g68
I3
ssg69
g1347
sg62
(lp1354
S'stable'
p1355
asbasbasbasbasbasbasbag55
(g71
g57
NtRp1356
(dp1357
g60
(dp1358
sg69
g607
sg62
(lp1359
g55
(g76
g57
NtRp1360
(dp1361
g60
(dp1362
g80
g81
ssg69
g1356
sg62
(lp1363
S'wsgi_errors'
p1364
asbag55
(g76
g57
NtRp1365
(dp1366
g60
(dp1367
g87
g88
ssg69
g1356
sg62
(lp1368
S':'
asbag55
(g76
g57
NtRp1369
(dp1370
g60
(dp1371
sg69
g1356
sg62
(lp1372
g55
(g56
g57
NtRp1373
(dp1374
g60
(dp1375
g68
I4
ssg69
g1369
sg62
(lp1376
S"<open file '<stderr>', mode 'w' at 0x01EE00B0>"
p1377
asbasbasbag55
(g71
g57
NtRp1378
(dp1379
g60
(dp1380
sg69
g607
sg62
(lp1381
g55
(g76
g57
NtRp1382
(dp1383
g60
(dp1384
g80
g81
ssg69
g1378
sg62
(lp1385
S'wsgi_file_wrapper'
p1386
asbag55
(g76
g57
NtRp1387
(dp1388
g60
(dp1389
g87
g88
ssg69
g1378
sg62
(lp1390
S':'
asbag55
(g76
g57
NtRp1391
(dp1392
g60
(dp1393
sg69
g1378
sg62
(lp1394
g55
(g56
g57
NtRp1395
(dp1396
g60
(dp1397
g68
I4
ssg69
g1391
sg62
(lp1398
S'<class wsgiref.util.FileWrapper at 0x02C6D8D0>'
p1399
asbasbasbag55
(g71
g57
NtRp1400
(dp1401
g60
(dp1402
sg69
g607
sg62
(lp1403
g55
(g76
g57
NtRp1404
(dp1405
g60
(dp1406
g80
g81
ssg69
g1400
sg62
(lp1407
S'wsgi_input'
p1408
asbag55
(g76
g57
NtRp1409
(dp1410
g60
(dp1411
g87
g88
ssg69
g1400
sg62
(lp1412
S':'
asbag55
(g76
g57
NtRp1413
(dp1414
g60
(dp1415
sg69
g1400
sg62
(lp1416
g55
(g56
g57
NtRp1417
(dp1418
g60
(dp1419
g68
I4
ssg69
g1413
sg62
(lp1420
S'<socket._fileobject object at 0x03E0B5F0>'
p1421
asbasbasbag55
(g71
g57
NtRp1422
(dp1423
g60
(dp1424
sg69
g607
sg62
(lp1425
g55
(g76
g57
NtRp1426
(dp1427
g60
(dp1428
g80
g81
ssg69
g1422
sg62
(lp1429
S'wsgi_multiprocess'
p1430
asbag55
(g76
g57
NtRp1431
(dp1432
g60
(dp1433
g87
g88
ssg69
g1422
sg62
(lp1434
S':'
asbag55
(g76
g57
NtRp1435
(dp1436
g60
(dp1437
sg69
g1422
sg62
(lp1438
g55
(g56
g57
NtRp1439
(dp1440
g60
(dp1441
g68
I4
ssg69
g1435
sg62
(lp1442
g98
asbasbasbag55
(g71
g57
NtRp1443
(dp1444
g60
(dp1445
sg69
g607
sg62
(lp1446
g55
(g76
g57
NtRp1447
(dp1448
g60
(dp1449
g80
g81
ssg69
g1443
sg62
(lp1450
S'wsgi_multithread'
p1451
asbag55
(g76
g57
NtRp1452
(dp1453
g60
(dp1454
g87
g88
ssg69
g1443
sg62
(lp1455
S':'
asbag55
(g76
g57
NtRp1456
(dp1457
g60
(dp1458
sg69
g1443
sg62
(lp1459
g55
(g56
g57
NtRp1460
(dp1461
g60
(dp1462
g68
I4
ssg69
g1456
sg62
(lp1463
g745
asbasbasbag55
(g71
g57
NtRp1464
(dp1465
g60
(dp1466
sg69
g607
sg62
(lp1467
g55
(g76
g57
NtRp1468
(dp1469
g60
(dp1470
g80
g81
ssg69
g1464
sg62
(lp1471
S'wsgi_run_once'
p1472
asbag55
(g76
g57
NtRp1473
(dp1474
g60
(dp1475
g87
g88
ssg69
g1464
sg62
(lp1476
S':'
asbag55
(g76
g57
NtRp1477
(dp1478
g60
(dp1479
sg69
g1464
sg62
(lp1480
g55
(g56
g57
NtRp1481
(dp1482
g60
(dp1483
g68
I4
ssg69
g1477
sg62
(lp1484
g98
asbasbasbag55
(g71
g57
NtRp1485
(dp1486
g60
(dp1487
sg69
g607
sg62
(lp1488
g55
(g76
g57
NtRp1489
(dp1490
g60
(dp1491
g80
g81
ssg69
g1485
sg62
(lp1492
S'wsgi_url_scheme'
p1493
asbag55
(g76
g57
NtRp1494
(dp1495
g60
(dp1496
g87
g88
ssg69
g1485
sg62
(lp1497
S':'
asbag55
(g76
g57
NtRp1498
(dp1499
g60
(dp1500
sg69
g1485
sg62
(lp1501
g55
(g56
g57
NtRp1502
(dp1503
g60
(dp1504
g68
I4
ssg69
g1498
sg62
(lp1505
S'http'
p1506
asbasbasbag55
(g71
g57
NtRp1507
(dp1508
g60
(dp1509
sg69
g607
sg62
(lp1510
g55
(g76
g57
NtRp1511
(dp1512
g60
(dp1513
g80
g81
ssg69
g1507
sg62
(lp1514
S'wsgi_version'
p1515
asbag55
(g76
g57
NtRp1516
(dp1517
g60
(dp1518
g87
g88
ssg69
g1507
sg62
(lp1519
S':'
asbag55
(g76
g57
NtRp1520
(dp1521
g60
(dp1522
sg69
g1507
sg62
(lp1523
g55
(g56
g57
NtRp1524
(dp1525
g60
(dp1526
g68
I4
ssg69
g1520
sg62
(lp1527
g55
(g64
g57
NtRp1528
(dp1529
g60
(dp1530
g68
I3
ssg69
Nsg62
(lp1531
g55
(g71
g57
NtRp1532
(dp1533
g60
(dp1534
sg69
g1528
sg62
(lp1535
g55
(g76
g57
NtRp1536
(dp1537
g60
(dp1538
sg69
g1532
sg62
(lp1539
g55
(g56
g57
NtRp1540
(dp1541
g60
(dp1542
g68
I3
ssg69
g1536
sg62
(lp1543
S'1'
asbasbasbag55
(g71
g57
NtRp1544
(dp1545
g60
(dp1546
sg69
g1528
sg62
(lp1547
g55
(g76
g57
NtRp1548
(dp1549
g60
(dp1550
sg69
g1544
sg62
(lp1551
g55
(g56
g57
NtRp1552
(dp1553
g60
(dp1554
g68
I3
ssg69
g1548
sg62
(lp1555
S'0'
asbasbasbasbasbasbasbasbasbasbasbag55
(g71
g57
NtRp1556
(dp1557
g60
(dp1558
sg69
g65
sg62
(lp1559
g55
(g76
g57
NtRp1560
(dp1561
g60
(dp1562
g80
g81
ssg69
g1556
sg62
(lp1563
S'extension'
p1564
asbag55
(g76
g57
NtRp1565
(dp1566
g60
(dp1567
g87
g88
ssg69
g1556
sg62
(lp1568
S':'
asbag55
(g76
g57
NtRp1569
(dp1570
g60
(dp1571
sg69
g1556
sg62
(lp1572
g55
(g56
g57
NtRp1573
(dp1574
g60
(dp1575
g68
I5
ssg69
g1569
sg62
(lp1576
S'html'
p1577
asbasbasbag55
(g71
g57
NtRp1578
(dp1579
g60
(dp1580
sg69
g65
sg62
(lp1581
g55
(g76
g57
NtRp1582
(dp1583
g60
(dp1584
g80
g81
ssg69
g1578
sg62
(lp1585
S'folder'
p1586
asbag55
(g76
g57
NtRp1587
(dp1588
g60
(dp1589
g87
g88
ssg69
g1578
sg62
(lp1590
S':'
asbag55
(g76
g57
NtRp1591
(dp1592
g60
(dp1593
sg69
g1578
sg62
(lp1594
g55
(g56
g57
NtRp1595
(dp1596
g60
(dp1597
g68
I5
ssg69
g1591
sg62
(lp1598
S'C:\\Users\\Bussiere\\Dropbox\\Projets\\jackpoint\\web2py\\applications\\admin\\'
p1599
asbasbasbag55
(g71
g57
NtRp1600
(dp1601
g60
(dp1602
sg69
g65
sg62
(lp1603
g55
(g76
g57
NtRp1604
(dp1605
g60
(dp1606
g80
g81
ssg69
g1600
sg62
(lp1607
S'function'
p1608
asbag55
(g76
g57
NtRp1609
(dp1610
g60
(dp1611
g87
g88
ssg69
g1600
sg62
(lp1612
S':'
asbag55
(g76
g57
NtRp1613
(dp1614
g60
(dp1615
sg69
g1600
sg62
(lp1616
g55
(g56
g57
NtRp1617
(dp1618
g60
(dp1619
g68
I5
ssg69
g1613
sg62
(lp1620
S'design'
p1621
asbasbasbag55
(g71
g57
NtRp1622
(dp1623
g60
(dp1624
sg69
g65
sg62
(lp1625
g55
(g76
g57
NtRp1626
(dp1627
g60
(dp1628
g80
g81
ssg69
g1622
sg62
(lp1629
S'get_vars'
p1630
asbag55
(g76
g57
NtRp1631
(dp1632
g60
(dp1633
g87
g88
ssg69
g1622
sg62
(lp1634
S':'
asbag55
(g76
g57
NtRp1635
(dp1636
g60
(dp1637
sg69
g1622
sg62
(lp1638
g55
(g56
g57
NtRp1639
(dp1640
g60
(dp1641
g68
I5
ssg69
g1635
sg62
(lp1642
g55
(g64
g57
NtRp1643
(dp1644
g60
(dp1645
g68
I4
ssg69
Nsg62
(lp1646
sbasbasbasbag55
(g71
g57
NtRp1647
(dp1648
g60
(dp1649
sg69
g65
sg62
(lp1650
g55
(g76
g57
NtRp1651
(dp1652
g60
(dp1653
g80
g81
ssg69
g1647
sg62
(lp1654
S'global_settings'
p1655
asbag55
(g76
g57
NtRp1656
(dp1657
g60
(dp1658
g87
g88
ssg69
g1647
sg62
(lp1659
S':'
asbag55
(g76
g57
NtRp1660
(dp1661
g60
(dp1662
sg69
g1647
sg62
(lp1663
g55
(g56
g57
NtRp1664
(dp1665
g60
(dp1666
g68
I5
ssg69
g1660
sg62
(lp1667
g55
(g64
g57
NtRp1668
(dp1669
g60
(dp1670
g68
I4
ssg69
Nsg62
(lp1671
g55
(g71
g57
NtRp1672
(dp1673
g60
(dp1674
sg69
g1668
sg62
(lp1675
g55
(g76
g57
NtRp1676
(dp1677
g60
(dp1678
g80
g81
ssg69
g1672
sg62
(lp1679
g619
asbag55
(g76
g57
NtRp1680
(dp1681
g60
(dp1682
g87
g88
ssg69
g1672
sg62
(lp1683
S':'
asbag55
(g76
g57
NtRp1684
(dp1685
g60
(dp1686
sg69
g1672
sg62
(lp1687
g55
(g56
g57
NtRp1688
(dp1689
g60
(dp1690
g68
I4
ssg69
g1684
sg62
(lp1691
S"set(['C:\\\\Users\\\\Bussiere\\\\Dropbox\\\\Projets\\\\jackpoint\\\\web2py\\\\applications\\\\init\\\\', 'C:\\\\Users\\\\Bussiere\\\\Dropbox\\\\Projets\\\\jackpoint\\\\web2py\\\\applications\\\\admin\\\\'])"
p1692
asbasbasbag55
(g71
g57
NtRp1693
(dp1694
g60
(dp1695
sg69
g1668
sg62
(lp1696
g55
(g76
g57
NtRp1697
(dp1698
g60
(dp1699
g80
g81
ssg69
g1693
sg62
(lp1700
g641
asbag55
(g76
g57
NtRp1701
(dp1702
g60
(dp1703
g87
g88
ssg69
g1693
sg62
(lp1704
S':'
asbag55
(g76
g57
NtRp1705
(dp1706
g60
(dp1707
sg69
g1693
sg62
(lp1708
g55
(g56
g57
NtRp1709
(dp1710
g60
(dp1711
g68
I4
ssg69
g1705
sg62
(lp1712
g654
asbasbasbag55
(g71
g57
NtRp1713
(dp1714
g60
(dp1715
sg69
g1668
sg62
(lp1716
g55
(g76
g57
NtRp1717
(dp1718
g60
(dp1719
g80
g81
ssg69
g1713
sg62
(lp1720
g663
asbag55
(g76
g57
NtRp1721
(dp1722
g60
(dp1723
g87
g88
ssg69
g1713
sg62
(lp1724
S':'
asbag55
(g76
g57
NtRp1725
(dp1726
g60
(dp1727
sg69
g1713
sg62
(lp1728
g55
(g56
g57
NtRp1729
(dp1730
g60
(dp1731
g68
I4
ssg69
g1725
sg62
(lp1732
g55
(g64
g57
NtRp1733
(dp1734
g60
(dp1735
g68
I3
ssg69
Nsg62
(lp1736
sbasbasbasbag55
(g71
g57
NtRp1737
(dp1738
g60
(dp1739
sg69
g1668
sg62
(lp1740
g55
(g76
g57
NtRp1741
(dp1742
g60
(dp1743
g80
g81
ssg69
g1737
sg62
(lp1744
g688
asbag55
(g76
g57
NtRp1745
(dp1746
g60
(dp1747
g87
g88
ssg69
g1737
sg62
(lp1748
S':'
asbag55
(g76
g57
NtRp1749
(dp1750
g60
(dp1751
sg69
g1737
sg62
(lp1752
g55
(g56
g57
NtRp1753
(dp1754
g60
(dp1755
g68
I4
ssg69
g1749
sg62
(lp1756
S"<Values at 0x3c40f58: {'verbose': False, 'ip': '127.0.0.1', 'shutdown_timeout': 5, 'taskbar': False, 'nocron': False, 'pid_filename': 'httpserver.pid', 'maxthreads': None, 'softcron': False, 'server_name': 'Batou', 'bpython': False, 'nogui': False, 'port': 8000, 'extcron': False, 'debuglevel': 30, 'test': None, 'folder': 'C:\\\\Users\\\\Bussiere\\\\Dropbox\\\\Projets\\\\jackpoint\\\\web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'password': '<ask>', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p1757
asbasbasbag55
(g71
g57
NtRp1758
(dp1759
g60
(dp1760
sg69
g1668
sg62
(lp1761
g55
(g76
g57
NtRp1762
(dp1763
g60
(dp1764
g80
g81
ssg69
g1758
sg62
(lp1765
g710
asbag55
(g76
g57
NtRp1766
(dp1767
g60
(dp1768
g87
g88
ssg69
g1758
sg62
(lp1769
S':'
asbag55
(g76
g57
NtRp1770
(dp1771
g60
(dp1772
sg69
g1758
sg62
(lp1773
g55
(g56
g57
NtRp1774
(dp1775
g60
(dp1776
g68
I4
ssg69
g1770
sg62
(lp1777
S'set([])'
p1778
asbasbasbag55
(g71
g57
NtRp1779
(dp1780
g60
(dp1781
sg69
g1668
sg62
(lp1782
g55
(g76
g57
NtRp1783
(dp1784
g60
(dp1785
g80
g81
ssg69
g1779
sg62
(lp1786
g732
asbag55
(g76
g57
NtRp1787
(dp1788
g60
(dp1789
g87
g88
ssg69
g1779
sg62
(lp1790
S':'
asbag55
(g76
g57
NtRp1791
(dp1792
g60
(dp1793
sg69
g1779
sg62
(lp1794
g55
(g56
g57
NtRp1795
(dp1796
g60
(dp1797
g68
I4
ssg69
g1791
sg62
(lp1798
g745
asbasbasbag55
(g71
g57
NtRp1799
(dp1800
g60
(dp1801
sg69
g1668
sg62
(lp1802
g55
(g76
g57
NtRp1803
(dp1804
g60
(dp1805
g80
g81
ssg69
g1799
sg62
(lp1806
g754
asbag55
(g76
g57
NtRp1807
(dp1808
g60
(dp1809
g87
g88
ssg69
g1799
sg62
(lp1810
S':'
asbag55
(g76
g57
NtRp1811
(dp1812
g60
(dp1813
sg69
g1799
sg62
(lp1814
g55
(g56
g57
NtRp1815
(dp1816
g60
(dp1817
g68
I4
ssg69
g1811
sg62
(lp1818
g767
asbasbasbag55
(g71
g57
NtRp1819
(dp1820
g60
(dp1821
sg69
g1668
sg62
(lp1822
g55
(g76
g57
NtRp1823
(dp1824
g60
(dp1825
g80
g81
ssg69
g1819
sg62
(lp1826
g974
asbag55
(g76
g57
NtRp1827
(dp1828
g60
(dp1829
g87
g88
ssg69
g1819
sg62
(lp1830
S':'
asbag55
(g76
g57
NtRp1831
(dp1832
g60
(dp1833
sg69
g1819
sg62
(lp1834
g55
(g56
g57
NtRp1835
(dp1836
g60
(dp1837
g68
I4
ssg69
g1831
sg62
(lp1838
g98
asbasbasbag55
(g71
g57
NtRp1839
(dp1840
g60
(dp1841
sg69
g1668
sg62
(lp1842
g55
(g76
g57
NtRp1843
(dp1844
g60
(dp1845
g80
g81
ssg69
g1839
sg62
(lp1846
g995
asbag55
(g76
g57
NtRp1847
(dp1848
g60
(dp1849
g87
g88
ssg69
g1839
sg62
(lp1850
S':'
asbag55
(g76
g57
NtRp1851
(dp1852
g60
(dp1853
sg69
g1839
sg62
(lp1854
g55
(g56
g57
NtRp1855
(dp1856
g60
(dp1857
g68
I4
ssg69
g1851
sg62
(lp1858
g98
asbasbasbag55
(g71
g57
NtRp1859
(dp1860
g60
(dp1861
sg69
g1668
sg62
(lp1862
g55
(g76
g57
NtRp1863
(dp1864
g60
(dp1865
g80
g81
ssg69
g1859
sg62
(lp1866
g1233
asbag55
(g76
g57
NtRp1867
(dp1868
g60
(dp1869
g87
g88
ssg69
g1859
sg62
(lp1870
S':'
asbag55
(g76
g57
NtRp1871
(dp1872
g60
(dp1873
sg69
g1859
sg62
(lp1874
g55
(g56
g57
NtRp1875
(dp1876
g60
(dp1877
g68
I4
ssg69
g1871
sg62
(lp1878
g1246
asbasbasbag55
(g71
g57
NtRp1879
(dp1880
g60
(dp1881
sg69
g1668
sg62
(lp1882
g55
(g76
g57
NtRp1883
(dp1884
g60
(dp1885
g80
g81
ssg69
g1879
sg62
(lp1886
g1276
asbag55
(g76
g57
NtRp1887
(dp1888
g60
(dp1889
g87
g88
ssg69
g1879
sg62
(lp1890
S':'
asbag55
(g76
g57
NtRp1891
(dp1892
g60
(dp1893
sg69
g1879
sg62
(lp1894
g55
(g56
g57
NtRp1895
(dp1896
g60
(dp1897
g68
I4
ssg69
g1891
sg62
(lp1898
g55
(g64
g57
NtRp1899
(dp1900
g60
(dp1901
g68
I3
ssg69
Nsg62
(lp1902
g55
(g71
g57
NtRp1903
(dp1904
g60
(dp1905
sg69
g1899
sg62
(lp1906
g55
(g76
g57
NtRp1907
(dp1908
g60
(dp1909
sg69
g1903
sg62
(lp1910
g55
(g56
g57
NtRp1911
(dp1912
g60
(dp1913
g68
I3
ssg69
g1907
sg62
(lp1914
S'1'
asbasbasbag55
(g71
g57
NtRp1915
(dp1916
g60
(dp1917
sg69
g1899
sg62
(lp1918
g55
(g76
g57
NtRp1919
(dp1920
g60
(dp1921
sg69
g1915
sg62
(lp1922
g55
(g56
g57
NtRp1923
(dp1924
g60
(dp1925
g68
I3
ssg69
g1919
sg62
(lp1926
S'99'
p1927
asbasbasbag55
(g71
g57
NtRp1928
(dp1929
g60
(dp1930
sg69
g1899
sg62
(lp1931
g55
(g76
g57
NtRp1932
(dp1933
g60
(dp1934
sg69
g1928
sg62
(lp1935
g55
(g56
g57
NtRp1936
(dp1937
g60
(dp1938
g68
I3
ssg69
g1932
sg62
(lp1939
S'7'
asbasbasbag55
(g71
g57
NtRp1940
(dp1941
g60
(dp1942
sg69
g1899
sg62
(lp1943
g55
(g76
g57
NtRp1944
(dp1945
g60
(dp1946
sg69
g1940
sg62
(lp1947
g55
(g56
g57
NtRp1948
(dp1949
g60
(dp1950
g68
I3
ssg69
g1944
sg62
(lp1951
S'datetime.datetime(2012, 3, 4, 22, 12, 8)'
p1952
asbasbasbag55
(g71
g57
NtRp1953
(dp1954
g60
(dp1955
sg69
g1899
sg62
(lp1956
g55
(g76
g57
NtRp1957
(dp1958
g60
(dp1959
sg69
g1953
sg62
(lp1960
g55
(g56
g57
NtRp1961
(dp1962
g60
(dp1963
g68
I3
ssg69
g1957
sg62
(lp1964
g1355
asbasbasbasbasbasbasbasbasbasbasbag55
(g71
g57
NtRp1965
(dp1966
g60
(dp1967
sg69
g65
sg62
(lp1968
g55
(g76
g57
NtRp1969
(dp1970
g60
(dp1971
g80
g81
ssg69
g1965
sg62
(lp1972
S'is_https'
p1973
asbag55
(g76
g57
NtRp1974
(dp1975
g60
(dp1976
g87
g88
ssg69
g1965
sg62
(lp1977
S':'
asbag55
(g76
g57
NtRp1978
(dp1979
g60
(dp1980
sg69
g1965
sg62
(lp1981
g55
(g56
g57
NtRp1982
(dp1983
g60
(dp1984
g68
I5
ssg69
g1978
sg62
(lp1985
g98
asbasbasbag55
(g71
g57
NtRp1986
(dp1987
g60
(dp1988
sg69
g65
sg62
(lp1989
g55
(g76
g57
NtRp1990
(dp1991
g60
(dp1992
g80
g81
ssg69
g1986
sg62
(lp1993
S'is_local'
p1994
asbag55
(g76
g57
NtRp1995
(dp1996
g60
(dp1997
g87
g88
ssg69
g1986
sg62
(lp1998
S':'
asbag55
(g76
g57
NtRp1999
(dp2000
g60
(dp2001
sg69
g1986
sg62
(lp2002
g55
(g56
g57
NtRp2003
(dp2004
g60
(dp2005
g68
I5
ssg69
g1999
sg62
(lp2006
g745
asbasbasbag55
(g71
g57
NtRp2007
(dp2008
g60
(dp2009
sg69
g65
sg62
(lp2010
g55
(g76
g57
NtRp2011
(dp2012
g60
(dp2013
g80
g81
ssg69
g2007
sg62
(lp2014
S'is_restful'
p2015
asbag55
(g76
g57
NtRp2016
(dp2017
g60
(dp2018
g87
g88
ssg69
g2007
sg62
(lp2019
S':'
asbag55
(g76
g57
NtRp2020
(dp2021
g60
(dp2022
sg69
g2007
sg62
(lp2023
g55
(g56
g57
NtRp2024
(dp2025
g60
(dp2026
g68
I5
ssg69
g2020
sg62
(lp2027
g98
asbasbasbag55
(g71
g57
NtRp2028
(dp2029
g60
(dp2030
sg69
g65
sg62
(lp2031
g55
(g76
g57
NtRp2032
(dp2033
g60
(dp2034
g80
g81
ssg69
g2028
sg62
(lp2035
S'now'
p2036
asbag55
(g76
g57
NtRp2037
(dp2038
g60
(dp2039
g87
g88
ssg69
g2028
sg62
(lp2040
S':'
asbag55
(g76
g57
NtRp2041
(dp2042
g60
(dp2043
sg69
g2028
sg62
(lp2044
g55
(g56
g57
NtRp2045
(dp2046
g60
(dp2047
g68
I5
ssg69
g2041
sg62
(lp2048
S'datetime.datetime(2012, 3, 13, 2, 49, 47, 583000)'
p2049
asbasbasbag55
(g71
g57
NtRp2050
(dp2051
g60
(dp2052
sg69
g65
sg62
(lp2053
g55
(g76
g57
NtRp2054
(dp2055
g60
(dp2056
g80
g81
ssg69
g2050
sg62
(lp2057
S'post_vars'
p2058
asbag55
(g76
g57
NtRp2059
(dp2060
g60
(dp2061
g87
g88
ssg69
g2050
sg62
(lp2062
S':'
asbag55
(g76
g57
NtRp2063
(dp2064
g60
(dp2065
sg69
g2050
sg62
(lp2066
g55
(g56
g57
NtRp2067
(dp2068
g60
(dp2069
g68
I5
ssg69
g2063
sg62
(lp2070
g55
(g64
g57
NtRp2071
(dp2072
g60
(dp2073
g68
I4
ssg69
Nsg62
(lp2074
sbasbasbasbag55
(g71
g57
NtRp2075
(dp2076
g60
(dp2077
sg69
g65
sg62
(lp2078
g55
(g76
g57
NtRp2079
(dp2080
g60
(dp2081
g80
g81
ssg69
g2075
sg62
(lp2082
S'raw_args'
p2083
asbag55
(g76
g57
NtRp2084
(dp2085
g60
(dp2086
g87
g88
ssg69
g2075
sg62
(lp2087
S':'
asbag55
(g76
g57
NtRp2088
(dp2089
g60
(dp2090
sg69
g2075
sg62
(lp2091
g55
(g56
g57
NtRp2092
(dp2093
g60
(dp2094
g68
I5
ssg69
g2088
sg62
(lp2095
S'README'
p2096
asbasbasbag55
(g71
g57
NtRp2097
(dp2098
g60
(dp2099
sg69
g65
sg62
(lp2100
g55
(g76
g57
NtRp2101
(dp2102
g60
(dp2103
g80
g81
ssg69
g2097
sg62
(lp2104
S'url'
p2105
asbag55
(g76
g57
NtRp2106
(dp2107
g60
(dp2108
g87
g88
ssg69
g2097
sg62
(lp2109
S':'
asbag55
(g76
g57
NtRp2110
(dp2111
g60
(dp2112
sg69
g2097
sg62
(lp2113
g55
(g56
g57
NtRp2114
(dp2115
g60
(dp2116
g68
I5
ssg69
g2110
sg62
(lp2117
S'/admin/default/design/README'
p2118
asbasbasbag55
(g71
g57
NtRp2119
(dp2120
g60
(dp2121
sg69
g65
sg62
(lp2122
g55
(g76
g57
NtRp2123
(dp2124
g60
(dp2125
g80
g81
ssg69
g2119
sg62
(lp2126
S'utcnow'
p2127
asbag55
(g76
g57
NtRp2128
(dp2129
g60
(dp2130
g87
g88
ssg69
g2119
sg62
(lp2131
S':'
asbag55
(g76
g57
NtRp2132
(dp2133
g60
(dp2134
sg69
g2119
sg62
(lp2135
g55
(g56
g57
NtRp2136
(dp2137
g60
(dp2138
g68
I5
ssg69
g2132
sg62
(lp2139
S'datetime.datetime(2012, 3, 13, 1, 49, 47, 583000)'
p2140
asbasbasbag55
(g71
g57
NtRp2141
(dp2142
g60
(dp2143
sg69
g65
sg62
(lp2144
g55
(g76
g57
NtRp2145
(dp2146
g60
(dp2147
g80
g81
ssg69
g2141
sg62
(lp2148
S'uuid'
p2149
asbag55
(g76
g57
NtRp2150
(dp2151
g60
(dp2152
g87
g88
ssg69
g2141
sg62
(lp2153
S':'
asbag55
(g76
g57
NtRp2154
(dp2155
g60
(dp2156
sg69
g2141
sg62
(lp2157
g55
(g56
g57
NtRp2158
(dp2159
g60
(dp2160
g68
I5
ssg69
g2154
sg62
(lp2161
S'admin/127.0.0.1.2012-03-13.02-49-47.ff3fd1af-f358-4852-aaf0-330b145816c6'
p2162
asbasbasbag55
(g71
g57
NtRp2163
(dp2164
g60
(dp2165
sg69
g65
sg62
(lp2166
g55
(g76
g57
NtRp2167
(dp2168
g60
(dp2169
g80
g81
ssg69
g2163
sg62
(lp2170
S'vars'
p2171
asbag55
(g76
g57
NtRp2172
(dp2173
g60
(dp2174
g87
g88
ssg69
g2163
sg62
(lp2175
S':'
asbag55
(g76
g57
NtRp2176
(dp2177
g60
(dp2178
sg69
g2163
sg62
(lp2179
g55
(g56
g57
NtRp2180
(dp2181
g60
(dp2182
g68
I5
ssg69
g2176
sg62
(lp2183
g55
(g64
g57
NtRp2184
(dp2185
g60
(dp2186
g68
I4
ssg69
Nsg62
(lp2187
sbasbasbasbag55
(g71
g57
NtRp2188
(dp2189
g60
(dp2190
sg69
g65
sg62
(lp2191
g55
(g76
g57
NtRp2192
(dp2193
g60
(dp2194
g80
g81
ssg69
g2188
sg62
(lp2195
S'wsgi'
p2196
asbag55
(g76
g57
NtRp2197
(dp2198
g60
(dp2199
g87
g88
ssg69
g2188
sg62
(lp2200
S':'
asbag55
(g76
g57
NtRp2201
(dp2202
g60
(dp2203
sg69
g2188
sg62
(lp2204
g55
(g56
g57
NtRp2205
(dp2206
g60
(dp2207
g68
I5
ssg69
g2201
sg62
(lp2208
g55
(g64
g57
NtRp2209
(dp2210
g60
(dp2211
g68
I4
ssg69
Nsg62
(lp2212
g55
(g71
g57
NtRp2213
(dp2214
g60
(dp2215
sg69
g2209
sg62
(lp2216
g55
(g76
g57
NtRp2217
(dp2218
g60
(dp2219
g80
g81
ssg69
g2213
sg62
(lp2220
S'environ'
p2221
asbag55
(g76
g57
NtRp2222
(dp2223
g60
(dp2224
g87
g88
ssg69
g2213
sg62
(lp2225
S':'
asbag55
(g76
g57
NtRp2226
(dp2227
g60
(dp2228
sg69
g2213
sg62
(lp2229
g55
(g56
g57
NtRp2230
(dp2231
g60
(dp2232
g68
I4
ssg69
g2226
sg62
(lp2233
g55
(g64
g57
NtRp2234
(dp2235
g60
(dp2236
g68
I3
ssg69
Nsg62
(lp2237
g55
(g71
g57
NtRp2238
(dp2239
g60
(dp2240
sg69
g2234
sg62
(lp2241
g55
(g76
g57
NtRp2242
(dp2243
g60
(dp2244
g80
g81
ssg69
g2238
sg62
(lp2245
S'HTTP_ACCEPT'
p2246
asbag55
(g76
g57
NtRp2247
(dp2248
g60
(dp2249
g87
g88
ssg69
g2238
sg62
(lp2250
S':'
asbag55
(g76
g57
NtRp2251
(dp2252
g60
(dp2253
sg69
g2238
sg62
(lp2254
g55
(g56
g57
NtRp2255
(dp2256
g60
(dp2257
g68
I3
ssg69
g2251
sg62
(lp2258
g789
asbasbasbag55
(g71
g57
NtRp2259
(dp2260
g60
(dp2261
sg69
g2234
sg62
(lp2262
g55
(g76
g57
NtRp2263
(dp2264
g60
(dp2265
g80
g81
ssg69
g2259
sg62
(lp2266
S'HTTP_ACCEPT_CHARSET'
p2267
asbag55
(g76
g57
NtRp2268
(dp2269
g60
(dp2270
g87
g88
ssg69
g2259
sg62
(lp2271
S':'
asbag55
(g76
g57
NtRp2272
(dp2273
g60
(dp2274
sg69
g2259
sg62
(lp2275
g55
(g56
g57
NtRp2276
(dp2277
g60
(dp2278
g68
I3
ssg69
g2272
sg62
(lp2279
g811
asbasbasbag55
(g71
g57
NtRp2280
(dp2281
g60
(dp2282
sg69
g2234
sg62
(lp2283
g55
(g76
g57
NtRp2284
(dp2285
g60
(dp2286
g80
g81
ssg69
g2280
sg62
(lp2287
S'HTTP_ACCEPT_ENCODING'
p2288
asbag55
(g76
g57
NtRp2289
(dp2290
g60
(dp2291
g87
g88
ssg69
g2280
sg62
(lp2292
S':'
asbag55
(g76
g57
NtRp2293
(dp2294
g60
(dp2295
sg69
g2280
sg62
(lp2296
g55
(g56
g57
NtRp2297
(dp2298
g60
(dp2299
g68
I3
ssg69
g2293
sg62
(lp2300
g833
asbasbasbag55
(g71
g57
NtRp2301
(dp2302
g60
(dp2303
sg69
g2234
sg62
(lp2304
g55
(g76
g57
NtRp2305
(dp2306
g60
(dp2307
g80
g81
ssg69
g2301
sg62
(lp2308
S'HTTP_ACCEPT_LANGUAGE'
p2309
asbag55
(g76
g57
NtRp2310
(dp2311
g60
(dp2312
g87
g88
ssg69
g2301
sg62
(lp2313
S':'
asbag55
(g76
g57
NtRp2314
(dp2315
g60
(dp2316
sg69
g2301
sg62
(lp2317
g55
(g56
g57
NtRp2318
(dp2319
g60
(dp2320
g68
I3
ssg69
g2314
sg62
(lp2321
g855
asbasbasbag55
(g71
g57
NtRp2322
(dp2323
g60
(dp2324
sg69
g2234
sg62
(lp2325
g55
(g76
g57
NtRp2326
(dp2327
g60
(dp2328
g80
g81
ssg69
g2322
sg62
(lp2329
S'HTTP_CONNECTION'
p2330
asbag55
(g76
g57
NtRp2331
(dp2332
g60
(dp2333
g87
g88
ssg69
g2322
sg62
(lp2334
S':'
asbag55
(g76
g57
NtRp2335
(dp2336
g60
(dp2337
sg69
g2322
sg62
(lp2338
g55
(g56
g57
NtRp2339
(dp2340
g60
(dp2341
g68
I3
ssg69
g2335
sg62
(lp2342
g877
asbasbasbag55
(g71
g57
NtRp2343
(dp2344
g60
(dp2345
sg69
g2234
sg62
(lp2346
g55
(g76
g57
NtRp2347
(dp2348
g60
(dp2349
g80
g81
ssg69
g2343
sg62
(lp2350
S'HTTP_COOKIE'
p2351
asbag55
(g76
g57
NtRp2352
(dp2353
g60
(dp2354
g87
g88
ssg69
g2343
sg62
(lp2355
S':'
asbag55
(g76
g57
NtRp2356
(dp2357
g60
(dp2358
sg69
g2343
sg62
(lp2359
g55
(g56
g57
NtRp2360
(dp2361
g60
(dp2362
g68
I3
ssg69
g2356
sg62
(lp2363
g899
asbasbasbag55
(g71
g57
NtRp2364
(dp2365
g60
(dp2366
sg69
g2234
sg62
(lp2367
g55
(g76
g57
NtRp2368
(dp2369
g60
(dp2370
g80
g81
ssg69
g2364
sg62
(lp2371
S'HTTP_HOST'
p2372
asbag55
(g76
g57
NtRp2373
(dp2374
g60
(dp2375
g87
g88
ssg69
g2364
sg62
(lp2376
S':'
asbag55
(g76
g57
NtRp2377
(dp2378
g60
(dp2379
sg69
g2364
sg62
(lp2380
g55
(g56
g57
NtRp2381
(dp2382
g60
(dp2383
g68
I3
ssg69
g2377
sg62
(lp2384
g921
asbasbasbag55
(g71
g57
NtRp2385
(dp2386
g60
(dp2387
sg69
g2234
sg62
(lp2388
g55
(g76
g57
NtRp2389
(dp2390
g60
(dp2391
g80
g81
ssg69
g2385
sg62
(lp2392
S'HTTP_REFERER'
p2393
asbag55
(g76
g57
NtRp2394
(dp2395
g60
(dp2396
g87
g88
ssg69
g2385
sg62
(lp2397
S':'
asbag55
(g76
g57
NtRp2398
(dp2399
g60
(dp2400
sg69
g2385
sg62
(lp2401
g55
(g56
g57
NtRp2402
(dp2403
g60
(dp2404
g68
I3
ssg69
g2398
sg62
(lp2405
g943
asbasbasbag55
(g71
g57
NtRp2406
(dp2407
g60
(dp2408
sg69
g2234
sg62
(lp2409
g55
(g76
g57
NtRp2410
(dp2411
g60
(dp2412
g80
g81
ssg69
g2406
sg62
(lp2413
S'HTTP_USER_AGENT'
p2414
asbag55
(g76
g57
NtRp2415
(dp2416
g60
(dp2417
g87
g88
ssg69
g2406
sg62
(lp2418
S':'
asbag55
(g76
g57
NtRp2419
(dp2420
g60
(dp2421
sg69
g2406
sg62
(lp2422
g55
(g56
g57
NtRp2423
(dp2424
g60
(dp2425
g68
I3
ssg69
g2419
sg62
(lp2426
g965
asbasbasbag55
(g71
g57
NtRp2427
(dp2428
g60
(dp2429
sg69
g2234
sg62
(lp2430
g55
(g76
g57
NtRp2431
(dp2432
g60
(dp2433
g80
g81
ssg69
g2427
sg62
(lp2434
S'PATH_INFO'
p2435
asbag55
(g76
g57
NtRp2436
(dp2437
g60
(dp2438
g87
g88
ssg69
g2427
sg62
(lp2439
S':'
asbag55
(g76
g57
NtRp2440
(dp2441
g60
(dp2442
sg69
g2427
sg62
(lp2443
g55
(g56
g57
NtRp2444
(dp2445
g60
(dp2446
g68
I3
ssg69
g2440
sg62
(lp2447
g1029
asbasbasbag55
(g71
g57
NtRp2448
(dp2449
g60
(dp2450
sg69
g2234
sg62
(lp2451
g55
(g76
g57
NtRp2452
(dp2453
g60
(dp2454
g80
g81
ssg69
g2448
sg62
(lp2455
S'QUERY_STRING'
p2456
asbag55
(g76
g57
NtRp2457
(dp2458
g60
(dp2459
g87
g88
ssg69
g2448
sg62
(lp2460
S':'
asbag55
(g76
g57
NtRp2461
(dp2462
g60
(dp2463
sg69
g2448
sg62
(lp2464
g55
(g56
g57
NtRp2465
(dp2466
g60
(dp2467
g68
I3
ssg69
g2461
sg62
(lp2468
S''
asbasbasbag55
(g71
g57
NtRp2469
(dp2470
g60
(dp2471
sg69
g2234
sg62
(lp2472
g55
(g76
g57
NtRp2473
(dp2474
g60
(dp2475
g80
g81
ssg69
g2469
sg62
(lp2476
S'REMOTE_ADDR'
p2477
asbag55
(g76
g57
NtRp2478
(dp2479
g60
(dp2480
g87
g88
ssg69
g2469
sg62
(lp2481
S':'
asbag55
(g76
g57
NtRp2482
(dp2483
g60
(dp2484
sg69
g2469
sg62
(lp2485
g55
(g56
g57
NtRp2486
(dp2487
g60
(dp2488
g68
I3
ssg69
g2482
sg62
(lp2489
g201
asbasbasbag55
(g71
g57
NtRp2490
(dp2491
g60
(dp2492
sg69
g2234
sg62
(lp2493
g55
(g76
g57
NtRp2494
(dp2495
g60
(dp2496
g80
g81
ssg69
g2490
sg62
(lp2497
S'REMOTE_PORT'
p2498
asbag55
(g76
g57
NtRp2499
(dp2500
g60
(dp2501
g87
g88
ssg69
g2490
sg62
(lp2502
S':'
asbag55
(g76
g57
NtRp2503
(dp2504
g60
(dp2505
sg69
g2490
sg62
(lp2506
g55
(g56
g57
NtRp2507
(dp2508
g60
(dp2509
g68
I3
ssg69
g2503
sg62
(lp2510
g1093
asbasbasbag55
(g71
g57
NtRp2511
(dp2512
g60
(dp2513
sg69
g2234
sg62
(lp2514
g55
(g76
g57
NtRp2515
(dp2516
g60
(dp2517
g80
g81
ssg69
g2511
sg62
(lp2518
S'REQUEST_METHOD'
p2519
asbag55
(g76
g57
NtRp2520
(dp2521
g60
(dp2522
g87
g88
ssg69
g2511
sg62
(lp2523
S':'
asbag55
(g76
g57
NtRp2524
(dp2525
g60
(dp2526
sg69
g2511
sg62
(lp2527
g55
(g56
g57
NtRp2528
(dp2529
g60
(dp2530
g68
I3
ssg69
g2524
sg62
(lp2531
g1115
asbasbasbag55
(g71
g57
NtRp2532
(dp2533
g60
(dp2534
sg69
g2234
sg62
(lp2535
g55
(g76
g57
NtRp2536
(dp2537
g60
(dp2538
g80
g81
ssg69
g2532
sg62
(lp2539
S'SCRIPT_NAME'
p2540
asbag55
(g76
g57
NtRp2541
(dp2542
g60
(dp2543
g87
g88
ssg69
g2532
sg62
(lp2544
S':'
asbag55
(g76
g57
NtRp2545
(dp2546
g60
(dp2547
sg69
g2532
sg62
(lp2548
g55
(g56
g57
NtRp2549
(dp2550
g60
(dp2551
g68
I3
ssg69
g2545
sg62
(lp2552
S''
asbasbasbag55
(g71
g57
NtRp2553
(dp2554
g60
(dp2555
sg69
g2234
sg62
(lp2556
g55
(g76
g57
NtRp2557
(dp2558
g60
(dp2559
g80
g81
ssg69
g2553
sg62
(lp2560
S'SERVER_NAME'
p2561
asbag55
(g76
g57
NtRp2562
(dp2563
g60
(dp2564
g87
g88
ssg69
g2553
sg62
(lp2565
S':'
asbag55
(g76
g57
NtRp2566
(dp2567
g60
(dp2568
sg69
g2553
sg62
(lp2569
g55
(g56
g57
NtRp2570
(dp2571
g60
(dp2572
g68
I3
ssg69
g2566
sg62
(lp2573
g1158
asbasbasbag55
(g71
g57
NtRp2574
(dp2575
g60
(dp2576
sg69
g2234
sg62
(lp2577
g55
(g76
g57
NtRp2578
(dp2579
g60
(dp2580
g80
g81
ssg69
g2574
sg62
(lp2581
S'SERVER_PORT'
p2582
asbag55
(g76
g57
NtRp2583
(dp2584
g60
(dp2585
g87
g88
ssg69
g2574
sg62
(lp2586
S':'
asbag55
(g76
g57
NtRp2587
(dp2588
g60
(dp2589
sg69
g2574
sg62
(lp2590
g55
(g56
g57
NtRp2591
(dp2592
g60
(dp2593
g68
I3
ssg69
g2587
sg62
(lp2594
g1180
asbasbasbag55
(g71
g57
NtRp2595
(dp2596
g60
(dp2597
sg69
g2234
sg62
(lp2598
g55
(g76
g57
NtRp2599
(dp2600
g60
(dp2601
g80
g81
ssg69
g2595
sg62
(lp2602
S'SERVER_PROTOCOL'
p2603
asbag55
(g76
g57
NtRp2604
(dp2605
g60
(dp2606
g87
g88
ssg69
g2595
sg62
(lp2607
S':'
asbag55
(g76
g57
NtRp2608
(dp2609
g60
(dp2610
sg69
g2595
sg62
(lp2611
g55
(g56
g57
NtRp2612
(dp2613
g60
(dp2614
g68
I3
ssg69
g2608
sg62
(lp2615
g1202
asbasbasbag55
(g71
g57
NtRp2616
(dp2617
g60
(dp2618
sg69
g2234
sg62
(lp2619
g55
(g76
g57
NtRp2620
(dp2621
g60
(dp2622
g80
g81
ssg69
g2616
sg62
(lp2623
S'SERVER_SOFTWARE'
p2624
asbag55
(g76
g57
NtRp2625
(dp2626
g60
(dp2627
g87
g88
ssg69
g2616
sg62
(lp2628
S':'
asbag55
(g76
g57
NtRp2629
(dp2630
g60
(dp2631
sg69
g2616
sg62
(lp2632
g55
(g56
g57
NtRp2633
(dp2634
g60
(dp2635
g68
I3
ssg69
g2629
sg62
(lp2636
g1224
asbasbasbag55
(g71
g57
NtRp2637
(dp2638
g60
(dp2639
sg69
g2234
sg62
(lp2640
g55
(g76
g57
NtRp2641
(dp2642
g60
(dp2643
g80
g81
ssg69
g2637
sg62
(lp2644
S'wsgi.errors'
p2645
asbag55
(g76
g57
NtRp2646
(dp2647
g60
(dp2648
g87
g88
ssg69
g2637
sg62
(lp2649
S':'
asbag55
(g76
g57
NtRp2650
(dp2651
g60
(dp2652
sg69
g2637
sg62
(lp2653
g55
(g56
g57
NtRp2654
(dp2655
g60
(dp2656
g68
I3
ssg69
g2650
sg62
(lp2657
S"<open file '<stderr>', mode 'w' at 0x01EE00B0>"
p2658
asbasbasbag55
(g71
g57
NtRp2659
(dp2660
g60
(dp2661
sg69
g2234
sg62
(lp2662
g55
(g76
g57
NtRp2663
(dp2664
g60
(dp2665
g80
g81
ssg69
g2659
sg62
(lp2666
S'wsgi.file_wrapper'
p2667
asbag55
(g76
g57
NtRp2668
(dp2669
g60
(dp2670
g87
g88
ssg69
g2659
sg62
(lp2671
S':'
asbag55
(g76
g57
NtRp2672
(dp2673
g60
(dp2674
sg69
g2659
sg62
(lp2675
g55
(g56
g57
NtRp2676
(dp2677
g60
(dp2678
g68
I3
ssg69
g2672
sg62
(lp2679
S'<class wsgiref.util.FileWrapper at 0x02C6D8D0>'
p2680
asbasbasbag55
(g71
g57
NtRp2681
(dp2682
g60
(dp2683
sg69
g2234
sg62
(lp2684
g55
(g76
g57
NtRp2685
(dp2686
g60
(dp2687
g80
g81
ssg69
g2681
sg62
(lp2688
S'wsgi.input'
p2689
asbag55
(g76
g57
NtRp2690
(dp2691
g60
(dp2692
g87
g88
ssg69
g2681
sg62
(lp2693
S':'
asbag55
(g76
g57
NtRp2694
(dp2695
g60
(dp2696
sg69
g2681
sg62
(lp2697
g55
(g56
g57
NtRp2698
(dp2699
g60
(dp2700
g68
I3
ssg69
g2694
sg62
(lp2701
S'<cStringIO.StringO object at 0x03F6C380>'
p2702
asbasbasbag55
(g71
g57
NtRp2703
(dp2704
g60
(dp2705
sg69
g2234
sg62
(lp2706
g55
(g76
g57
NtRp2707
(dp2708
g60
(dp2709
g80
g81
ssg69
g2703
sg62
(lp2710
S'wsgi.multiprocess'
p2711
asbag55
(g76
g57
NtRp2712
(dp2713
g60
(dp2714
g87
g88
ssg69
g2703
sg62
(lp2715
S':'
asbag55
(g76
g57
NtRp2716
(dp2717
g60
(dp2718
sg69
g2703
sg62
(lp2719
g55
(g56
g57
NtRp2720
(dp2721
g60
(dp2722
g68
I3
ssg69
g2716
sg62
(lp2723
g98
asbasbasbag55
(g71
g57
NtRp2724
(dp2725
g60
(dp2726
sg69
g2234
sg62
(lp2727
g55
(g76
g57
NtRp2728
(dp2729
g60
(dp2730
g80
g81
ssg69
g2724
sg62
(lp2731
S'wsgi.multithread'
p2732
asbag55
(g76
g57
NtRp2733
(dp2734
g60
(dp2735
g87
g88
ssg69
g2724
sg62
(lp2736
S':'
asbag55
(g76
g57
NtRp2737
(dp2738
g60
(dp2739
sg69
g2724
sg62
(lp2740
g55
(g56
g57
NtRp2741
(dp2742
g60
(dp2743
g68
I3
ssg69
g2737
sg62
(lp2744
g745
asbasbasbag55
(g71
g57
NtRp2745
(dp2746
g60
(dp2747
sg69
g2234
sg62
(lp2748
g55
(g76
g57
NtRp2749
(dp2750
g60
(dp2751
g80
g81
ssg69
g2745
sg62
(lp2752
S'wsgi.run_once'
p2753
asbag55
(g76
g57
NtRp2754
(dp2755
g60
(dp2756
g87
g88
ssg69
g2745
sg62
(lp2757
S':'
asbag55
(g76
g57
NtRp2758
(dp2759
g60
(dp2760
sg69
g2745
sg62
(lp2761
g55
(g56
g57
NtRp2762
(dp2763
g60
(dp2764
g68
I3
ssg69
g2758
sg62
(lp2765
g98
asbasbasbag55
(g71
g57
NtRp2766
(dp2767
g60
(dp2768
sg69
g2234
sg62
(lp2769
g55
(g76
g57
NtRp2770
(dp2771
g60
(dp2772
g80
g81
ssg69
g2766
sg62
(lp2773
S'wsgi.url_scheme'
p2774
asbag55
(g76
g57
NtRp2775
(dp2776
g60
(dp2777
g87
g88
ssg69
g2766
sg62
(lp2778
S':'
asbag55
(g76
g57
NtRp2779
(dp2780
g60
(dp2781
sg69
g2766
sg62
(lp2782
g55
(g56
g57
NtRp2783
(dp2784
g60
(dp2785
g68
I3
ssg69
g2779
sg62
(lp2786
g1506
asbasbasbag55
(g71
g57
NtRp2787
(dp2788
g60
(dp2789
sg69
g2234
sg62
(lp2790
g55
(g76
g57
NtRp2791
(dp2792
g60
(dp2793
g80
g81
ssg69
g2787
sg62
(lp2794
S'wsgi.version'
p2795
asbag55
(g76
g57
NtRp2796
(dp2797
g60
(dp2798
g87
g88
ssg69
g2787
sg62
(lp2799
S':'
asbag55
(g76
g57
NtRp2800
(dp2801
g60
(dp2802
sg69
g2787
sg62
(lp2803
g55
(g56
g57
NtRp2804
(dp2805
g60
(dp2806
g68
I3
ssg69
g2800
sg62
(lp2807
S'1'
asbasbasbasbasbasbasbasbasbasbasbasbasbsS'frames'
p2808
(lp2809
(dp2810
S'file'
p2811
S'C:\\Users\\Bussiere\\Dropbox\\Projets\\jackpoint\\web2py\\gluon\\restricted.py'
p2812
sS'dump'
p2813
(dp2814
sS'lnum'
p2815
I205
sS'lines'
p2816
(dp2817
I200
S'    try:'
p2818
sI201
S'        if type(code) == types.CodeType:'
p2819
sI202
S'            ccode = code'
p2820
sI203
S'        else:'
p2821
sI204
S'            ccode = compile2(code,layer)'
p2822
sI205
S'        exec ccode in environment'
p2823
sI206
S'    except HTTP:'
p2824
sI207
S'        raise'
p2825
sI208
S'    except RestrictedError:'
p2826
sI209
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p2827
ssS'call'
p2828
S'(code="# coding: utf8\\n\\nEXPERIMENTAL_STUFF = True\\n\\nif EX...te\'))\\n\\n\\n\\nresponse._vars=response._caller(design)\\n", environment={\'A\': <class \'gluon.html.A\'>, \'ALLOW_TOGGLE\': \'true\', \'A_button\': <function A_button at 0x042DDB70>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, \'CAT\': <class \'gluon.html.CAT\'>, \'CENTER\': <class \'gluon.html.CENTER\'>, ...}, layer=r\'C:\\Users\\Bussiere\\Dropbox\\Projets\\jackpoint\\web2py\\applications\\admin\\controllers/default.py\')'
p2829
sS'func'
p2830
S'restricted'
p2831
sa(dp2832
g2811
S'C:\\Users\\Bussiere\\Dropbox\\Projets\\jackpoint\\web2py\\applications\\admin\\controllers\\default.py'
p2833
sg2813
(dp2834
sg2815
I1352
sg2816
(dp2835
I1344
S'def reload_routes():'
p2836
sI1345
S'    """ Reload routes.py """'
p2837
sI1346
S'    import gluon.rewrite'
p2838
sI1347
S'    gluon.rewrite.load()'
p2839
sI1348
S"    redirect(URL('site'))"
p2840
sI1349
S''
sI1350
S''
sI1341
S'    else:'
p2841
sI1342
S'        return dict(form=T("Disabled"))'
p2842
sI1343
S''
ssg2828
S'()'
p2843
sg2830
S'<module>'
p2844
sa(dp2845
g2811
S'C:\\Users\\Bussiere\\Dropbox\\Projets\\jackpoint\\web2py\\gluon\\globals.py'
p2846
sg2813
(dp2847
sg2815
I173
sg2816
(dp2848
I168
S'        self.menu = []             # used by the default view layout'
p2849
sI169
S'        self.files = []            # used by web2py_ajax.html'
p2850
sI170
S'        self.generic_patterns = [] # patterns to allow generic views'
p2851
sI171
S"        self.delimiters = ('{{','}}')"
p2852
sI172
S'        self._vars = None'
p2853
sI173
S'        self._caller = lambda f: f()'
p2854
sI174
S'        self._view_environment = None'
p2855
sI175
S'        self._custom_commit = None'
p2856
sI176
S'        self._custom_rollback = None'
p2857
sI177
S''
ssg2828
S'(f=<function design at 0x0414AA30>)'
p2858
sg2830
S'<lambda>'
p2859
sa(dp2860
g2811
S'C:\\Users\\Bussiere\\Dropbox\\Projets\\jackpoint\\web2py\\applications\\admin\\controllers\\default.py'
p2861
sg2813
(dp2862
sg2815
I760
sg2816
(dp2863
I755
S'    # Get all languages'
p2864
sI756
S"    languages = listdir(apath('%s/languages/' % app, r=request), '[\\w-]*\\.py')"
p2865
sI757
S''
sI758
S'    #Get crontab'
p2866
sI759
S"    cronfolder = apath('%s/cron' % app, r=request)"
p2867
sI760
S'    if not os.path.exists(cronfolder): os.mkdir(cronfolder)'
p2868
sI761
S"    crontab = apath('%s/cron/crontab' % app, r=request)"
p2869
sI762
S'    if not os.path.exists(crontab):'
p2870
sI763
S"        safe_write(crontab, '#crontab')"
p2871
sI764
S''
ssg2828
S'()'
p2872
sg2830
S'design'
p2873
sasS'pyver'
p2874
S'Python 2.5.4: C:\\Users\\Bussiere\\Dropbox\\Projets\\jackpoint\\web2py\\web2py.exe'
p2875
sS'session'
p2876
g55
(g56
g57
NtRp2877
(dp2878
g60
(dp2879
sg62
(lp2880
g55
(g64
g57
NtRp2881
(dp2882
g60
(dp2883
g68
I5
ssg69
Nsg62
(lp2884
g55
(g71
g57
NtRp2885
(dp2886
g60
(dp2887
sg69
g2881
sg62
(lp2888
g55
(g76
g57
NtRp2889
(dp2890
g60
(dp2891
g80
g81
ssg69
g2885
sg62
(lp2892
S'authorized'
p2893
asbag55
(g76
g57
NtRp2894
(dp2895
g60
(dp2896
g87
g88
ssg69
g2885
sg62
(lp2897
S':'
asbag55
(g76
g57
NtRp2898
(dp2899
g60
(dp2900
sg69
g2885
sg62
(lp2901
g55
(g56
g57
NtRp2902
(dp2903
g60
(dp2904
g68
I5
ssg69
g2898
sg62
(lp2905
g745
asbasbasbag55
(g71
g57
NtRp2906
(dp2907
g60
(dp2908
sg69
g2881
sg62
(lp2909
g55
(g76
g57
NtRp2910
(dp2911
g60
(dp2912
g80
g81
ssg69
g2906
sg62
(lp2913
S'check_version'
p2914
asbag55
(g76
g57
NtRp2915
(dp2916
g60
(dp2917
g87
g88
ssg69
g2906
sg62
(lp2918
S':'
asbag55
(g76
g57
NtRp2919
(dp2920
g60
(dp2921
sg69
g2906
sg62
(lp2922
g55
(g56
g57
NtRp2923
(dp2924
g60
(dp2925
g68
I5
ssg69
g2919
sg62
(lp2926
g98
asbasbasbag55
(g71
g57
NtRp2927
(dp2928
g60
(dp2929
sg69
g2881
sg62
(lp2930
g55
(g76
g57
NtRp2931
(dp2932
g60
(dp2933
g80
g81
ssg69
g2927
sg62
(lp2934
S'last_time'
p2935
asbag55
(g76
g57
NtRp2936
(dp2937
g60
(dp2938
g87
g88
ssg69
g2927
sg62
(lp2939
S':'
asbag55
(g76
g57
NtRp2940
(dp2941
g60
(dp2942
sg69
g2927
sg62
(lp2943
g55
(g56
g57
NtRp2944
(dp2945
g60
(dp2946
g68
I5
ssg69
g2940
sg62
(lp2947
S'1331603387.6129999'
p2948
asbasbasbasbasbsS'etype'
p2949
S"<type 'exceptions.WindowsError'>"
p2950
sS'date'
p2951
S'Tue Mar 13 02:49:47 2012'
p2952
sS'response'
p2953
g55
(g56
g57
NtRp2954
(dp2955
g60
(dp2956
sg62
(lp2957
g55
(g64
g57
NtRp2958
(dp2959
g60
(dp2960
g68
I5
ssg69
Nsg62
(lp2961
g55
(g71
g57
NtRp2962
(dp2963
g60
(dp2964
sg69
g2958
sg62
(lp2965
g55
(g76
g57
NtRp2966
(dp2967
g60
(dp2968
g80
g81
ssg69
g2962
sg62
(lp2969
g166
asbag55
(g76
g57
NtRp2970
(dp2971
g60
(dp2972
g87
g88
ssg69
g2962
sg62
(lp2973
S':'
asbag55
(g76
g57
NtRp2974
(dp2975
g60
(dp2976
sg69
g2962
sg62
(lp2977
g55
(g56
g57
NtRp2978
(dp2979
g60
(dp2980
g68
I5
ssg69
g2974
sg62
(lp2981
S'<cStringIO.StringO object at 0x0405C280>'
p2982
asbasbasbag55
(g71
g57
NtRp2983
(dp2984
g60
(dp2985
sg69
g2958
sg62
(lp2986
g55
(g76
g57
NtRp2987
(dp2988
g60
(dp2989
g80
g81
ssg69
g2983
sg62
(lp2990
g232
asbag55
(g76
g57
NtRp2991
(dp2992
g60
(dp2993
g87
g88
ssg69
g2983
sg62
(lp2994
S':'
asbag55
(g76
g57
NtRp2995
(dp2996
g60
(dp2997
sg69
g2983
sg62
(lp2998
g55
(g56
g57
NtRp2999
(dp3000
g60
(dp3001
g68
I5
ssg69
g2995
sg62
(lp3002
g55
(g64
g57
NtRp3003
(dp3004
g60
(dp3005
g68
I4
ssg69
Nsg62
(lp3006
g55
(g71
g57
NtRp3007
(dp3008
g60
(dp3009
sg69
g3003
sg62
(lp3010
g55
(g76
g57
NtRp3011
(dp3012
g60
(dp3013
g80
g81
ssg69
g3007
sg62
(lp3014
S'session_id_admin'
p3015
asbag55
(g76
g57
NtRp3016
(dp3017
g60
(dp3018
g87
g88
ssg69
g3007
sg62
(lp3019
S':'
asbag55
(g76
g57
NtRp3020
(dp3021
g60
(dp3022
sg69
g3007
sg62
(lp3023
g55
(g56
g57
NtRp3024
(dp3025
g60
(dp3026
g68
I4
ssg69
g3020
sg62
(lp3027
g55
(g64
g57
NtRp3028
(dp3029
g60
(dp3030
g68
I3
ssg69
Nsg62
(lp3031
g55
(g71
g57
NtRp3032
(dp3033
g60
(dp3034
sg69
g3028
sg62
(lp3035
g55
(g76
g57
NtRp3036
(dp3037
g60
(dp3038
g80
g81
ssg69
g3032
sg62
(lp3039
g282
asbag55
(g76
g57
NtRp3040
(dp3041
g60
(dp3042
g87
g88
ssg69
g3032
sg62
(lp3043
S':'
asbag55
(g76
g57
NtRp3044
(dp3045
g60
(dp3046
sg69
g3032
sg62
(lp3047
g55
(g56
g57
NtRp3048
(dp3049
g60
(dp3050
g68
I3
ssg69
g3044
sg62
(lp3051
S''
asbasbasbag55
(g71
g57
NtRp3052
(dp3053
g60
(dp3054
sg69
g3028
sg62
(lp3055
g55
(g76
g57
NtRp3056
(dp3057
g60
(dp3058
g80
g81
ssg69
g3052
sg62
(lp3059
g303
asbag55
(g76
g57
NtRp3060
(dp3061
g60
(dp3062
g87
g88
ssg69
g3052
sg62
(lp3063
S':'
asbag55
(g76
g57
NtRp3064
(dp3065
g60
(dp3066
sg69
g3052
sg62
(lp3067
g55
(g56
g57
NtRp3068
(dp3069
g60
(dp3070
g68
I3
ssg69
g3064
sg62
(lp3071
S''
asbasbasbag55
(g71
g57
NtRp3072
(dp3073
g60
(dp3074
sg69
g3028
sg62
(lp3075
g55
(g76
g57
NtRp3076
(dp3077
g60
(dp3078
g80
g81
ssg69
g3072
sg62
(lp3079
g324
asbag55
(g76
g57
NtRp3080
(dp3081
g60
(dp3082
g87
g88
ssg69
g3072
sg62
(lp3083
S':'
asbag55
(g76
g57
NtRp3084
(dp3085
g60
(dp3086
sg69
g3072
sg62
(lp3087
g55
(g56
g57
NtRp3088
(dp3089
g60
(dp3090
g68
I3
ssg69
g3084
sg62
(lp3091
S''
asbasbasbag55
(g71
g57
NtRp3092
(dp3093
g60
(dp3094
sg69
g3028
sg62
(lp3095
g55
(g76
g57
NtRp3096
(dp3097
g60
(dp3098
g80
g81
ssg69
g3092
sg62
(lp3099
g345
asbag55
(g76
g57
NtRp3100
(dp3101
g60
(dp3102
g87
g88
ssg69
g3092
sg62
(lp3103
S':'
asbag55
(g76
g57
NtRp3104
(dp3105
g60
(dp3106
sg69
g3092
sg62
(lp3107
g55
(g56
g57
NtRp3108
(dp3109
g60
(dp3110
g68
I3
ssg69
g3104
sg62
(lp3111
S''
asbasbasbag55
(g71
g57
NtRp3112
(dp3113
g60
(dp3114
sg69
g3028
sg62
(lp3115
g55
(g76
g57
NtRp3116
(dp3117
g60
(dp3118
g80
g81
ssg69
g3112
sg62
(lp3119
g366
asbag55
(g76
g57
NtRp3120
(dp3121
g60
(dp3122
g87
g88
ssg69
g3112
sg62
(lp3123
S':'
asbag55
(g76
g57
NtRp3124
(dp3125
g60
(dp3126
sg69
g3112
sg62
(lp3127
g55
(g56
g57
NtRp3128
(dp3129
g60
(dp3130
g68
I3
ssg69
g3124
sg62
(lp3131
S'/'
asbasbasbag55
(g71
g57
NtRp3132
(dp3133
g60
(dp3134
sg69
g3028
sg62
(lp3135
g55
(g76
g57
NtRp3136
(dp3137
g60
(dp3138
g80
g81
ssg69
g3132
sg62
(lp3139
g387
asbag55
(g76
g57
NtRp3140
(dp3141
g60
(dp3142
g87
g88
ssg69
g3132
sg62
(lp3143
S':'
asbag55
(g76
g57
NtRp3144
(dp3145
g60
(dp3146
sg69
g3132
sg62
(lp3147
g55
(g56
g57
NtRp3148
(dp3149
g60
(dp3150
g68
I3
ssg69
g3144
sg62
(lp3151
S''
asbasbasbag55
(g71
g57
NtRp3152
(dp3153
g60
(dp3154
sg69
g3028
sg62
(lp3155
g55
(g76
g57
NtRp3156
(dp3157
g60
(dp3158
g80
g81
ssg69
g3152
sg62
(lp3159
g408
asbag55
(g76
g57
NtRp3160
(dp3161
g60
(dp3162
g87
g88
ssg69
g3152
sg62
(lp3163
S':'
asbag55
(g76
g57
NtRp3164
(dp3165
g60
(dp3166
sg69
g3152
sg62
(lp3167
g55
(g56
g57
NtRp3168
(dp3169
g60
(dp3170
g68
I3
ssg69
g3164
sg62
(lp3171
S''
asbasbasbasbasbasbasbasbasbasbasbag55
(g71
g57
NtRp3172
(dp3173
g60
(dp3174
sg69
g2958
sg62
(lp3175
g55
(g76
g57
NtRp3176
(dp3177
g60
(dp3178
g80
g81
ssg69
g3172
sg62
(lp3179
S'delimiters'
p3180
asbag55
(g76
g57
NtRp3181
(dp3182
g60
(dp3183
g87
g88
ssg69
g3172
sg62
(lp3184
S':'
asbag55
(g76
g57
NtRp3185
(dp3186
g60
(dp3187
sg69
g3172
sg62
(lp3188
g55
(g56
g57
NtRp3189
(dp3190
g60
(dp3191
g68
I5
ssg69
g3185
sg62
(lp3192
g55
(g64
g57
NtRp3193
(dp3194
g60
(dp3195
g68
I4
ssg69
Nsg62
(lp3196
g55
(g71
g57
NtRp3197
(dp3198
g60
(dp3199
sg69
g3193
sg62
(lp3200
g55
(g76
g57
NtRp3201
(dp3202
g60
(dp3203
sg69
g3197
sg62
(lp3204
g55
(g56
g57
NtRp3205
(dp3206
g60
(dp3207
g68
I4
ssg69
g3201
sg62
(lp3208
S'{{'
p3209
asbasbasbag55
(g71
g57
NtRp3210
(dp3211
g60
(dp3212
sg69
g3193
sg62
(lp3213
g55
(g76
g57
NtRp3214
(dp3215
g60
(dp3216
sg69
g3210
sg62
(lp3217
g55
(g56
g57
NtRp3218
(dp3219
g60
(dp3220
g68
I4
ssg69
g3214
sg62
(lp3221
S'}}'
p3222
asbasbasbasbasbasbasbag55
(g71
g57
NtRp3223
(dp3224
g60
(dp3225
sg69
g2958
sg62
(lp3226
g55
(g76
g57
NtRp3227
(dp3228
g60
(dp3229
g80
g81
ssg69
g3223
sg62
(lp3230
S'files'
p3231
asbag55
(g76
g57
NtRp3232
(dp3233
g60
(dp3234
g87
g88
ssg69
g3223
sg62
(lp3235
S':'
asbag55
(g76
g57
NtRp3236
(dp3237
g60
(dp3238
sg69
g3223
sg62
(lp3239
g55
(g56
g57
NtRp3240
(dp3241
g60
(dp3242
g68
I5
ssg69
g3236
sg62
(lp3243
g55
(g64
g57
NtRp3244
(dp3245
g60
(dp3246
g68
I4
ssg69
Nsg62
(lp3247
g55
(g71
g57
NtRp3248
(dp3249
g60
(dp3250
sg69
g3244
sg62
(lp3251
g55
(g76
g57
NtRp3252
(dp3253
g60
(dp3254
sg69
g3248
sg62
(lp3255
g55
(g56
g57
NtRp3256
(dp3257
g60
(dp3258
g68
I4
ssg69
g3252
sg62
(lp3259
S'/admin/static/plugin_multiselect/jquery.dimensions.js'
p3260
asbasbasbag55
(g71
g57
NtRp3261
(dp3262
g60
(dp3263
sg69
g3244
sg62
(lp3264
g55
(g76
g57
NtRp3265
(dp3266
g60
(dp3267
sg69
g3261
sg62
(lp3268
g55
(g56
g57
NtRp3269
(dp3270
g60
(dp3271
g68
I4
ssg69
g3265
sg62
(lp3272
S'/admin/static/plugin_multiselect/jquery.multiselect.js'
p3273
asbasbasbag55
(g71
g57
NtRp3274
(dp3275
g60
(dp3276
sg69
g3244
sg62
(lp3277
g55
(g76
g57
NtRp3278
(dp3279
g60
(dp3280
sg69
g3274
sg62
(lp3281
g55
(g56
g57
NtRp3282
(dp3283
g60
(dp3284
g68
I4
ssg69
g3278
sg62
(lp3285
S'/admin/static/plugin_multiselect/jquery.multiselect.css'
p3286
asbasbasbag55
(g71
g57
NtRp3287
(dp3288
g60
(dp3289
sg69
g3244
sg62
(lp3290
g55
(g76
g57
NtRp3291
(dp3292
g60
(dp3293
sg69
g3287
sg62
(lp3294
g55
(g56
g57
NtRp3295
(dp3296
g60
(dp3297
g68
I4
ssg69
g3291
sg62
(lp3298
S'/admin/static/plugin_multiselect/start.js'
p3299
asbasbasbasbasbasbasbag55
(g71
g57
NtRp3300
(dp3301
g60
(dp3302
sg69
g2958
sg62
(lp3303
g55
(g76
g57
NtRp3304
(dp3305
g60
(dp3306
g80
g81
ssg69
g3300
sg62
(lp3307
S'flash'
p3308
asbag55
(g76
g57
NtRp3309
(dp3310
g60
(dp3311
g87
g88
ssg69
g3300
sg62
(lp3312
S':'
asbag55
(g76
g57
NtRp3313
(dp3314
g60
(dp3315
sg69
g3300
sg62
(lp3316
g55
(g56
g57
NtRp3317
(dp3318
g60
(dp3319
g68
I5
ssg69
g3313
sg62
(lp3320
S''
asbasbasbag55
(g71
g57
NtRp3321
(dp3322
g60
(dp3323
sg69
g2958
sg62
(lp3324
g55
(g76
g57
NtRp3325
(dp3326
g60
(dp3327
g80
g81
ssg69
g3321
sg62
(lp3328
S'generic_patterns'
p3329
asbag55
(g76
g57
NtRp3330
(dp3331
g60
(dp3332
g87
g88
ssg69
g3321
sg62
(lp3333
S':'
asbag55
(g76
g57
NtRp3334
(dp3335
g60
(dp3336
sg69
g3321
sg62
(lp3337
g55
(g56
g57
NtRp3338
(dp3339
g60
(dp3340
g68
I5
ssg69
g3334
sg62
(lp3341
g55
(g64
g57
NtRp3342
(dp3343
g60
(dp3344
g68
I4
ssg69
Nsg62
(lp3345
sbasbasbasbag55
(g71
g57
NtRp3346
(dp3347
g60
(dp3348
sg69
g2958
sg62
(lp3349
g55
(g76
g57
NtRp3350
(dp3351
g60
(dp3352
g80
g81
ssg69
g3346
sg62
(lp3353
S'headers'
p3354
asbag55
(g76
g57
NtRp3355
(dp3356
g60
(dp3357
g87
g88
ssg69
g3346
sg62
(lp3358
S':'
asbag55
(g76
g57
NtRp3359
(dp3360
g60
(dp3361
sg69
g3346
sg62
(lp3362
g55
(g56
g57
NtRp3363
(dp3364
g60
(dp3365
g68
I5
ssg69
g3359
sg62
(lp3366
g55
(g64
g57
NtRp3367
(dp3368
g60
(dp3369
g68
I4
ssg69
Nsg62
(lp3370
g55
(g71
g57
NtRp3371
(dp3372
g60
(dp3373
sg69
g3367
sg62
(lp3374
g55
(g76
g57
NtRp3375
(dp3376
g60
(dp3377
g80
g81
ssg69
g3371
sg62
(lp3378
S'Cache-Control'
p3379
asbag55
(g76
g57
NtRp3380
(dp3381
g60
(dp3382
g87
g88
ssg69
g3371
sg62
(lp3383
S':'
asbag55
(g76
g57
NtRp3384
(dp3385
g60
(dp3386
sg69
g3371
sg62
(lp3387
g55
(g56
g57
NtRp3388
(dp3389
g60
(dp3390
g68
I4
ssg69
g3384
sg62
(lp3391
S'no-store, no-cache, must-revalidate, post-check=0, pre-check=0'
p3392
asbasbasbag55
(g71
g57
NtRp3393
(dp3394
g60
(dp3395
sg69
g3367
sg62
(lp3396
g55
(g76
g57
NtRp3397
(dp3398
g60
(dp3399
g80
g81
ssg69
g3393
sg62
(lp3400
S'Content-Type'
p3401
asbag55
(g76
g57
NtRp3402
(dp3403
g60
(dp3404
g87
g88
ssg69
g3393
sg62
(lp3405
S':'
asbag55
(g76
g57
NtRp3406
(dp3407
g60
(dp3408
sg69
g3393
sg62
(lp3409
g55
(g56
g57
NtRp3410
(dp3411
g60
(dp3412
g68
I4
ssg69
g3406
sg62
(lp3413
S'text/html; charset=utf-8'
p3414
asbasbasbag55
(g71
g57
NtRp3415
(dp3416
g60
(dp3417
sg69
g3367
sg62
(lp3418
g55
(g76
g57
NtRp3419
(dp3420
g60
(dp3421
g80
g81
ssg69
g3415
sg62
(lp3422
S'Expires'
p3423
asbag55
(g76
g57
NtRp3424
(dp3425
g60
(dp3426
g87
g88
ssg69
g3415
sg62
(lp3427
S':'
asbag55
(g76
g57
NtRp3428
(dp3429
g60
(dp3430
sg69
g3415
sg62
(lp3431
g55
(g56
g57
NtRp3432
(dp3433
g60
(dp3434
g68
I4
ssg69
g3428
sg62
(lp3435
S'Tue, 13 Mar 2012 01:49:47 GMT'
p3436
asbasbasbag55
(g71
g57
NtRp3437
(dp3438
g60
(dp3439
sg69
g3367
sg62
(lp3440
g55
(g76
g57
NtRp3441
(dp3442
g60
(dp3443
g80
g81
ssg69
g3437
sg62
(lp3444
S'Pragma'
p3445
asbag55
(g76
g57
NtRp3446
(dp3447
g60
(dp3448
g87
g88
ssg69
g3437
sg62
(lp3449
S':'
asbag55
(g76
g57
NtRp3450
(dp3451
g60
(dp3452
sg69
g3437
sg62
(lp3453
g55
(g56
g57
NtRp3454
(dp3455
g60
(dp3456
g68
I4
ssg69
g3450
sg62
(lp3457
S'no-cache'
p3458
asbasbasbag55
(g71
g57
NtRp3459
(dp3460
g60
(dp3461
sg69
g3367
sg62
(lp3462
g55
(g76
g57
NtRp3463
(dp3464
g60
(dp3465
g80
g81
ssg69
g3459
sg62
(lp3466
S'X-Powered-By'
p3467
asbag55
(g76
g57
NtRp3468
(dp3469
g60
(dp3470
g87
g88
ssg69
g3459
sg62
(lp3471
S':'
asbag55
(g76
g57
NtRp3472
(dp3473
g60
(dp3474
sg69
g3459
sg62
(lp3475
g55
(g56
g57
NtRp3476
(dp3477
g60
(dp3478
g68
I4
ssg69
g3472
sg62
(lp3479
S'web2py'
p3480
asbasbasbasbasbasbasbag55
(g71
g57
NtRp3481
(dp3482
g60
(dp3483
sg69
g2958
sg62
(lp3484
g55
(g76
g57
NtRp3485
(dp3486
g60
(dp3487
g80
g81
ssg69
g3481
sg62
(lp3488
S'menu'
p3489
asbag55
(g76
g57
NtRp3490
(dp3491
g60
(dp3492
g87
g88
ssg69
g3481
sg62
(lp3493
S':'
asbag55
(g76
g57
NtRp3494
(dp3495
g60
(dp3496
sg69
g3481
sg62
(lp3497
g55
(g56
g57
NtRp3498
(dp3499
g60
(dp3500
g68
I5
ssg69
g3494
sg62
(lp3501
g55
(g64
g57
NtRp3502
(dp3503
g60
(dp3504
g68
I4
ssg69
Nsg62
(lp3505
g55
(g71
g57
NtRp3506
(dp3507
g60
(dp3508
sg69
g3502
sg62
(lp3509
g55
(g76
g57
NtRp3510
(dp3511
g60
(dp3512
sg69
g3506
sg62
(lp3513
g55
(g56
g57
NtRp3514
(dp3515
g60
(dp3516
g68
I4
ssg69
g3510
sg62
(lp3517
g55
(g64
g57
NtRp3518
(dp3519
g60
(dp3520
g68
I3
ssg69
Nsg62
(lp3521
g55
(g71
g57
NtRp3522
(dp3523
g60
(dp3524
sg69
g3518
sg62
(lp3525
g55
(g76
g57
NtRp3526
(dp3527
g60
(dp3528
sg69
g3522
sg62
(lp3529
g55
(g56
g57
NtRp3530
(dp3531
g60
(dp3532
g68
I3
ssg69
g3526
sg62
(lp3533
cgluon.languages
lazyT_unpickle
p3534
(S's\x04\x00\x00\x00Site'
tRp3535
asbasbasbag55
(g71
g57
NtRp3536
(dp3537
g60
(dp3538
sg69
g3518
sg62
(lp3539
g55
(g76
g57
NtRp3540
(dp3541
g60
(dp3542
sg69
g3536
sg62
(lp3543
g55
(g56
g57
NtRp3544
(dp3545
g60
(dp3546
g68
I3
ssg69
g3540
sg62
(lp3547
g98
asbasbasbag55
(g71
g57
NtRp3548
(dp3549
g60
(dp3550
sg69
g3518
sg62
(lp3551
g55
(g76
g57
NtRp3552
(dp3553
g60
(dp3554
sg69
g3548
sg62
(lp3555
g55
(g56
g57
NtRp3556
(dp3557
g60
(dp3558
g68
I3
ssg69
g3552
sg62
(lp3559
S'/admin/default/site'
p3560
asbasbasbasbasbasbasbag55
(g71
g57
NtRp3561
(dp3562
g60
(dp3563
sg69
g3502
sg62
(lp3564
g55
(g76
g57
NtRp3565
(dp3566
g60
(dp3567
sg69
g3561
sg62
(lp3568
g55
(g56
g57
NtRp3569
(dp3570
g60
(dp3571
g68
I4
ssg69
g3565
sg62
(lp3572
g55
(g64
g57
NtRp3573
(dp3574
g60
(dp3575
g68
I3
ssg69
Nsg62
(lp3576
g55
(g71
g57
NtRp3577
(dp3578
g60
(dp3579
sg69
g3573
sg62
(lp3580
g55
(g76
g57
NtRp3581
(dp3582
g60
(dp3583
sg69
g3577
sg62
(lp3584
g55
(g56
g57
NtRp3585
(dp3586
g60
(dp3587
g68
I3
ssg69
g3581
sg62
(lp3588
g3534
(S's\x04\x00\x00\x00Edit'
tRp3589
asbasbasbag55
(g71
g57
NtRp3590
(dp3591
g60
(dp3592
sg69
g3573
sg62
(lp3593
g55
(g76
g57
NtRp3594
(dp3595
g60
(dp3596
sg69
g3590
sg62
(lp3597
g55
(g56
g57
NtRp3598
(dp3599
g60
(dp3600
g68
I3
ssg69
g3594
sg62
(lp3601
g745
asbasbasbag55
(g71
g57
NtRp3602
(dp3603
g60
(dp3604
sg69
g3573
sg62
(lp3605
g55
(g76
g57
NtRp3606
(dp3607
g60
(dp3608
sg69
g3602
sg62
(lp3609
g55
(g56
g57
NtRp3610
(dp3611
g60
(dp3612
g68
I3
ssg69
g3606
sg62
(lp3613
S'/admin/default/design/README'
p3614
asbasbasbasbasbasbasbag55
(g71
g57
NtRp3615
(dp3616
g60
(dp3617
sg69
g3502
sg62
(lp3618
g55
(g76
g57
NtRp3619
(dp3620
g60
(dp3621
sg69
g3615
sg62
(lp3622
g55
(g56
g57
NtRp3623
(dp3624
g60
(dp3625
g68
I4
ssg69
g3619
sg62
(lp3626
g55
(g64
g57
NtRp3627
(dp3628
g60
(dp3629
g68
I3
ssg69
Nsg62
(lp3630
g55
(g71
g57
NtRp3631
(dp3632
g60
(dp3633
sg69
g3627
sg62
(lp3634
g55
(g76
g57
NtRp3635
(dp3636
g60
(dp3637
sg69
g3631
sg62
(lp3638
g55
(g56
g57
NtRp3639
(dp3640
g60
(dp3641
g68
I3
ssg69
g3635
sg62
(lp3642
g3534
(S's\x05\x00\x00\x00About'
tRp3643
asbasbasbag55
(g71
g57
NtRp3644
(dp3645
g60
(dp3646
sg69
g3627
sg62
(lp3647
g55
(g76
g57
NtRp3648
(dp3649
g60
(dp3650
sg69
g3644
sg62
(lp3651
g55
(g56
g57
NtRp3652
(dp3653
g60
(dp3654
g68
I3
ssg69
g3648
sg62
(lp3655
g98
asbasbasbag55
(g71
g57
NtRp3656
(dp3657
g60
(dp3658
sg69
g3627
sg62
(lp3659
g55
(g76
g57
NtRp3660
(dp3661
g60
(dp3662
sg69
g3656
sg62
(lp3663
g55
(g56
g57
NtRp3664
(dp3665
g60
(dp3666
g68
I3
ssg69
g3660
sg62
(lp3667
S'/admin/default/about/README'
p3668
asbasbasbasbasbasbasbag55
(g71
g57
NtRp3669
(dp3670
g60
(dp3671
sg69
g3502
sg62
(lp3672
g55
(g76
g57
NtRp3673
(dp3674
g60
(dp3675
sg69
g3669
sg62
(lp3676
g55
(g56
g57
NtRp3677
(dp3678
g60
(dp3679
g68
I4
ssg69
g3673
sg62
(lp3680
g55
(g64
g57
NtRp3681
(dp3682
g60
(dp3683
g68
I3
ssg69
Nsg62
(lp3684
g55
(g71
g57
NtRp3685
(dp3686
g60
(dp3687
sg69
g3681
sg62
(lp3688
g55
(g76
g57
NtRp3689
(dp3690
g60
(dp3691
sg69
g3685
sg62
(lp3692
g55
(g56
g57
NtRp3693
(dp3694
g60
(dp3695
g68
I3
ssg69
g3689
sg62
(lp3696
g3534
(S's\x06\x00\x00\x00Errors'
tRp3697
asbasbasbag55
(g71
g57
NtRp3698
(dp3699
g60
(dp3700
sg69
g3681
sg62
(lp3701
g55
(g76
g57
NtRp3702
(dp3703
g60
(dp3704
sg69
g3698
sg62
(lp3705
g55
(g56
g57
NtRp3706
(dp3707
g60
(dp3708
g68
I3
ssg69
g3702
sg62
(lp3709
g98
asbasbasbag55
(g71
g57
NtRp3710
(dp3711
g60
(dp3712
sg69
g3681
sg62
(lp3713
g55
(g76
g57
NtRp3714
(dp3715
g60
(dp3716
sg69
g3710
sg62
(lp3717
g55
(g56
g57
NtRp3718
(dp3719
g60
(dp3720
g68
I3
ssg69
g3714
sg62
(lp3721
S'/admin/default/errors/README'
p3722
asbasbasbasbasbasbasbag55
(g71
g57
NtRp3723
(dp3724
g60
(dp3725
sg69
g3502
sg62
(lp3726
g55
(g76
g57
NtRp3727
(dp3728
g60
(dp3729
sg69
g3723
sg62
(lp3730
g55
(g56
g57
NtRp3731
(dp3732
g60
(dp3733
g68
I4
ssg69
g3727
sg62
(lp3734
g55
(g64
g57
NtRp3735
(dp3736
g60
(dp3737
g68
I3
ssg69
Nsg62
(lp3738
g55
(g71
g57
NtRp3739
(dp3740
g60
(dp3741
sg69
g3735
sg62
(lp3742
g55
(g76
g57
NtRp3743
(dp3744
g60
(dp3745
sg69
g3739
sg62
(lp3746
g55
(g56
g57
NtRp3747
(dp3748
g60
(dp3749
g68
I3
ssg69
g3743
sg62
(lp3750
g3534
(S's\n\x00\x00\x00Versioning'
tRp3751
asbasbasbag55
(g71
g57
NtRp3752
(dp3753
g60
(dp3754
sg69
g3735
sg62
(lp3755
g55
(g76
g57
NtRp3756
(dp3757
g60
(dp3758
sg69
g3752
sg62
(lp3759
g55
(g56
g57
NtRp3760
(dp3761
g60
(dp3762
g68
I3
ssg69
g3756
sg62
(lp3763
g98
asbasbasbag55
(g71
g57
NtRp3764
(dp3765
g60
(dp3766
sg69
g3735
sg62
(lp3767
g55
(g76
g57
NtRp3768
(dp3769
g60
(dp3770
sg69
g3764
sg62
(lp3771
g55
(g56
g57
NtRp3772
(dp3773
g60
(dp3774
g68
I3
ssg69
g3768
sg62
(lp3775
S'/admin/mercurial/commit/README'
p3776
asbasbasbasbasbasbasbag55
(g71
g57
NtRp3777
(dp3778
g60
(dp3779
sg69
g3502
sg62
(lp3780
g55
(g76
g57
NtRp3781
(dp3782
g60
(dp3783
sg69
g3777
sg62
(lp3784
g55
(g56
g57
NtRp3785
(dp3786
g60
(dp3787
g68
I4
ssg69
g3781
sg62
(lp3788
g55
(g64
g57
NtRp3789
(dp3790
g60
(dp3791
g68
I3
ssg69
Nsg62
(lp3792
g55
(g71
g57
NtRp3793
(dp3794
g60
(dp3795
sg69
g3789
sg62
(lp3796
g55
(g76
g57
NtRp3797
(dp3798
g60
(dp3799
sg69
g3793
sg62
(lp3800
g55
(g56
g57
NtRp3801
(dp3802
g60
(dp3803
g68
I3
ssg69
g3797
sg62
(lp3804
g3534
(S's\x06\x00\x00\x00Logout'
tRp3805
asbasbasbag55
(g71
g57
NtRp3806
(dp3807
g60
(dp3808
sg69
g3789
sg62
(lp3809
g55
(g76
g57
NtRp3810
(dp3811
g60
(dp3812
sg69
g3806
sg62
(lp3813
g55
(g56
g57
NtRp3814
(dp3815
g60
(dp3816
g68
I3
ssg69
g3810
sg62
(lp3817
g98
asbasbasbag55
(g71
g57
NtRp3818
(dp3819
g60
(dp3820
sg69
g3789
sg62
(lp3821
g55
(g76
g57
NtRp3822
(dp3823
g60
(dp3824
sg69
g3818
sg62
(lp3825
g55
(g56
g57
NtRp3826
(dp3827
g60
(dp3828
g68
I3
ssg69
g3822
sg62
(lp3829
S'/admin/default/logout'
p3830
asbasbasbasbasbasbasbag55
(g71
g57
NtRp3831
(dp3832
g60
(dp3833
sg69
g3502
sg62
(lp3834
g55
(g76
g57
NtRp3835
(dp3836
g60
(dp3837
sg69
g3831
sg62
(lp3838
g55
(g56
g57
NtRp3839
(dp3840
g60
(dp3841
g68
I4
ssg69
g3835
sg62
(lp3842
g55
(g64
g57
NtRp3843
(dp3844
g60
(dp3845
g68
I3
ssg69
Nsg62
(lp3846
g55
(g71
g57
NtRp3847
(dp3848
g60
(dp3849
sg69
g3843
sg62
(lp3850
g55
(g76
g57
NtRp3851
(dp3852
g60
(dp3853
sg69
g3847
sg62
(lp3854
g55
(g56
g57
NtRp3855
(dp3856
g60
(dp3857
g68
I3
ssg69
g3851
sg62
(lp3858
g3534
(S's\x05\x00\x00\x00Debug'
tRp3859
asbasbasbag55
(g71
g57
NtRp3860
(dp3861
g60
(dp3862
sg69
g3843
sg62
(lp3863
g55
(g76
g57
NtRp3864
(dp3865
g60
(dp3866
sg69
g3860
sg62
(lp3867
g55
(g56
g57
NtRp3868
(dp3869
g60
(dp3870
g68
I3
ssg69
g3864
sg62
(lp3871
g98
asbasbasbag55
(g71
g57
NtRp3872
(dp3873
g60
(dp3874
sg69
g3843
sg62
(lp3875
g55
(g76
g57
NtRp3876
(dp3877
g60
(dp3878
sg69
g3872
sg62
(lp3879
g55
(g56
g57
NtRp3880
(dp3881
g60
(dp3882
g68
I3
ssg69
g3876
sg62
(lp3883
S'/admin/debug/interact'
p3884
asbasbasbasbasbasbasbag55
(g71
g57
NtRp3885
(dp3886
g60
(dp3887
sg69
g3502
sg62
(lp3888
g55
(g76
g57
NtRp3889
(dp3890
g60
(dp3891
sg69
g3885
sg62
(lp3892
g55
(g56
g57
NtRp3893
(dp3894
g60
(dp3895
g68
I4
ssg69
g3889
sg62
(lp3896
g55
(g64
g57
NtRp3897
(dp3898
g60
(dp3899
g68
I3
ssg69
Nsg62
(lp3900
g55
(g71
g57
NtRp3901
(dp3902
g60
(dp3903
sg69
g3897
sg62
(lp3904
g55
(g76
g57
NtRp3905
(dp3906
g60
(dp3907
sg69
g3901
sg62
(lp3908
g55
(g56
g57
NtRp3909
(dp3910
g60
(dp3911
g68
I3
ssg69
g3905
sg62
(lp3912
g3534
(S's\x04\x00\x00\x00Help'
tRp3913
asbasbasbag55
(g71
g57
NtRp3914
(dp3915
g60
(dp3916
sg69
g3897
sg62
(lp3917
g55
(g76
g57
NtRp3918
(dp3919
g60
(dp3920
sg69
g3914
sg62
(lp3921
g55
(g56
g57
NtRp3922
(dp3923
g60
(dp3924
g68
I3
ssg69
g3918
sg62
(lp3925
g98
asbasbasbag55
(g71
g57
NtRp3926
(dp3927
g60
(dp3928
sg69
g3897
sg62
(lp3929
g55
(g76
g57
NtRp3930
(dp3931
g60
(dp3932
sg69
g3926
sg62
(lp3933
g55
(g56
g57
NtRp3934
(dp3935
g60
(dp3936
g68
I3
ssg69
g3930
sg62
(lp3937
S'http://web2py.com/examples'
p3938
asbasbasbasbasbasbasbasbasbasbasbag55
(g71
g57
NtRp3939
(dp3940
g60
(dp3941
sg69
g2958
sg62
(lp3942
g55
(g76
g57
NtRp3943
(dp3944
g60
(dp3945
g80
g81
ssg69
g3939
sg62
(lp3946
S'meta'
p3947
asbag55
(g76
g57
NtRp3948
(dp3949
g60
(dp3950
g87
g88
ssg69
g3939
sg62
(lp3951
S':'
asbag55
(g76
g57
NtRp3952
(dp3953
g60
(dp3954
sg69
g3939
sg62
(lp3955
g55
(g56
g57
NtRp3956
(dp3957
g60
(dp3958
g68
I5
ssg69
g3952
sg62
(lp3959
g55
(g64
g57
NtRp3960
(dp3961
g60
(dp3962
g68
I4
ssg69
Nsg62
(lp3963
sbasbasbasbag55
(g71
g57
NtRp3964
(dp3965
g60
(dp3966
sg69
g2958
sg62
(lp3967
g55
(g76
g57
NtRp3968
(dp3969
g60
(dp3970
g80
g81
ssg69
g3964
sg62
(lp3971
S'postprocessing'
p3972
asbag55
(g76
g57
NtRp3973
(dp3974
g60
(dp3975
g87
g88
ssg69
g3964
sg62
(lp3976
S':'
asbag55
(g76
g57
NtRp3977
(dp3978
g60
(dp3979
sg69
g3964
sg62
(lp3980
g55
(g56
g57
NtRp3981
(dp3982
g60
(dp3983
g68
I5
ssg69
g3977
sg62
(lp3984
g55
(g64
g57
NtRp3985
(dp3986
g60
(dp3987
g68
I4
ssg69
Nsg62
(lp3988
sbasbasbasbag55
(g71
g57
NtRp3989
(dp3990
g60
(dp3991
sg69
g2958
sg62
(lp3992
g55
(g76
g57
NtRp3993
(dp3994
g60
(dp3995
g80
g81
ssg69
g3989
sg62
(lp3996
S'session_file'
p3997
asbag55
(g76
g57
NtRp3998
(dp3999
g60
(dp4000
g87
g88
ssg69
g3989
sg62
(lp4001
S':'
asbag55
(g76
g57
NtRp4002
(dp4003
g60
(dp4004
sg69
g3989
sg62
(lp4005
g55
(g56
g57
NtRp4006
(dp4007
g60
(dp4008
g68
I5
ssg69
g4002
sg62
(lp4009
S"<open file 'C:\\Users\\Bussiere\\Dropbox\\Projets\\jackpoint\\web2py\\applications\\admin\\sessions\\127.0.0.1-39f0a94b-773e-4424-b240-8c1ea9c1ed01', mode 'rb+' at 0x03F6F0F8>"
p4010
asbasbasbag55
(g71
g57
NtRp4011
(dp4012
g60
(dp4013
sg69
g2958
sg62
(lp4014
g55
(g76
g57
NtRp4015
(dp4016
g60
(dp4017
g80
g81
ssg69
g4011
sg62
(lp4018
S'session_filename'
p4019
asbag55
(g76
g57
NtRp4020
(dp4021
g60
(dp4022
g87
g88
ssg69
g4011
sg62
(lp4023
S':'
asbag55
(g76
g57
NtRp4024
(dp4025
g60
(dp4026
sg69
g4011
sg62
(lp4027
g55
(g56
g57
NtRp4028
(dp4029
g60
(dp4030
g68
I5
ssg69
g4024
sg62
(lp4031
S'C:\\Users\\Bussiere\\Dropbox\\Projets\\jackpoint\\web2py\\applications\\admin\\sessions\\127.0.0.1-39f0a94b-773e-4424-b240-8c1ea9c1ed01'
p4032
asbasbasbag55
(g71
g57
NtRp4033
(dp4034
g60
(dp4035
sg69
g2958
sg62
(lp4036
g55
(g76
g57
NtRp4037
(dp4038
g60
(dp4039
g80
g81
ssg69
g4033
sg62
(lp4040
S'session_id'
p4041
asbag55
(g76
g57
NtRp4042
(dp4043
g60
(dp4044
g87
g88
ssg69
g4033
sg62
(lp4045
S':'
asbag55
(g76
g57
NtRp4046
(dp4047
g60
(dp4048
sg69
g4033
sg62
(lp4049
g55
(g56
g57
NtRp4050
(dp4051
g60
(dp4052
g68
I5
ssg69
g4046
sg62
(lp4053
S'127.0.0.1-39f0a94b-773e-4424-b240-8c1ea9c1ed01'
p4054
asbasbasbag55
(g71
g57
NtRp4055
(dp4056
g60
(dp4057
sg69
g2958
sg62
(lp4058
g55
(g76
g57
NtRp4059
(dp4060
g60
(dp4061
g80
g81
ssg69
g4055
sg62
(lp4062
S'session_id_name'
p4063
asbag55
(g76
g57
NtRp4064
(dp4065
g60
(dp4066
g87
g88
ssg69
g4055
sg62
(lp4067
S':'
asbag55
(g76
g57
NtRp4068
(dp4069
g60
(dp4070
sg69
g4055
sg62
(lp4071
g55
(g56
g57
NtRp4072
(dp4073
g60
(dp4074
g68
I5
ssg69
g4068
sg62
(lp4075
g3015
asbasbasbag55
(g71
g57
NtRp4076
(dp4077
g60
(dp4078
sg69
g2958
sg62
(lp4079
g55
(g76
g57
NtRp4080
(dp4081
g60
(dp4082
g80
g81
ssg69
g4076
sg62
(lp4083
S'session_locked'
p4084
asbag55
(g76
g57
NtRp4085
(dp4086
g60
(dp4087
g87
g88
ssg69
g4076
sg62
(lp4088
S':'
asbag55
(g76
g57
NtRp4089
(dp4090
g60
(dp4091
sg69
g4076
sg62
(lp4092
g55
(g56
g57
NtRp4093
(dp4094
g60
(dp4095
g68
I5
ssg69
g4089
sg62
(lp4096
g745
asbasbasbag55
(g71
g57
NtRp4097
(dp4098
g60
(dp4099
sg69
g2958
sg62
(lp4100
g55
(g76
g57
NtRp4101
(dp4102
g60
(dp4103
g80
g81
ssg69
g4097
sg62
(lp4104
S'session_new'
p4105
asbag55
(g76
g57
NtRp4106
(dp4107
g60
(dp4108
g87
g88
ssg69
g4097
sg62
(lp4109
S':'
asbag55
(g76
g57
NtRp4110
(dp4111
g60
(dp4112
sg69
g4097
sg62
(lp4113
g55
(g56
g57
NtRp4114
(dp4115
g60
(dp4116
g68
I5
ssg69
g4110
sg62
(lp4117
g98
asbasbasbag55
(g71
g57
NtRp4118
(dp4119
g60
(dp4120
sg69
g2958
sg62
(lp4121
g55
(g76
g57
NtRp4122
(dp4123
g60
(dp4124
g80
g81
ssg69
g4118
sg62
(lp4125
S'status'
p4126
asbag55
(g76
g57
NtRp4127
(dp4128
g60
(dp4129
g87
g88
ssg69
g4118
sg62
(lp4130
S':'
asbag55
(g76
g57
NtRp4131
(dp4132
g60
(dp4133
sg69
g4118
sg62
(lp4134
g55
(g56
g57
NtRp4135
(dp4136
g60
(dp4137
g68
I5
ssg69
g4131
sg62
(lp4138
S'200'
p4139
asbasbasbag55
(g71
g57
NtRp4140
(dp4141
g60
(dp4142
sg69
g2958
sg62
(lp4143
g55
(g76
g57
NtRp4144
(dp4145
g60
(dp4146
g80
g81
ssg69
g4140
sg62
(lp4147
S'subtitle'
p4148
asbag55
(g76
g57
NtRp4149
(dp4150
g60
(dp4151
g87
g88
ssg69
g4140
sg62
(lp4152
S':'
asbag55
(g76
g57
NtRp4153
(dp4154
g60
(dp4155
sg69
g4140
sg62
(lp4156
g55
(g56
g57
NtRp4157
(dp4158
g60
(dp4159
g68
I5
ssg69
g4153
sg62
(lp4160
S'admin'
p4161
asbasbasbag55
(g71
g57
NtRp4162
(dp4163
g60
(dp4164
sg69
g2958
sg62
(lp4165
g55
(g76
g57
NtRp4166
(dp4167
g60
(dp4168
g80
g81
ssg69
g4162
sg62
(lp4169
S'title'
p4170
asbag55
(g76
g57
NtRp4171
(dp4172
g60
(dp4173
g87
g88
ssg69
g4162
sg62
(lp4174
S':'
asbag55
(g76
g57
NtRp4175
(dp4176
g60
(dp4177
sg69
g4162
sg62
(lp4178
g55
(g56
g57
NtRp4179
(dp4180
g60
(dp4181
g68
I5
ssg69
g4175
sg62
(lp4182
S'design README'
p4183
asbasbasbag55
(g71
g57
NtRp4184
(dp4185
g60
(dp4186
sg69
g2958
sg62
(lp4187
g55
(g76
g57
NtRp4188
(dp4189
g60
(dp4190
g80
g81
ssg69
g4184
sg62
(lp4191
g2149
asbag55
(g76
g57
NtRp4192
(dp4193
g60
(dp4194
g87
g88
ssg69
g4184
sg62
(lp4195
S':'
asbag55
(g76
g57
NtRp4196
(dp4197
g60
(dp4198
sg69
g4184
sg62
(lp4199
g55
(g56
g57
NtRp4200
(dp4201
g60
(dp4202
g68
I5
ssg69
g4196
sg62
(lp4203
g2162
asbasbasbag55
(g71
g57
NtRp4204
(dp4205
g60
(dp4206
sg69
g2958
sg62
(lp4207
g55
(g76
g57
NtRp4208
(dp4209
g60
(dp4210
g80
g81
ssg69
g4204
sg62
(lp4211
S'view'
p4212
asbag55
(g76
g57
NtRp4213
(dp4214
g60
(dp4215
g87
g88
ssg69
g4204
sg62
(lp4216
S':'
asbag55
(g76
g57
NtRp4217
(dp4218
g60
(dp4219
sg69
g4204
sg62
(lp4220
g55
(g56
g57
NtRp4221
(dp4222
g60
(dp4223
g68
I5
ssg69
g4217
sg62
(lp4224
S'default/design.html'
p4225
asbasbasbasbasbsS'locals'
p4226
(dp4227
S'languages'
p4228
S'[]'
p4229
sS'cronfolder'
p4230
S"'C:/Users/Bussiere/Dropbox/Projets/jackpoint/web2py/applications/README/cron'"
p4231
sS'extend'
p4232
g45
sS'views'
p4233
S'[]'
p4234
sS'models'
p4235
S'[]'
p4236
sS'app'
p4237
S"'README'"
p4238
sS'functions'
p4239
g45
sS'modules'
p4240
S'[]'
p4241
sS'statics'
p4242
S'[]'
p4243
sS'controllers'
p4244
S'[]'
p4245
sS'include'
p4246
g45
sS'defines'
p4247
g45
sssS'traceback'
p4248
S'Traceback (most recent call last):\n  File "gluon/restricted.py", line 205, in restricted\n  File "C:\\Users\\Bussiere\\Dropbox\\Projets\\jackpoint\\web2py\\applications\\admin\\controllers/default.py", line 1352, in <module>\n  File "gluon/globals.py", line 173, in <lambda>\n  File "C:\\Users\\Bussiere\\Dropbox\\Projets\\jackpoint\\web2py\\applications\\admin\\controllers/default.py", line 760, in design\nWindowsError: [Error 3] Le chemin d\x92acc\xe8s sp\xe9cifi\xe9 est introuvable: \'C:/Users/Bussiere/Dropbox/Projets/jackpoint/web2py/applications/README/cron\'\n'
p4249
s.