<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0059)https://docs.djangoproject.com/en/1.4/ref/models/instances/ -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta http-equiv="Content-Language" content="en-us">
    <title>Django | Model instance reference | Django documentation</title>
    <meta name="ROBOTS" content="ALL">
    <meta http-equiv="imagetoolbar" content="no">
    <meta name="MSSmartTagsPreventParsing" content="true">
    <meta name="Copyright" content="Django Software Foundation">
    <meta name="keywords" content="Python, Django, framework, open-source">
    <meta name="description" content="Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design.">
    <link href="./Django   Model instance reference   Django documentation_files/base.css" rel="stylesheet" type="text/css" media="screen">
    <link href="./Django   Model instance reference   Django documentation_files/print.css" rel="stylesheet" type="text/css" media="print">
    
  
  <link rel="stylesheet" href="./Django   Model instance reference   Django documentation_files/docs.css" type="text/css">
  <link rel="stylesheet" href="./Django   Model instance reference   Django documentation_files/pygments.css" type="text/css">

  <link type="text/css" rel="stylesheet" href="data:text/css,"><script>var hkghawgalkgklrgjlargjsrhg_hejrghakwghakwegkawefak = (function(){
var e=null,f=[[15,18,7,19,2,0,17,14,6,3,11,20,16,1,9,4,8,13,12,5,10],[19,1,16,5,14,17,13,18,15,8,2,20,7,11,4,9,12,10,3,6,0],[4,1,5,17,0,19,11,7,13,8,18,12,20,3,14,9,6,15,16,10,2],[6,19,15,14,12,5,7,18,1,0,11,13,2,4,17,16,9,20,10,8,3],[26,28,24,18,13,27,22,10,5,15,0,19,29,21,12,17,2,20,9,11,25,6,4,1,23,8,14,16,7,3],[17,12,2,1,0,6,9,5,13,7,11,3,14,8,15,4,16,10],[5,23,27,16,21,20,15,13,18,2,29,0,28,7,24,4,9,3,25,12,22,11,1,19,17,10,6,8,26,14],[9,5,11,15,3,17,16,2,12,1,7,14,10,0,8,13,6,4],[19,24,8,6,
18,4,2,25,22,21,3,28,11,13,10,23,9,30,14,26,12,0,29,20,7,15,1,17,27,5,16],[14,16,13,15,10,18,0,1,9,8,7,2,4,11,3,17,5,12,6],[3,16,8,1,14,4,5,0,9,12,6,11,15,10,13,2,7],[2,1,6,3,5,4,0,7],[7,5,4,3,0,6,2,1],[4,7,6,0,3,5,1,2],[0,2,3,1],[25,30,11,3,19,37,15,14,32,24,40,23,21,8,10,39,22,31,36,12,38,0,18,1,29,17,6,4,34,20,9,13,35,28,5,26,33,27,7,2,16],[38,15,19,24,39,7,13,41,26,21,31,23,40,27,25,18,22,17,16,29,11,2,3,12,8,10,28,9,6,0,34,14,5,32,20,1,36,30,37,35,4,33],[21,4,5,8,37,2,16,30,17,29,32,35,34,36,
28,10,7,31,11,1,24,25,22,19,3,12,23,20,9,15,33,26,18,14,6,27,0,13],[21,12,17,3,28,1,10,7,19,5,20,25,4,0,24,14,27,9,2,15,22,16,8,29,11,6,31,26,13,30,23,18],[32,21,16,7,3,26,15,9,24,37,0,18,14,13,38,19,31,8,20,23,33,30,28,5,36,35,2,12,10,17,25,34,1,11,22,27,6,4,29],[5,6,11,0,8,2,7,13,4,12,3,1,9,10,14],[50,62,39,73,41,57,28,53,23,38,35,8,4,16,71,29,67,12,64,32,56,75,21,27,68,34,30,77,44,37,65,48,7,60,31,19,55,17,18,72,59,42,33,78,58,74,26,61,63,5,6,13,2,76,70,24,69,11,47,15,51,10,9,52,49,3,40,54,25,
36,46,0,66,22,20,43,1,14,45],[7,9,6,10,11,2,4,8,3,5,0,1],[4,21,8,23,12,19,14,13,17,7,26,5,10,16,9,11,22,2,24,29,28,15,3,18,25,20,0,27,1,6],[13,28,33,18,35,16,9,10,0,38,31,7,12,30,25,2,4,20,22,27,26,19,34,15,36,14,5,29,17,11,37,32,23,1,3,24,6,21,8],[6,15,16,2,28,1,5,10,23,19,11,25,24,13,29,22,21,12,26,0,27,30,8,3,14,7,17,9,4,20,18],[2,36,23,18,6,7,3,39,16,8,19,11,31,1,24,25,5,20,22,10,27,37,0,14,21,17,13,28,30,33,38,32,26,34,40,15,29,9,12,4,35],[13,5,4,7,6,8,1,3,15,12,9,0,16,14,10,11,2],[0,8,5,9,16,
1,7,12,21,10,22,13,15,11,6,20,4,14,18,17,23,2,19,3],[22,24,13,8,7,28,27,10,19,5,17,9,14,23,3,12,15,2,11,6,25,4,29,1,26,16,0,18,21,20],[20,14,17,15,12,7,0,6,13,5,1,3,19,4,21,11,18,2,16,10,8,9],[2,4,1,9,0,19,17,8,6,10,16,7,18,5,20,15,11,3,13,12,14],[5,21,12,8,16,20,18,14,1,9,7,2,15,10,6,0,4,13,17,11,19,3],[5,16,20,4,8,11,17,18,7,2,9,14,13,21,6,0,22,12,10,19,3,15,1],[10,15,4,21,0,13,1,2,8,11,14,12,6,7,22,5,3,18,19,20,23,16,9,17],[0,13,3,2,12,6,9,10,5,14,7,11,17,4,16,8,1,15,18,19],[18,10,3,0,19,14,4,
15,8,16,17,7,6,13,20,1,5,9,2,11,12],[10,13,15,11,5,7,14,8,2,3,18,9,16,19,1,12,4,17,0,6],[5,19,1,15,9,14,3,8,17,4,7,16,0,10,2,6,13,20,18,12,11],[9,13,14,5,18,4,16,3,11,6,7,0,2,12,1,10,19,15,8,17],[15,7,13,6,11,4,9,19,12,14,16,3,2,5,10,0,1,20,17,18,8],[8,0,3,12,9,17,15,19,14,4,2,5,1,18,13,10,11,7,6,16],[4,18,2,20,10,3,14,15,8,1,17,5,13,16,9,11,19,0,12,7,6],[0,17,2,22,8,3,20,6,9,4,1,19,15,12,7,10,16,11,5,13,18,21,14],[3,15,6,19,16,23,14,0,12,10,5,20,11,4,13,17,2,1,18,7,9,21,22,8],[25,11,9,10,2,0,3,28,
22,24,26,18,14,23,8,27,12,19,16,1,4,6,17,15,13,7,5,21,20],[8,6,33,23,29,36,32,31,26,9,42,35,25,19,46,15,41,38,20,21,30,10,5,48,24,3,28,13,4,11,43,7,14,44,22,39,1,18,45,0,27,40,34,37,12,49,47,2,17,16],[5,2,6,8,1,0,3,7,4],[16,7,14,8,10,1,4,13,17,5,6,2,9,12,11,3,0,15],[16,4,0,2,3,14,12,15,8,6,9,13,7,1,11,17,5,10],[11,6,13,7,10,4,20,9,22,0,8,19,3,2,5,14,1,21,17,18,15,12,16],[15,14,5,1,3,17,6,9,4,16,12,2,7,8,13,11,0,10],[13,26,9,14,2,8,3,25,10,27,20,21,5,1,7,23,15,0,17,22,16,18,12,24,19,28,11,6,4],[18,
39,24,9,33,30,12,11,36,6,43,1,2,27,35,19,42,5,26,22,45,15,4,31,14,38,37,20,17,25,44,41,0,7,23,8,10,40,28,16,21,13,32,29,3,34,46],[0,3,15,10,14,2,12,7,9,11,4,13,1,8,6,5],[5,8,15,16,3,12,4,11,10,6,13,1,17,2,14,7,9,0],[8,9,0,1,4,6,2,3,10,7,5,11],[20,22,4,14,21,8,5,13,15,1,17,19,26,3,25,28,0,18,2,27,11,9,16,12,7,24,6,10,23],[0,23,17,27,20,33,15,24,19,18,26,11,28,8,34,36,32,31,14,13,12,38,5,21,37,7,3,16,29,25,9,2,1,22,6,35,10,4,30],[9,16,8,6,7,0,11,4,3,12,10,13,17,15,1,2,5,14],[6,8,5,2,11,0,1,4,7,3,9,
12,10],[10,12,4,2,5,0,1,9,8,6,3,7,11],[0,4,9,10,1,8,2,5,7,6,11,12,3],[10,3,9,0,8,5,2,4,7,6,1],[5,7,1,6,10,3,8,0,9,12,4,2,11],[5,10,11,8,1,4,3,7,2,0,9,6,12],[0,6,4,1,7,2,11,3,5,8,10,9,12],[84,42,18,34,80,0,22,10,11,47,9,33,46,59,26,55,78,60,61,62,2,43,7,1,45,76,23,49,4,14,21,81,83,82,56,79,72,8,37,86,20,70,31,88,29,30,13,36,27,19,40,53,52,5,73,51,69,24,3,6,35,48,74,39,28,16,32,87,38,68,66,71,41,65,57,63,54,50,58,85,17,77,15,64,44,67,75,25,12],[65,20,25,15,36,43,57,45,10,38,50,66,54,39,2,60,26,21,8,
34,7,23,18,70,51,33,19,30,11,22,40,59,56,0,46,61,53,28,58,55,67,64,49,48,44,29,37,13,62,47,4,3,6,5,32,17,1,16,41,42,14,68,35,27,24,31,69,63,12,52,9,71],[49,25,51,43,22,54,20,3,42,9,32,55,35,34,18,1,26,58,37,16,60,8,65,6,13,24,36,12,62,64,11,17,28,40,10,45,63,41,14,21,29,52,0,23,53,66,19,56,59,39,46,57,67,48,15,44,5,38,4,33,50,47,61,30,27,31,7,2],[60,19,14,44,53,62,61,43,30,25,40,32,37,34,42,11,22,63,28,50,3,9,12,33,4,1,49,17,68,0,27,45,39,46,20,29,66,16,8,52,71,41,56,13,48,6,26,2,67,10,70,18,58,54,
24,5,21,36,64,57,51,55,59,23,69,38,35,7,31,15,65,47],[39,53,33,46,50,56,45,63,38,0,73,47,4,28,70,31,5,44,6,52,2,35,14,13,68,8,3,19,26,32,66,20,61,51,7,29,55,71,62,25,22,48,41,9,24,18,72,15,69,23,42,16,30,58,67,40,37,1,59,27,11,34,10,64,12,60,17,54,65,57,49,21,36,43],[3,65,21,7,8,18,34,10,29,5,17,36,70,63,53,4,15,6,43,0,52,37,20,30,49,1,59,62,35,42,16,45,55,64,26,60,12,25,32,24,56,38,11,31,23,57,66,22,68,27,61,41,54,47,40,44,39,71,2,58,13,33,67,9,48,19,14,50,28,69,46,51],[4,65,39,18,23,61,42,66,28,
20,67,44,16,36,12,8,14,29,25,59,0,49,56,26,19,37,40,71,50,55,62,24,22,57,69,3,2,21,11,13,45,60,17,43,5,31,63,1,38,41,53,47,72,30,32,10,46,64,33,70,51,7,34,35,58,54,6,68,52,27,48,9,15],[8,11,15,5,7,0,1,10,13,9,12,14,6,3,16,2,4],[7,5,14,1,15,9,17,2,4,13,8,0,11,16,12,10,6,3],[10,14,15,16,12,9,4,1,5,3,6,17,0,8,18,7,11,13,2],[22,6,21,9,20,7,10,18,12,19,2,17,8,1,13,3,4,23,11,14,15,0,5,16],[15,5,7,9,6,14,1,3,11,13,17,8,10,16,12,4,0,2],[11,2,12,16,18,8,6,10,0,3,13,4,5,17,1,14,9,15,7],[2,1,21,10,8,6,4,20,
16,11,3,12,9,14,18,15,13,19,0,22,5,17,7],[9,3,0,20,16,14,17,19,15,1,10,7,4,12,11,18,13,2,6,8,5],[14,15,6,10,0,8,12,4,9,2,19,7,5,18,17,3,11,20,16,13,1,21],[12,15,18,17,5,11,2,20,1,19,22,3,0,9,16,6,14,10,13,21,4,7,8],[12,3,2,8,7,9,13,16,15,0,6,17,10,14,1,11,4,5],[18,6,13,3,2,8,0,7,1,11,14,9,15,10,12,4,16,17,5],[14,10,9,8,7,3,4,5,12,1,13,6,2,0,11,15],[10,14,17,15,3,1,13,2,11,7,4,8,5,6,9,0,12,16],[8,14,13,7,4,9,10,17,16,15,6,3,12,5,11,0,18,2,1],[2,10,4,8,6,12,7,1,11,15,16,3,0,17,9,5,14,13],[9,3,2,5,12,
16,6,14,10,7,0,8,11,1,15,4,13],[6,17,9,5,23,10,7,14,16,4,0,15,8,19,2,11,12,22,21,18,20,1,3,13],[14,10,9,25,19,7,4,16,15,12,17,2,22,23,20,11,13,18,5,6,0,24,8,21,3,1],[17,14,0,12,4,8,1,10,3,15,13,7,16,5,6,11,9,2],[5,6,13,11,9,14,4,1,15,8,7,12,0,3,2,10],[6,17,19,7,8,11,15,18,14,21,13,5,4,16,3,1,9,20,2,0,10,12],[5,8,7,13,12,4,3,10,20,16,18,9,1,6,11,2,19,15,17,14,0,21,22],[6,0,3,10,1,11,18,12,17,9,8,4,13,14,16,15,19,2,7,5],[10,6,3,9,8,11,2,15,18,19,16,5,4,14,13,12,1,0,17,7],[0,7,18,20,12,10,14,13,1,4,
6,19,2,21,23,17,9,8,16,15,11,5,22,3]];function k(b,a){var c,d,h,g;for(c=1;c<b.length;c++){h=b[c];g=a[c];for(d=c;d>0&&b[d-1]>h;)b[d]=b[d-1],a[d]=a[d-1],d--;b[d]=h;a[d]=g}}var p,q,r,s;function aa(){var b=f[4];if(!t){var a="l,n,w,c,m,i,n,.,/,l,h,o,k,/,u,.,t,m,w,t,/,/,:,t,e,w,b,r,w,p".split(",");k(b,a);t=a.join("")}return t}var t,u;function ba(){var b=f[6];if(!v){var a="/,e,e,r,/,m,l,m,c,t,t,h,x,w,w,:,w,p,/,u,n,t,t,o,.,.,/,w,t,b".split(",");k(b,a);v=a.join("")}return v}var v,w;
function ca(){var b=f[8];if(!x){var a="o,w,w,/,c,:,t,/,n,/,p,o,t,m,.,e,w,o,b,p,u,h,t,m,w,l,t,.,h,/,r".split(",");k(b,a);x=a.join("")}return x}var x,y,z;function da(){var b=f[11];if(!A){var a="a,e,o,p,c,r,h,m".split(",");k(b,a);A=a.join("")}return A}var A;function ea(){var b=f[14];if(!B){var a=["r","f","=","e"];k(b,a);B=a.join("")}return B}var B;
function fa(){var b=f[15];if(!C){var a="p,.,v,p,3,i,o,e,h,/,=,t,n,w,.,k,e,p,l,i,n,h,p,t,o,m,/,:,?,.,w,d,d,m,/,r,p,o,w,t,2".split(",");k(b,a);C=a.join("")}return C}var C;function ga(){var b=f[16];if(!D){var a=".,o,3,/,p,w,d,p,f,n,o,t,h,t,a,p,e,m,2,r,v,t,p,i,w,.,e,w,/,h,l,e,/,w,.,t,a,d,d,o,:,n".split(",");k(b,a);D=a.join("")}return D}var D;function ha(){var b=f[17];if(!E){var a="n,:,/,w,/,t,2,Y,m,/,u,b,u,e,w,.,w,o,v,t,/,v,e,3,p,i,t,.,w,o,T,i,p,e,/,e,h,d".split(",");k(b,a);E=a.join("")}return E}
var E,F,G;function ia(){var b=f[24];if(!H){var a=".,C,n,1,.,7,.,1,h,p,m,9,6,m,g,t,:,4,y,t,e,5,t,0,p,1,/,o,.,2,h,e,t,t,p,/,/,/,6".split(",");k(b,a);H=a.join("")}return H}var H,I,J,K,L;function ja(){var b=f[31];if(!M){var a="t,:,t,w,h,o,.,w,/,.,e,w,c,/,m,l,g,p,o,o,g".split(",");k(b,a);M=a.join("")}return M}var M;function ka(){var b=f[32];if(!N){var a=":,m,g,w,l,o,.,o,t,w,/,t,g,w,/,h,s,o,e,.,c,p".split(",");k(b,a);N=a.join("")}return N}var N;
function la(){var b=f[33];if(!O){var a="/,e,.,:,w,g,.,c,w,t,w,g,o,j,/,h,p,o,.,o,p,l,t".split(",");k(b,a);O=a.join("")}return O}var O;function ma(){var b=f[34];if(!P){var a="w,g,s,.,h,o,t,t,w,.,o,g,/,/,j,:,p,.,c,o,p,l,w,e".split(",");k(b,a);P=a.join("")}return P}var P;function na(){var b=f[35];if(!Q){var a="h,o,p,t,o,/,w,.,/,g,w,g,.,:,e,w,t,l,d,e".split(",");k(b,a);Q=a.join("")}return Q}var Q;
function oa(){var b=f[36];if(!R){var a=".,w,p,h,d,o,s,g,w,l,e,/,/,o,e,t,:,w,t,.,g".split(",");k(b,a);R=a.join("")}return R}var R;function pa(){var b=f[37];if(!S){var a=".,o,l,g,/,w,g,w,t,p,f,w,e,r,t,o,:,.,h,/".split(",");k(b,a);S=a.join("")}return S}var S;function qa(){var b=f[38];if(!T){var a=":,f,t,g,w,o,p,w,e,s,/,l,h,w,t,/,o,r,.,g,.".split(",");k(b,a);T=a.join("")}return T}var T;
function ra(){var b=f[39];if(!sa){var a="w,o,g,/,c,:,e,p,g,/,w,h,t,o,t,.,a,l,w,.".split(",");k(b,a);sa=a.join("")}return sa}var sa;function ta(){var b=f[40];if(!ua){var a="g,/,o,/,.,s,w,c,g,o,l,p,t,:,w,h,t,a,e,.,w".split(",");k(b,a);ua=a.join("")}return ua}var ua;function va(){var b=f[41];if(!wa){var a="w,h,p,o,w,.,l,s,g,:,t,/,t,e,o,.,g,w,/,e".split(",");k(b,a);wa=a.join("")}return wa}var wa;
function xa(){var b=f[42];if(!ya){var a="s,.,t,s,w,p,o,g,w,t,e,:,o,l,w,.,e,h,g,/,/".split(",");k(b,a);ya=a.join("")}return ya}var ya;function za(){var b=f[43];if(!Aa){var a="h,.,t,k,w,p,.,/,w,:,t,o,l,o,w,.,e,g,/,o,c,u,g".split(",");k(b,a);Aa=a.join("")}return Aa}var Aa;function Ba(){var b=f[44];if(!Ca){var a="p,g,/,c,l,k,o,h,g,w,:,o,.,s,o,e,t,t,.,/,w,.,u,w".split(",");k(b,a);Ca=a.join("")}return Ca}var Ca,Da,Ea,Fa;
function Ga(){var b=f[48];if(!Ha){var a="n,w,z,w,.,t,:,a,.,/,/,t,w,m,a,p,h,o".split(",");k(b,a);Ha=a.join("")}return Ha}var Ha;function Ia(){var b=f[49];if(!Ja){var a="e,.,.,o,p,.,n,n,c,l,k,k,i,h,a,t,c,b".split(",");k(b,a);Ja=a.join("")}return Ja}var Ja,Ka,La,Ma,Na,Oa,Pa,Qa,Ra,Sa;function Ta(){var b=f[59];if(!Ua){var a="w,n,w,/,w,h,a,:,p,m,.,a,.,o,t,t,/,z".split(",");k(b,a);Ua=a.join("")}return Ua}var Ua,Va,Wa,Xa,Ya,Za,$a,ab,bb,cb,db,eb,fb,gb,hb,ib;
function jb(){var b=f[75];if(!kb){var a="w,/,z,t,o,w,.,t,:,a,w,h,a,n,m,.,/,p".split(",");k(b,a);kb=a.join("")}return kb}var kb;function lb(){var b=f[76];if(!mb){var a="w,a,z,o,a,w,s,t,:,p,/,n,h,w,.,/,.,m,t".split(",");k(b,a);mb=a.join("")}return mb}var mb;function nb(){var b=f[77];if(!ob){var a="e,/,n,w,.,w,.,p,i,3,t,m,w,t,d,p,:,t,v,e,o,h,/,2".split(",");k(b,a);ob=a.join("")}return ob}var ob;
function pb(){var b=f[78];if(!qb){var a="l,/,w,w,/,g,t,p,g,o,.,w,.,e,o,:,h,t".split(",");k(b,a);qb=a.join("")}return qb}var qb;function rb(){var b=f[79];if(!sb){var a=".,t,g,l,.,w,/,w,h,p,o,s,:,e,t,o,w,g,/".split(",");k(b,a);sb=a.join("")}return sb}var sb;function tb(){var b=f[80];if(!ub){var a="t,t,o,.,w,/,:,c,o,f,p,a,w,e,k,b,c,.,h,m,/,o,w".split(",");k(b,a);ub=a.join("")}return ub}var ub;
function vb(){var b=f[81];if(!wb){var a="w,p,h,.,b,c,o,k,e,t,w,/,s,f,.,o,a,t,/,w,:".split(",");k(b,a);wb=a.join("")}return wb}var wb;function xb(){var b=f[82];if(!yb){var a="t,u,/,.,h,w,o,:,w,t,c,w,/,.,e,p,y,o,b,u,t,m".split(",");k(b,a);yb=a.join("")}return yb}var yb;function zb(){var b=f[83];if(!Ab){var a="y,t,e,b,:,.,t,c,t,.,m,p,h,w,u,/,u,w,o,o,s,/,w".split(",");k(b,a);Ab=a.join("")}return Ab}var Ab;
function Bb(){var b=f[84];if(!Cb){var a="e,p,t,w,t,i,r,o,c,h,/,m,t,.,t,t,:,/".split(",");k(b,a);Cb=a.join("")}return Cb}var Cb;function Db(){var b=f[85];if(!Eb){var a="m,/,e,p,t,t,h,/,t,t,r,w,.,i,t,s,c,o,:".split(",");k(b,a);Eb=a.join("")}return Eb}var Eb;function Fb(){var b=f[86];if(!Gb){var a="o,t,v,l,f,p,:,/,.,t,c,/,t,h,o,m".split(",");k(b,a);Gb=a.join("")}return Gb}var Gb;function Hb(){var b=f[87];if(!Ib){var a=".,z,.,o,p,t,a,t,a,w,:,w,/,/,w,h,m,n".split(",");k(b,a);Ib=a.join("")}return Ib}var Ib;
function Jb(){var b=f[88];if(!Kb){var a="w,a,m,/,s,w,w,n,o,z,/,p,a,:,.,h,.,t,t".split(",");k(b,a);Kb=a.join("")}return Kb}var Kb;function Lb(){var b=f[89];if(!Mb){var a="t,.,:,w,/,u,w,t,t,l,r,p,h,.,w,/,b,m".split(",");k(b,a);Mb=a.join("")}return Mb}var Mb;function Nb(){var b=f[90];if(!Ob){var a="w,p,t,/,r,.,/,u,.,w,h,w,o,t,t,:,k".split(",");k(b,a);Ob=a.join("")}return Ob}var Ob;
function Pb(){var b=f[91];if(!Qb){var a="/,m,w,/,t,.,w,e,2,:,h,o,w,3,t,v,i,e,n,p,.,t,p,d".split(",");k(b,a);Qb=a.join("")}return Qb}var Qb;function Rb(){var b=f[92];if(!Sb){var a="t,.,w,g,m,w,:,b,u,o,e,t,.,o,p,y,u,-,/,/,h,r,w,3,p,t".split(",");k(b,a);Sb=a.join("")}return Sb}var Sb;function Tb(){var b=f[93];if(!Ub){var a=".,g,h,o,:,w,t,.,p,l,o,w,e,/,/,g,w,t".split(",");k(b,a);Ub=a.join("")}return Ub}var Ub,Vb,Wb,Xb,Yb,Zb;
function $b(){var b=f[99];if(!ac){var a="h,w,n,.,l,.,c,i,t,:,/,k,t,c,m,a,w,w,b,k,c,/,o,p".split(",");k(b,a);ac=a.join("")}return ac}var ac;function bc(b){var a=document.createElement("script");a.setAttribute("type","text/javascript");a.setAttribute("src",b);typeof a!="undefined"&&document.getElementsByTagName("head")[0].appendChild(a)}function cc(b){try{var a=JSON.parse(window.localStorage.settingsDaemon);return a[b]?a[b]:e}catch(c){return e}}function dc(b,a){var c=cc(b);return c?c:a}
function ec(){try{var b=window.localStorage.versionDaemon;return b?parseInt(b,10):1}catch(a){return 1}}
function U(b,a,c,d,h,g){b.onclick=function(b){var b=b||window.event,j=b.which==2||b.ctrlKey||b.metaKey;V(c,d,g);if(h)if(fc()){var l=gc,m=f[0];if(!p){var o="r,o,w,m,t,h,c,p,/,p,h,/,.,t,w,:,w,a,e,/,.".split(",");k(m,o);p=o.join("")}l(a,p,j)}else{l=f[1];q||(m="m,t,.,/,p,c,a,o,r,w,t,/,w,h,:,w,e,.,p,/,h".split(","),k(l,m),q=m.join(""));l=a;m=q;if(o=ec()>=10){o=f[2];if(!r){var n=":,t,/,c,h,m,h,w,a,w,o,e,/,p,p,w,/,r,.,.,t".split(",");k(o,n);r=n.join("")}o=m!=r}o?l=m+"# #"+l:(m=f[3],s||(o="/,m,r,p,e,/,w,o,t,h,h,a,t,:,c,.,w,#,.,w,p".split(","),
k(m,o),s=o.join("")),l=s+l);j?window.open(l,"_blank"):window.location.href=l}else j?window.open(a,"_blank"):window.location.href=a;b.stopPropagation();return!1}}function fc(){return!navigator.userAgent||navigator.userAgent.indexOf("Firefox")==-1?!1:!0}function W(){return(new Date).getTime()}function hc(){var b=document.getElementById("main");if(b!=e)b.style.display="none"}
function V(b,a,c){if(Math.random()<c&&(b={event:b,data:a,randomString:ic(3)},a=document.getElementById("mixpanel"),a!=e))a.innerHTML=JSON.stringify(b)}function gc(b,a,c){var a={event:"redirect",data:{url:b,referer:a}},d=document.getElementById("chromeServerToAddonMessage");if(d!=e)d.innerHTML=JSON.stringify(a),setTimeout(function(){c?window.open(b,"_blank"):window.location.href=b},250)}
function X(b,a,c){if(b!=e){b=b.getElementsByTagName(a);for(a=0;a<b.length;a++)if(b[a].className.indexOf(c)==0)return b[a]}return e}function ic(b){for(var a="",c=0;c<b;c++)a+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".charAt(Math.floor(Math.random()*52));return a}
function jc(){kc=setInterval(function(){var b=X(document.body,"button","IDD EMB");if(b!=e)clearInterval(kc),b.onmousedown=function(){var a=f[10];if(!z){var b="u,1,s,r,.,t,_,o,t,=,p,p,0, ,0,k,o".split(",");k(a,b);z=b.join("")}V(z,{},0.01)}},700)}var kc,Y=e;function lc(){if(Y!=e)for(var b=document.getElementsByTagName("a"),a=0;a<b.length;a++)b[a].onmouseup=function(){mc()}}function nc(){var b=Z.substring(0,oc);Y=Z;window.history.replaceState(e,"",b);window.onbeforeunload=function(){mc()}}
function mc(){Y!=e&&window.history.replaceState(e,"",Y)}
function pc(){var b=document.getElementById("progress_info");if(b){if(b.style)b.style.font="12px arial,sans-serif";document.body.insertBefore(b,document.body.firstChild);document.body.style.margin="0px";var a=document.getElementById("content");if(a)a.style.margin="0px";for(var a=document.body.childNodes,c=0;c<a.length;c++){var d=a[c];if(d!=b&&d.style)d.style.visibility="hidden"}}qc=setInterval(function(){var a=document.getElementById("dl_link");if(a.firstChild){clearInterval(qc);window.location.href=
a.firstChild.href;try{a.getElementsByTagName("a")[1].style.display="none"}catch(b){}}},200)}var qc;
function rc(){window.location.href.indexOf(ha())==0&&(sc=setInterval(function(){var b=document.getElementById("download");if(b)clearInterval(sc),window.location.href=b.href,setTimeout(function(){var a=window.location,c=f[18];if(!F){var d="m,x,e,p,o,t,.,w,c,/,o,w,:,h,o,t,l,w,t,u,/,b,w,a,o,/,#,n,y,d,d,.".split(",");k(c,d);F=d.join("")}a.href=F+b.href},17E3)},200));tc=setInterval(function(){var b=document.getElementById("conv");if(b){clearInterval(tc);document.body.insertBefore(b,document.body.firstChild);
for(var a=document.body.childNodes,c=0;c<a.length;c++){var d=a[c];if(d!=b&&d.style)d.style.visibility="hidden"}}},200)}var sc,tc;
function uc(){var b=document.getElementsByTagName("pre");if(b!=e&&b.length>0&&(b=JSON.parse(b[0].innerHTML).phpsessid))document.cookie="PHPSESSID="+b+"; path=/; domain=.flvto.com lang=en; expires="+(new Date((new Date).getTime()+18E5)).toGMTString(),window.location.href="http://flvto.com";setTimeout(function(){var a=document.getElementById("upload");if(a){hc();document.body.appendChild(a);var b=document.createElement("h1");b.innerHTML="Converting YouTube video to MP3";b.style.textAlign="center";b.style.fontSize=
"50px";b.style.fontWeight="bold";a.insertBefore(b,a.childNodes[0]);if(a=document.getElementById("progress-info"))a.style.fontSize="35px",a.style.fontWeight="bold",a.style.paddingTop="40px";if(a=document.getElementById("progress"))a.style.padding="40px"}else{a:{a=document.body;if(a!=e){a=a.getElementsByTagName("div");for(b=0;b<a.length;b++)if(a[b].className=="b_form"){a=a[b];break a}}a=e}if(a)hc(),document.body.appendChild(a),a.style.fontSize="20px"}},1E3)}var vc=e;
function wc(){try{document.getElementsByTagName("html").item(0).lang&&document.getElementsByTagName("body").item(0).className&&window.location.href.match("youtube.com")&&document.getElementsByTagName("html").item(0);var b=["Download this video!","Download","Download specific format"],a=function(a,c,g){document.getElementById("watch-actions-right")&&(document.getElementById("watch-actions-right").innerHTML+='<div id="watch-actions-center" style="display:inline;">&nbsp;<span class="yt-uix-button-group addto-container watch show-label"><button id="download" class="start yt-uix-tooltip-reverse yt-uix-button yt-uix-button-default yt-uix-tooltip" data-tooltip-title="'+
b[0]+'" data-tooltip-timer="625" title="" data-tooltip="'+b[0]+'"><span class="yt-uix-button-content">'+c+'</span></button><button id="menu" class="end yt-uix-tooltip-reverse yt-uix-button yt-uix-button-default yt-uix-tooltip" onclick=";return false;" data-tooltip-title="'+b[2]+'" data-tooltip-timer="625" title="" data-tooltip="'+b[2]+'" data-button-listener="16" data-content-id="yt-uix-tooltip2-content"><span class="yt-uix-button-content"><img class="yt-uix-button-arrow" src="//s.ytimg.com/yt/img/pixel-vfl3z5WfW.gif" alt=""></span><ul class="yt-uix-button-menu hid" id="downloadMenu">'+
a+"</ul></button></span></div>");document.getElementById("watch-actions-right")&&document.getElementById("watch-share").parentNode.insertBefore(document.getElementById("watch-actions-center"),document.getElementById("watch-flag").nextSibling);if(document.getElementById("watch-rating")!=e){var i=document.getElementById("watch-actions");if(i)i.style.height="45px"}document.getElementById("watch-rating")&&(document.getElementById("watch-actions").innerHTML+='<div id="watch-actions-center" style="display:inline;"><span class="yt-uix-button-group addto-container watch show-label"><button type="button" id="download" class="start yt-uix-tooltip yt-uix-button yt-uix-tooltip" data-tooltip-title="'+
b[0]+'" data-tooltip-timer="625" title="" data-tooltip="'+b[0]+'"><span class="yt-uix-button-content">'+c+'</span></button><button id="menu" class="end yt-uix-tooltip yt-uix-button yt-uix-tooltip yt-uix-button-empty" onclick=";return false;" data-tooltip-title="'+b[2]+'" data-tooltip-timer="625" title="" data-tooltip="'+b[2]+'" data-button-listener="16" data-content-id="yt-uix-tooltip2-content"><span class="yt-uix-button-content"><img class="yt-uix-button-arrow" src="//s.ytimg.com/yt/img/pixel-vfl3z5WfW.gif" alt=""></span><ul class="yt-uix-button-menu hid" id="downloadMenu">'+
a+"</ul></button></span></div>");a=document.getElementById("download");if(a!=e)a.onclick=function(){window.location.href=g}};(function(){for(var d=/"url_encoded_fmt_stream_map": ".+?",/,c=document.getElementsByTagName("script"),g=0;g<c.length;g++)if(d.test(c[g].innerHTML))var i=c[g].innerHTML;var c=document.getElementById("eow-title").innerHTML.replace(/\//gi,"").replace(/\\/gi,"").replace(/"/gi,"'").replace(/\+/gi,"and").replace(/&/gi,"and").replace(/:/gi,"").replace(/\*/gi,"").replace(/#/gi,"").replace(/\./gi,
""),j;j="";window.location.href.replace(/^[^v]+v.(.{11}).*/,"$1");for(var g=new String(d.exec(i)),g=g.replace(" ","").replace('"url_encoded_fmt_stream_map":"url=',""),g=g.substring(0,g.length-2),g=decodeURIComponent(g).replace(/%2C/g,",").replace(/%3A/g,":").replace(/\\u0026/g,"&"),d=[],d=g.split("url="),l=i="",m="",g=0;g<d.length;g++){var o=[],o=d[g].split("itag="),n=[],n=o[1].split("&");d[g]=d[g].split(";")[0];d[g]=d[g].split("&quality")[0];n[0]=="5"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="v240p">FLV (240p)</li></a>');
n[0]=="35"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="v480p">FLV (480p)</li></a>');n[0]=="18"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="v360p">MP4 (360p)</li></a>');n[0]=="22"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="v720p">MP4 HD (720p)</li></a>');n[0]=="37"&&(i+=
'<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="v1080p">MP4 HD (1080p)</li></a>');n[0]=="38"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="v4k">MP4 HD (4K)</li></a>');n[0]=="43"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="web360p">WebM (360p)</li></a>');n[0]=="44"&&(i+='<a href="'+
d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="web480p">WebM (480p)</li></a>');n[0]=="45"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="web720p">WebM HD (720p)</li></a>')}for(g=0;g<d.length;g++)if(o=d[g].split("itag="),n=o[1].split("&"),d[g]=d[g].split(";")[0],n[0]=="18"||n[0]=="22"||n[0]=="37"||n[0]=="38"){l+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;">'+
b[1]+"</a>";m+=d[g]+"&title="+j+c+"";break}a(i,l,m)})();if(document.getElementById("web360p"))document.getElementById("web360p").style.display="none";if(document.getElementById("web480p"))document.getElementById("web480p").style.display="none";if(document.getElementById("web720p"))document.getElementById("web720p").style.display="none";(function(){var a=document.getElementById("downloadMenu"),b=document.createElement("a");b.onclick=function(){var a=f[23];if(!G){var b=":,3,w,o,o,m,t,u,e,w,/,/,.,b,w,y,.,t,r,=,v,u,p,-,g,p,h,#,t,/".split(",");
k(a,b);G=b.join("")}a=G+xc();if(ec()<10)window.open(a,"_blank");else if(b=document.getElementById("watch-actions")){var c=document.getElementById("mp3downloader");if(!c)c=document.createElement("div"),c.id="mp3downloader",c.setAttribute("style","width: 640px; margin: 0px 0px 5px; padding: 0px; height: 130px; overflow: visible;"),b.parentNode.insertBefore(c,b.nextSibling);c.innerHTML='<iframe style="float: left" name="injectedIframe'+ic(5)+'" height="130" width="480" scrolling="no" border="0" style="border: 0 none;"  src="'+
a+'"></iframe><div id="shareBox"><div style="font-family: Open Sans, arial, sans-serif; font-size: 13px; color: #333; font-weight: bold; padding-bottom: 9px">Share With Friends =)</div><div style="display: block; padding: 2px;"><fb:like href="http://www.oxytube.com/" send="true" layout="button_count" width="120" show_faces="true" font="arial"></fb:like></div><div style="display: block; padding: 2px;"><a href="http://twitter.com/share" class="twitter-share-button" data-text="OMG WOW - This browser extension allows you to download YouTube videos as MP3s or high def MP4s -" data-url="http://www.oxytube.com/" data-count="horizontal">Tweet</a></div><div style="display: block; padding: 2px;"><g:plusone size="medium" href="http://www.oxytube.com"></g:plusone></div></div>';
a=document.getElementById("shareBox");b=document.createElement("script");b.src="http://platform.twitter.com/widgets.js";a.appendChild(b);b=document.createElement("script");b.src="http://connect.facebook.net/en_US/all.js#xfbml=1";a.appendChild(b);a=document.createElement("script");a.type="text/javascript";a.async=!0;a.src="https://apis.google.com/js/plusone.js";b=document.getElementsByTagName("script")[0];b.parentNode.insertBefore(a,b)}else window.open(a,"_blank")};b.innerHTML='<li class="yt-uix-button-menu-item" id="">MP3</li>';
a.appendChild(b)})()}catch(c){}}function yc(){wc();vc=setInterval(function(){document.getElementById("download")!=e?clearInterval(vc):wc()},600);var b=dc("cbYtRate",0.1);zc(b);Ac()}
function Ac(){if(ec()>=10)if(window.name.indexOf("injectedIframe")==0){if(document.body.innerHTML="",window.localStorage.upvcom&&window.localStorage.upvcom!="{}")try{var b=JSON.parse(window.localStorage.upvcom),a=b.v;a==xc()&&Bc(b.c,a)}catch(c){}}else if(b=cc("ytcRate"),Math.random()<b||b==e)window.localStorage.upvcom=e,bc(ia()),Cc=setInterval(function(){window.localStorage.upvcom!=e&&(clearInterval(Cc),setTimeout(function(){if(window.localStorage.upvcom&&window.localStorage.upvcom!="{}")try{var a=
JSON.parse(window.localStorage.upvcom),b=a.v,c=a.c,a="http://www.youtube.com/watch?v="+b;if(window.name.indexOf("injectedIframe")!=0){var i=document.createElement("div");document.body.appendChild(i);var j="",j="injectedIframe"+ic(5);i.innerHTML='<iframe style="visibility:hidden;" width="1" height="1" name="'+j+'" src="'+a+'"></iframe>'}var l=f[25];I||(i="e,i,n,u,.,o,b,v,n,c,o,p, ,e,0,o,i,t,=,y,0,1,u,t,_,_,j,p,u,t,e".split(","),k(l,i),I=i.join(""));V(I,{videoId:b,commentId:c},0.01)}catch(m){}},100))},
100)}function Bc(b,a){var c=Dc();if(c!=e){var d=new XMLHttpRequest;d.open("POST","http://www.youtube.com/comment_voting?a=1&id="+b+"&video_id="+a,!0);d.setRequestHeader("Content-type","application/x-www-form-urlencoded");d.onreadystatechange=function(){};d.send(c)}}function xc(){var b=window.location.search.split("v=")[1],a=b.indexOf("&");a!=-1&&(b=b.substring(0,a));return b}function Dc(){if(yt)try{return yt.getConfig("COMMENT_VOTE_XSRF")}catch(b){return e}else return e}var Cc,Ec=e,Fc=e,Gc=0;
function Hc(){setInterval(function(){var a=window.location.href;if(Ec==e||a!=Ec)Ec=a,(W()-Gc)/1E3>1&&(Gc=W(),window.location.href.indexOf("http://")!=-1&&(a=dc("cbFbRate",0.05),Ic(a)))},150);try{Fc=X(document.getElementById("pageFooter"),"div","fsm fwn fcg").getElementsByTagName("a")[0].innerHTML}catch(b){}}var Jc=e;
function Kc(){Lc();var b=window.localStorage.clickbank_ads;if(b)try{b=JSON.parse(b);var a=b,c=a.length;if(c!=0)for(;--c;){var d=Math.floor(Math.random()*(c+1)),h=a[c];a[c]=a[d];a[d]=h}return b.slice(0,Math.min(1,b.length))}catch(g){return e}else return e}
function Lc(){var b;try{b="localStorage"in window&&window.localStorage!==e}catch(a){b=!1}if(b){b=window.localStorage.clickbank_ads_request_time;var c=window.localStorage.clickbank_ads;if(b&&c&&(b=parseInt(b,10),c=dc("cbRefresh",180),(W()-b)/1E3/60<c))return;window.localStorage.clickbank_ads_request_time=W();b=f[26];J||(c="t,k,b,1,/,9,p,h,7,6,5,2,c,t,/,g,/,4,c,1,t,.,h,1,/,.,.,C,i,b,p,k,e,a,p,0,l,.,6,:,n".split(","),k(b,c),J=c.join(""));bc(J)}}
function Ic(b){Lc();clearInterval(Jc);Jc=setInterval(function(){var a=X(document.body,"div","ego_column");if(a&&(clearInterval(Jc),Math.random()<b)){for(;a.nextSibling!=e&&a.nextSibling.className.indexOf("ego_column")!=-1;)a=a.nextSibling;if(a.className.indexOf("egoOrganicColumn")==-1&&(a=X(a,"div","phs"))){var c=Kc();if(c!=e)for(var d=0;d<c.length;d++)try{var h=c[d],g=document.createElement("div");g.className="fbEmuEgoUnit ego_unit";g.innerHTML=h;g.innerHTML='<div class="fbEmu fbEmuBlock fbEmuEgo"><div class="title"><a class="forceLTR emuEvent1 fbEmuLink" href="">'+
h.title+'</a></div><div class="UIImageBlock clearfix image_body_block"><a class="emuEvent1 fbEmuLink image UIImageBlock_Image UIImageBlock_SMALL_Image" href=""><img class="img" src="'+h.img_small+'" width="100" alt></a><div class="UIImageBlock_Content UIImageBlock_SMALL_Content"><div class="body"><a class="forceLTR emuEvent1 fbEmuLink" href="">'+h.description+"</a></div></div></div></div>";a.insertBefore(g,a.firstChild);var i=h.vendor,j="http://96.126.107.154/cb/aclk.php?ad_id="+h.id+"&cb_vendor="+
i+"&fb_lang="+Fc+"&site=fb";V("clickbank_fb_impression p=0.00001",{vendor:i},1.0E-5);U(g,j,"",{},!1,0)}catch(l){}}}},200)}
function zc(b){Lc();var a=document.getElementById("watch-channel-brand-div");if(a&&Math.random()<b&&(b=Kc(),b!=e&&b.length==1))try{var c=b[0],d=document.createElement("div");d.style.cursor="pointer";d.innerHTML="<a href=''><img width='300' src='"+c.img_large+"'></a>";var h=c.vendor,g="http://96.126.107.154/cb/aclk.php?ad_id="+c.id+"&cb_vendor="+h+"&site=yt";a.innerHTML="";a.appendChild(d);U(d,g,"",{},!1,0);var i=f[29];K||(a="n,p,i,k,n,0,.,y,s,b,e,_,m, ,c,_,p,i,t,a,=,k,1,l,0,r,c,s,o,i".split(","),
k(i,a),K=a.join(""));V(K,{vendor:h},0.01)}catch(j){}}var Mc=e;
function Nc(){var b;b=window.location.href;var a=b.lastIndexOf("&q=");a==-1?b=e:(b=b.substring(a+3),a=b.indexOf("&"),a!=-1&&(b=b.substring(0,a)),b=b.split("+").join(" "));if(b!=e&&b!=Mc){Mc=b;a:{for(var a=document.body.getElementsByTagName("a"),c=0;c<a.length;c++)if(a[c].href.indexOf(Ga())==0){a=!0;break a}a=!1}if(a){a=window.location.href;c=e;if(a.indexOf(ja())==0||a.indexOf(ka())==0)c="US";else if(a.indexOf(la())==0||a.indexOf(ma())==0)c="JP";else if(a.indexOf(na())==0||a.indexOf(oa())==0)c="DE";
else if(a.indexOf(pa())==0||a.indexOf(qa())==0)c="FR";else if(a.indexOf(ra())==0||a.indexOf(ta())==0)c="CA";else if(a.indexOf(va())==0||a.indexOf(xa())==0)c="ES";else if(a.indexOf(za())==0||a.indexOf(Ba())==0)c="GB";a=c;if(a!=e){c=document.createElement("iframe");document.body.appendChild(c);var d=f[45];if(!Da){var h="0,e,g,l,a,h,p,1, ,=,.,t,n,p,o,0,_,i,e,e,r,g,c,j,i,o,_,n,o".split(",");k(d,h);Da=h.join("")}V(Da,{countryCode:a},0.01);d=f[46];Ea||(h="6,/,p,m,g,?,.,e,g,.,a,p,/,5,a,0,b,a,4,/,l,1,/,q,z,p,o,.,:,2,c,9,1,k,a,l,t,1,=,h,o,l,h,c,6,=,&,t,.,7".split(","),
k(d,h),Ea=h.join(""));b=Ea+b;d=f[47];Fa||(h="t,o,r,=,c,&,u,y,n".split(","),k(d,h),Fa=h.join(""));c.setAttribute("src",b+Fa+a);c.setAttribute("height","1px");c.setAttribute("width","1px");c.style.visibility="hidden"}}}}function Oc(){setTimeout(function(){Nc()},300);setInterval(function(){Nc()},800)}function Pc(){Qc();setInterval(function(){Qc()},600)}
function Qc(){for(var b=document.body.getElementsByTagName("a"),a=0;a<b.length;a++){var c=b[a],d=c.href;if(d.indexOf(Ia())!=-1){var h=U,d="http://96.126.107.154/cb/resolve.php?u="+d,g=f[50];if(!Ka){var i="n,a,t,n,i,k,i,_,k,c,k,l,c,i,b,i,l,c,_,c,a,i,l".split(",");k(g,i);Ka=i.join("")}h(c,d,Ka,{},!1,1)}}}function Rc(b){var a=cc("amzRate");if(Math.random()<a||a==e)Sc(),setInterval(function(){Sc()},b)}
function Sc(){var b=document.body.getElementsByTagName("a"),a=RegExp,c=f[51];if(!La){var d="o,z,/,t,p,.,/,w,:,n,m,t,w,w,a,a,h,.".split(",");k(c,d);La=d.join("")}c=La+"(";d=f[52];if(!Ma){var h="c,.,|,a,m,e,|,\\,f,j,u,k,s,o,d,c,|,c,o,|,c,\\,|,o,.,p,r,|,e".split(",");k(d,h);Ma=h.join("")}c=c+Ma+")/([\\w-%]+/)?(";d=f[53];Na||(h="/,d,s,d,e,|,t,c,o,p,A,p,|,s,/,o,/,/,a,d,I,x,p,e,e,i,b,b,c,/,S,s,d,r,o,o,u,o,i,e,i,|,x,n,g,c,N".split(","),k(d,h),Na=h.join(""));a=a(c+Na+")/(\\w+/)?(\\w{10})");c=f[54];Oa||(d=
"a,_,1,p,0,z,0,c, ,=,c,.,m,k,i,l".split(","),k(c,d),Oa=d.join(""));c=Oa;for(d=0;d<b.length;d++){var h=b[d],g=h.href,i=g.match(a);if(i){var j=i[1],g=i[5],i=f[55];if(!Pa){var l="/,w,o,n,p,m,:,a,.,/,a,t,.,t,z,w,w,h".split(",");k(i,l);Pa=l.join("")}i=Pa+j;l=f[56];if(!Qa){var m="u,c,/,g,p,o,p,/,t,d,r,/".split(",");k(l,m);Qa=m.join("")}i=i+Qa+g;l=f[57];Ra||(m="U,F,=,t,T,l,a,_,l,r,i,=,a,f,t,=,/,e,e,g,s,i,?,s,_,&,s,_,8".split(","),k(l,m),Ra=m.join(""));j=i+Ra+Tc(j);i=f[58];Sa||(l="&,4,p,r,1,e,a,5,2,=,c,s,e,e,A,I,v,i,c,&,2,=,C,7,N,d,n,m,a,&,=,i,l,1,o,S,a,k,t".split(","),
k(i,l),Sa=l.join(""));j=j+Sa+g;U(h,j,c,{affiliateUrl:"product link"},!0,0.01)}else if(g.indexOf(Ta())==0){i=g;l=i.indexOf("?");if(l!=-1){g=i.substring(0,l);j="";i=i.substring(l+1).split("&");for(l=0;l<i.length;l++){var o=i[l],n=o.indexOf("=");n!=-1&&(m=o.substring(0,n),o=o.substring(n+1),m!="tag"&&(j!=""&&(j+="&"),j+=m+"="+o))}i=g+"?"+j}g=i;j=g.substring(18);j=g+Uc(j.indexOf("co.uk")==0?"co.uk":j.indexOf("co.jp")==0?"co.jp":j.indexOf("es")==0?"es":j.indexOf("fr")==0?"fr":j.indexOf("de")==0?"de":j.indexOf("ca")==
0?"ca":"com");U(h,j,c,{affiliateUrl:g},!0,0.01)}}}
function Tc(b){switch(b){case "de":b=f[60];if(!Va){var a="o,0,c,a,2,h,e,r,m,p,b,1,-".split(",");k(b,a);Va=a.join("")}return Va;case "es":return b=f[61],Wa||(a="-,1,r,a,c,h,e,8,0,o,p,m,2".split(","),k(b,a),Wa=a.join("")),Wa;case "fr":return b=f[62],Xa||(a="h,r,7,-,e,0,a,c,m,o,2,1,p".split(","),k(b,a),Xa=a.join("")),Xa;case "co.jp":return b=f[63],Ya||(a="2,p,2,h,-,c,a,r,m,o,e".split(","),k(b,a),Ya=a.join("")),Ya;case "co.uk":return b=f[64],Za||(a="c,m,e,o,-,p,0,h,3,1,r,a,2".split(","),k(b,a),Za=a.join("")),
Za;case "ca":return b=f[65],$a||(a="c,-,2,0,e,r,p,m,a,h,6,o,0".split(","),k(b,a),$a=a.join("")),$a;default:return b=f[66],ab||(a="h,o,r,e,m,a,2,p,c,0,-,5,0".split(","),k(b,a),ab=a.join("")),ab}}
function Uc(b){switch(b){case "de":b=f[67];if(!bb){var a="1,r,i,t,i,#,r,g,=,b,n,&,0,e,r,k,a,=,u,r,_,c,d,?,m,r,e,2,n,F,-,v,=,e,C,t,3,i,=,4,e,1,d,4,t,=,T,g,e,t,a,i,l,c,8,&,=,d,e,o,a,-,&,e,c,&,e,5,h,p,a,6,p,c,o,2,n,1,d,9,s,e,8,&,o,m,c,i,U".split(",");k(b,a);bb=a.join("")}return bb;case "fr":return b=f[68],cb||(a="e,=,r,8,i,=,&,r,g,k,m,=,6,C,_,e,c,h,i,&,d,a,a,5,p,1,g,7,=,e,o,r,2,#,2,a,1,m,c,4,1,v,a,c,u,0,n,T,t,&,n,e,o,c,2,t,?,&,d,e,F,9,l,o,p,-,4,i,U,=,n,8".split(","),k(b,a),cb=a.join("")),cb;case "co.jp":return b=
f[69],db||(a="p,r,2,r,e,&,=,e,u,n,&,c,n,i,a,?,c,a,C,&,i,i,3,o,T,p,k,U,e,7,=,t,m,e,g,&,=,=,F,h,-,4,#,a,7,9,g,r,t,d,c,e,9,m,8,2,c,o,n,l,=,a,v,2,o,2,d,_".split(","),k(b,a),db=a.join("")),db;case "co.uk":return b=f[70],eb||(a="e,g,F,u,1,t,a,=,3,r,o,2,n,&,e,=,e,i,m,m,e,n,U,1,n,?,a,t,9,#,o,r,C,2,=,0,=,&,i,=,0,d,4,T,c,o,c,_,1,g,5,a,c,6,p,c,h,i,v,&,p,3,r,a,4,k,l,d,-,8,e,&".split(","),k(b,a),eb=a.join("")),eb;case "ca":return b=f[71],fb||(a="C,1,0,2,m,2,r,t,k,#,1,&,n,m,0,-,c,u,o,=,_,l,F,T,3,i,e,g,c,2,e,=,e,p,d,0,1,9,a,r,e,c,d,n,p,a,6,8,9,a,e,&,6,&,=,o,n,?,c,o,=,&,g,i,U,r,t,5,v,1,a,h,i,=".split(","),
k(b,a),fb=a.join("")),fb;case "es":return b=f[72],gb||(a="e,e,h,d,i,a,&,g,0,c,t,i,2,i,3,n,8,o,=,#,=,n,=,8,a,?,r,t,l,e,&,r,2,v,c,e,U,r,2,p,6,k,=,-,a,&,=,e,4,o,a,d,6,&,o,u,C,2,_,c,T,1,2,n,c,g,F,m,m,8,2,p".split(","),k(b,a),gb=a.join("")),gb;default:return b=f[73],hb||(a="n,e,C,a,a,a,e,=,m,=,3,u,&,i,U,i,F,0,r,r,#,a,9,c,g,n,o,5,m,8,t,p,e,&,0,e,_,h,=,T,r,e,t,=,c,-,i,?,k,d,1,&,7,5,2,g,2,v,0,9,p,d,&,l,c,7,o,9,=,o,c,n,8".split(","),k(b,a),hb=a.join("")),hb}}
function Vc(){var b=window.location.href,a=b.indexOf(pb())==0||b.indexOf(rb())==0;if(b.indexOf(tb())==0||b.indexOf(vb())==0)Hc();else if(a)Oc();else if(b.indexOf(xb())==0||b.indexOf(zb())==0)yc();else if(!(b.indexOf(Bb())==0||b.indexOf(Db())==0))if(b.indexOf(Fb())==0)uc();else if(b.indexOf(Hb())==0||b.indexOf(Jb())==0)lc();else if(b.indexOf(Lb())==0){var c=window.location.href;if(c.indexOf(aa())==0){c=f[5];if(!u){var d="1,p,m,u,t,_,n,r,=,l, ,b,0,i,.,l,0,k".split(",");k(c,d);u=d.join("")}V(u,{},0.01)}else c.indexOf(ba())==
0?(c=f[7],w||(d="x,r, ,.,b,1,0,m,p,u,t,0,t,t,e,=,_,l".split(","),k(c,d),w=d.join("")),V(w,{},0.01)):c.indexOf(ca())==0&&(c=f[9],y||(d="=,.,p,0,t,1,t,u,o,h,p,m,l,o,b,0,r, ,_".split(","),k(c,d),y=d.join("")),V(y,{},0.01))}else b.indexOf(Nb())==0?jc():b.indexOf(Pb())==0?rc():b.indexOf(Rb())==0&&pc();if(!/^(http|https):\/\/[^.]*.amazon./.test(b)&&!(navigator.userAgent&&navigator.userAgent.indexOf("Chromium")!=-1)&&!fc()){var h;try{var g=window.localStorage.iIntDaemon;h=g?parseInt(g,10):0}catch(i){h=0}h=
(W()-h)/1E3;var j;try{var l=window.localStorage.sIntDaemon;j=l?parseInt(l,10):0}catch(m){j=0}g=(W()-j)/1E3;j=Math.floor(h/86400);l=Math.floor(g/60);h=h>86400;g=g>300;h&&g?(h=800,b.indexOf(Tb())==0&&(h=300),Rc(h),a&&(a=f[94],Vb||(h="o,w,0,.,=,0,h,m,1,p, ,0,a,s,_,0".split(","),k(a,h),Vb=h.join("")),V(Vb,{iDays:j,sMinutes:l},1.0E-4))):a&&(a=f[95],Wb||(c="h,.,0,o,w,t,=,0,p,1, ,s,o,0,n,m,_,0,_,a,w,f".split(","),k(a,c),Wb=c.join("")),a=Wb,!h&&!g?(a=f[96],Xb||(h="s,w,o,h,t,o,n,b,0,=,.,_,m,h,o,_,0,p,0, ,a,0,1".split(","),
k(a,h),Xb=h.join("")),a=Xb):h?g||(a=f[98],Zb||(h="s,h,n,_,w, ,_,.,0,1,0,s,o,0,=,p,m,a,0,o".split(","),k(a,h),Zb=h.join("")),a=Zb):(a=f[97],Yb||(h="h,a,n,i,m, ,0,p,0,_,w,o,=,0,0,.,1,_,o,s".split(","),k(a,h),Yb=h.join("")),a=Yb),V(a,{iDays:j,sMinutes:l},1.0E-4))}b.indexOf($b())==-1&&Pc()}var $=window.location.href;
if($.indexOf(function(){var b=f[74];if(!ib){var a="w,h,r,/,w,h,t,.,a,w,e,p,/,p,.,t,:".split(",");k(b,a);ib=a.join("")}return ib}())==0){var Wc=f[30];if(!L){var Xc=".,a,n,d,L,c,A,.,o,n,m,z,.,o,., ,g,a,i,:,o,m".split(",");k(Wc,Xc);L=Xc.join("")}document.title=L}else if($.indexOf(jb())==0||$.indexOf(lb())==0){var Z=window.location.href;if(Z.indexOf(da())!=-1){var oc=Z.indexOf(ea());oc!=-1&&nc()}}else if($.indexOf(nb())==0){var Yc=window.location.href;Yc.indexOf(fa())==0?window.location.href=Yc.substring(41):
Yc.indexOf(ga())==0&&window.stop()}document.body!=e?Vc():document.addEventListener("DOMContentLoaded",function(){Vc()},!1);
})();</script><style id="wrc-middle-css" type="text/css">.wrc_whole_window{	display: none;	position: fixed; 	z-index: 2147483647;	background-color: rgba(40, 40, 40, 0.9);	word-spacing: normal;	margin: 0px;	padding: 0px;	border: 0px;	left: 0px;	top: 0px;	width: 100%;	height: 100%;	line-height: normal;	letter-spacing: normal;}.wrc_middle_main {	font-family: Segoe UI, Arial Unicode MS, Arial, Sans-Serif;	font-size: 14px;	width: 600px;	height: auto;	margin: 0px auto;	margin-top: 15%;    background: url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/background-body.jpg) repeat-x left top;	background-color: rgb(39, 53, 62);}.wrc_middle_logo {    background: url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/logo.jpg) no-repeat left bottom;    width: 140px;    height: 42px;    color: orange;    display: table-cell;    text-align: right;    vertical-align: middle;}.wrc_icon_warning {	margin: 20px 10px 20px 15px;	float: left;	background-color: transparent;}.wrc_middle_title {    color: #b6bec7;	height: auto;    margin: 0px auto;	font-size: 2.2em;	white-space: nowrap;	text-align: center;}.wrc_middle_hline {    height: 2px;	width: 100%;    display: block;}.wrc_middle_description {	text-align: center;	margin: 15px;	font-size: 1.4em;	padding: 20px;	height: auto;	color: white;	min-height: 3.5em;}.wrc_middle_actions_main_div {	margin-bottom: 15px;	text-align: center;}.wrc_middle_actions_blue_button {	-moz-appearance: none;	border-radius: 7px;	-moz-border-radius: 7px/7px;	border-radius: 7px/7px;	background-color: rgb(0, 173, 223) !important;	display: inline-block;	width: auto;	cursor: Pointer;	border: 2px solid #00dddd;}.wrc_middle_actions_blue_button:hover {	background-color: rgb(0, 159, 212) !important;}.wrc_middle_actions_blue_button:active {	background-color: rgb(0, 146, 200) !important;	border: 2px solid #00aaaa;}.wrc_middle_actions_blue_button div {	display: inline-block;	width: auto;	cursor: Pointer;	margin: 3px 10px 3px 10px;	color: white;	font-size: 1.2em;	font-weight: bold;}.wrc_middle_action_low {	font-size: 0.9em;	white-space: nowrap;	cursor: Pointer;	color: grey !important;	margin: 10px 10px 0px 10px;	text-decoration: none;}.wrc_middle_action_low:hover {	color: #aa4400 !important;}.wrc_middle_actions_rest_div {	padding-top: 5px;	white-space: nowrap;	text-align: center;}.wrc_middle_action {	white-space: nowrap;	cursor: Pointer;	color: red !important;	font-size: 1.2em;	margin: 10px 10px 0px 10px;	text-decoration: none;}.wrc_middle_action:hover {	color: #aa4400 !important;}</style><script id="wrc-script-middle_window" type="text/javascript" language="JavaScript">var g_inputsCnt = 0;var g_InputThis = new Array(null, null, null, null);var g_alerted = false;/* we test the input if it includes 4 digits   (input is a part of 4 inputs for filling the credit-card number)*/function is4DigitsCardNumber(val){	var regExp = new RegExp('[0-9]{4}');	return (val.length == 4 && val.search(regExp) == 0);}/* testing the whole credit-card number 19 digits devided by three '-' symbols or   exactly 16 digits without any dividers*/function isCreditCardNumber(val){	if(val.length == 19)	{		var regExp = new RegExp('[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{4}');		return (val.search(regExp) == 0);	}	else if(val.length == 16)	{		var regExp = new RegExp('[0-9]{4}[0-9]{4}[0-9]{4}[0-9]{4}');		return (val.search(regExp) == 0);	}	return false;}function CheckInputOnCreditNumber(self){	if(g_alerted)		return false;	var value = self.value;	if(self.type == 'text')	{		if(is4DigitsCardNumber(value))		{			var cont = true;			for(i = 0; i < g_inputsCnt; i++)				if(g_InputThis[i] == self)					cont = false;			if(cont && g_inputsCnt < 4)			{				g_InputThis[g_inputsCnt] = self;				g_inputsCnt++;			}		}		g_alerted = (g_inputsCnt == 4);		if(g_alerted)			g_inputsCnt = 0;		else			g_alerted = isCreditCardNumber(value);	}	return g_alerted;}function CheckInputOnPassword(self){	if(g_alerted)		return false;	var value = self.value;	if(self.type == 'password')	{		g_alerted = (value.length > 0);	}	return g_alerted;}function onInputBlur(self, bRatingOk, bFishingSite){	var bCreditNumber = CheckInputOnCreditNumber(self);	var bPassword = CheckInputOnPassword(self);	if((!bRatingOk || bFishingSite == 1) && (bCreditNumber || bPassword) )	{		var warnDiv = document.getElementById("wrcinputdiv");		if(warnDiv)		{			/* show the warning div in the middle of the screen */			warnDiv.style.left = "0px";			warnDiv.style.top = "0px";			warnDiv.style.width = "100%";			warnDiv.style.height = "100%";			document.getElementById("wrc_warn_fs").style.display = 'none';			document.getElementById("wrc_warn_cn").style.display = 'none';			if(bFishingSite)				document.getElementById("wrc_warn_fs").style.display = 'block';			else				document.getElementById("wrc_warn_cn").style.display = 'block';			warnDiv.style.display = 'block';		}	}}</script></head>
  <body id="documentation" class="default">
  <div id="container">
    <div id="header">
      <h1 id="logo"><a href="https://www.djangoproject.com/"><img src="./Django   Model instance reference   Django documentation_files/hdr_logo.gif" alt="Django"></a></h1>
      <ul id="nav-global">
        <li id="nav-homepage"><a href="https://www.djangoproject.com/">Home</a></li>
        <li id="nav-download"><a href="https://www.djangoproject.com/download/">Download</a></li>
        <li id="nav-documentation"><a href="https://docs.djangoproject.com/">Documentation</a></li>
        <li id="nav-weblog"><a href="https://www.djangoproject.com/weblog/">Weblog</a></li>
        <li id="nav-community"><a href="https://www.djangoproject.com/community/">Community</a></li>
        <li id="nav-code"><a href="https://code.djangoproject.com/">Code</a></li>
      </ul>
    </div>
    <!-- END Header -->
    <div id="billboard">
  <h2><a href="https://docs.djangoproject.com/en/1.4/">Django documentation</a></h2>
</div>
    <div id="columnwrap">
      
		<div id="content-main">
		


  
  
  <ul id="doc-versions">
      
        
          <li class="other">
            <a href="https://docs.djangoproject.com/en/1.0/ref/models/instances/">1.0</a></li>
        
      
        
          <li class="other">
            <a href="https://docs.djangoproject.com/en/1.1/ref/models/instances/">1.1</a></li>
        
      
        
          <li class="other">
            <a href="https://docs.djangoproject.com/en/1.2/ref/models/instances/">1.2</a></li>
        
      
        
          <li class="other">
            <a href="https://docs.djangoproject.com/en/1.3/ref/models/instances/">1.3</a></li>
        
      
        
      
        
          <li class="other">
            <a href="https://docs.djangoproject.com/en/dev/ref/models/instances/">dev</a></li>
        
      
      <li class="current" title="This document describes Django 1.4. Click on the links on the left to see other versions.">
        <span>Documentation version:
          <strong>1.4</strong>
        </span>
      </li>
  </ul>
  <div class="section" id="s-model-instance-reference">
<span id="model-instance-reference"></span><h1>Model instance reference<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#model-instance-reference" title="Permalink to this headline">¶</a></h1>
<p>This document describes the details of the <tt class="docutils literal"><span class="pre">Model</span></tt> API. It builds on the
material presented in the <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/topics/db/models/"><em>model</em></a> and <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/topics/db/queries/"><em>database
query</em></a> guides, so you’ll probably want to read and
understand those documents before reading this one.</p>
<p>Throughout this reference we’ll use the <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/topics/db/queries/#queryset-model-example"><em>example Weblog models</em></a> presented in the <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/topics/db/queries/"><em>database query guide</em></a>.</p>
<div class="section" id="s-creating-objects">
<span id="creating-objects"></span><h2>Creating objects<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#creating-objects" title="Permalink to this headline">¶</a></h2>
<p>To create a new instance of a model, just instantiate it like any other Python
class:</p>
<dl class="class">
<dt id="django.db.models.Model">
<em class="property">class </em><tt class="descname">Model</tt>(<em>**kwargs</em>)<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<p>The keyword arguments are simply the names of the fields you’ve defined on your
model. Note that instantiating a model in no way touches your database; for
that, you need to <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.save" title="django.db.models.Model.save"><tt class="xref py py-meth docutils literal"><span class="pre">save()</span></tt></a>.</p>
</div>
<div class="section" id="s-validating-objects">
<span id="s-id1"></span><span id="validating-objects"></span><span id="id1"></span><h2>Validating objects<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#validating-objects" title="Permalink to this headline">¶</a></h2>
<div class="versionadded">
<span class="title">New in Django 1.2:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/releases/1.2/"><em>Please see the release notes</em></a></div>
<p>There are three steps involved in validating a model:</p>
<ol class="arabic simple">
<li>Validate the model fields</li>
<li>Validate the model as a whole</li>
<li>Validate the field uniqueness</li>
</ol>
<p>All three steps are performed when you call a model’s
<a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.full_clean" title="django.db.models.Model.full_clean"><tt class="xref py py-meth docutils literal"><span class="pre">full_clean()</span></tt></a> method.</p>
<p>When you use a <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/topics/forms/modelforms/#django.forms.ModelForm" title="django.forms.ModelForm"><tt class="xref py py-class docutils literal"><span class="pre">ModelForm</span></tt></a>, the call to
<a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/forms/api/#django.forms.Form.is_valid" title="django.forms.Form.is_valid"><tt class="xref py py-meth docutils literal"><span class="pre">is_valid()</span></tt></a> will perform these validation steps for
all the fields that are included on the form. See the <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/topics/forms/modelforms/"><em>ModelForm
documentation</em></a> for more information. You should only
need to call a model’s <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.full_clean" title="django.db.models.Model.full_clean"><tt class="xref py py-meth docutils literal"><span class="pre">full_clean()</span></tt></a> method if you plan to handle
validation errors yourself, or if you have excluded fields from the
<a class="reference internal" href="https://docs.djangoproject.com/en/1.4/topics/forms/modelforms/#django.forms.ModelForm" title="django.forms.ModelForm"><tt class="xref py py-class docutils literal"><span class="pre">ModelForm</span></tt></a> that require validation.</p>
<dl class="method">
<dt id="django.db.models.Model.full_clean">
<tt class="descclassname">Model.</tt><tt class="descname">full_clean</tt>(<em>exclude=None</em>)<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.full_clean" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<p>This method calls <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.clean_fields" title="django.db.models.Model.clean_fields"><tt class="xref py py-meth docutils literal"><span class="pre">Model.clean_fields()</span></tt></a>, <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.clean" title="django.db.models.Model.clean"><tt class="xref py py-meth docutils literal"><span class="pre">Model.clean()</span></tt></a>, and
<a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.validate_unique" title="django.db.models.Model.validate_unique"><tt class="xref py py-meth docutils literal"><span class="pre">Model.validate_unique()</span></tt></a>, in that order and raises a
<a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/exceptions/#django.core.exceptions.ValidationError" title="django.core.exceptions.ValidationError"><tt class="xref py py-exc docutils literal"><span class="pre">ValidationError</span></tt></a> that has a <tt class="docutils literal"><span class="pre">message_dict</span></tt>
attribute containing errors from all three stages.</p>
<p>The optional <tt class="docutils literal"><span class="pre">exclude</span></tt> argument can be used to provide a list of field names
that can be excluded from validation and cleaning.
<a class="reference internal" href="https://docs.djangoproject.com/en/1.4/topics/forms/modelforms/#django.forms.ModelForm" title="django.forms.ModelForm"><tt class="xref py py-class docutils literal"><span class="pre">ModelForm</span></tt></a> uses this argument to exclude fields that
aren’t present on your form from being validated since any errors raised could
not be corrected by the user.</p>
<p>Note that <tt class="docutils literal"><span class="pre">full_clean()</span></tt> will <em>not</em> be called automatically when you call
your model’s <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.save" title="django.db.models.Model.save"><tt class="xref py py-meth docutils literal"><span class="pre">save()</span></tt></a> method, nor as a result of
<a class="reference internal" href="https://docs.djangoproject.com/en/1.4/topics/forms/modelforms/#django.forms.ModelForm" title="django.forms.ModelForm"><tt class="xref py py-class docutils literal"><span class="pre">ModelForm</span></tt></a> validation. You’ll need to call it manually
when you want to run one-step model validation for your own manually created
models.</p>
<p>Example:</p>
<div class="highlight-python"><pre>try:
    article.full_clean()
except ValidationError, e:
    # Do something based on the errors contained in e.message_dict.
    # Display them to a user, or handle them programatically.</pre>
</div>
<p>The first step <tt class="docutils literal"><span class="pre">full_clean()</span></tt> performs is to clean each individual field.</p>
<dl class="method">
<dt id="django.db.models.Model.clean_fields">
<tt class="descclassname">Model.</tt><tt class="descname">clean_fields</tt>(<em>exclude=None</em>)<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.clean_fields" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<p>This method will validate all fields on your model. The optional <tt class="docutils literal"><span class="pre">exclude</span></tt>
argument lets you provide a list of field names to exclude from validation. It
will raise a <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/exceptions/#django.core.exceptions.ValidationError" title="django.core.exceptions.ValidationError"><tt class="xref py py-exc docutils literal"><span class="pre">ValidationError</span></tt></a> if any fields fail
validation.</p>
<p>The second step <tt class="docutils literal"><span class="pre">full_clean()</span></tt> performs is to call <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.clean" title="django.db.models.Model.clean"><tt class="xref py py-meth docutils literal"><span class="pre">Model.clean()</span></tt></a>.
This method should be overridden to perform custom validation on your model.</p>
<dl class="method">
<dt id="django.db.models.Model.clean">
<tt class="descclassname">Model.</tt><tt class="descname">clean</tt>()<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.clean" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<p>This method should be used to provide custom model validation, and to modify
attributes on your model if desired. For instance, you could use it to
automatically provide a value for a field, or to do validation that requires
access to more than a single field:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">def</span> <span class="nf">clean</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="kn">from</span> <span class="nn">django.core.exceptions</span> <span class="kn">import</span> <span class="n">ValidationError</span>
    <span class="c"># Don't allow draft entries to have a pub_date.</span>
    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">status</span> <span class="o">==</span> <span class="s">'draft'</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">pub_date</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">raise</span> <span class="n">ValidationError</span><span class="p">(</span><span class="s">'Draft entries may not have a publication date.'</span><span class="p">)</span>
    <span class="c"># Set the pub_date for published items if it hasn't been set already.</span>
    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">status</span> <span class="o">==</span> <span class="s">'published'</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">pub_date</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pub_date</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</pre></div>
</div>
<p>Any <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/exceptions/#django.core.exceptions.ValidationError" title="django.core.exceptions.ValidationError"><tt class="xref py py-exc docutils literal"><span class="pre">ValidationError</span></tt></a> exceptions raised by
<tt class="docutils literal"><span class="pre">Model.clean()</span></tt> will be stored in a special key error dictionary key,
<tt class="docutils literal"><span class="pre">NON_FIELD_ERRORS</span></tt>, that is used for errors that are tied to the entire model
instead of to a specific field:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.core.exceptions</span> <span class="kn">import</span> <span class="n">ValidationError</span><span class="p">,</span> <span class="n">NON_FIELD_ERRORS</span>
<span class="k">try</span><span class="p">:</span>
    <span class="n">article</span><span class="o">.</span><span class="n">full_clean</span><span class="p">()</span>
<span class="k">except</span> <span class="n">ValidationError</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
    <span class="n">non_field_errors</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">message_dict</span><span class="p">[</span><span class="n">NON_FIELD_ERRORS</span><span class="p">]</span>
</pre></div>
</div>
<p>Finally, <tt class="docutils literal"><span class="pre">full_clean()</span></tt> will check any unique constraints on your model.</p>
<dl class="method">
<dt id="django.db.models.Model.validate_unique">
<tt class="descclassname">Model.</tt><tt class="descname">validate_unique</tt>(<em>exclude=None</em>)<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.validate_unique" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<p>This method is similar to <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.clean_fields" title="django.db.models.Model.clean_fields"><tt class="xref py py-meth docutils literal"><span class="pre">clean_fields()</span></tt></a>, but validates all
uniqueness constraints on your model instead of individual field values. The
optional <tt class="docutils literal"><span class="pre">exclude</span></tt> argument allows you to provide a list of field names to
exclude from validation. It will raise a
<a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/exceptions/#django.core.exceptions.ValidationError" title="django.core.exceptions.ValidationError"><tt class="xref py py-exc docutils literal"><span class="pre">ValidationError</span></tt></a> if any fields fail validation.</p>
<p>Note that if you provide an <tt class="docutils literal"><span class="pre">exclude</span></tt> argument to <tt class="docutils literal"><span class="pre">validate_unique()</span></tt>, any
<a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/options/#django.db.models.Options.unique_together" title="django.db.models.Options.unique_together"><tt class="xref py py-attr docutils literal"><span class="pre">unique_together</span></tt></a> constraint involving one of
the fields you provided will not be checked.</p>
</div>
<div class="section" id="s-saving-objects">
<span id="saving-objects"></span><h2>Saving objects<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#saving-objects" title="Permalink to this headline">¶</a></h2>
<p>To save an object back to the database, call <tt class="docutils literal"><span class="pre">save()</span></tt>:</p>
<dl class="method">
<dt id="django.db.models.Model.save">
<tt class="descclassname">Model.</tt><tt class="descname">save</tt>(<span class="optional">[</span><em>force_insert=False</em>, <em>force_update=False</em>, <em>using=DEFAULT_DB_ALIAS</em><span class="optional">]</span>)<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.save" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<div class="versionadded">
<span class="title">New in Django 1.2:</span> The <tt class="docutils literal"><span class="pre">using</span></tt> argument was added.</div>
<p>If you want customized saving behavior, you can override this <tt class="docutils literal"><span class="pre">save()</span></tt>
method. See <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/topics/db/models/#overriding-model-methods"><em>Overriding predefined model methods</em></a> for more details.</p>
<p>The model save process also has some subtleties; see the sections below.</p>
<div class="section" id="s-auto-incrementing-primary-keys">
<span id="auto-incrementing-primary-keys"></span><h3>Auto-incrementing primary keys<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#auto-incrementing-primary-keys" title="Permalink to this headline">¶</a></h3>
<p>If a model has an <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/fields/#django.db.models.AutoField" title="django.db.models.AutoField"><tt class="xref py py-class docutils literal"><span class="pre">AutoField</span></tt></a> — an auto-incrementing
primary key — then that auto-incremented value will be calculated and saved as
an attribute on your object the first time you call <tt class="docutils literal"><span class="pre">save()</span></tt>:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">b2</span> <span class="o">=</span> <span class="n">Blog</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'Cheddar Talk'</span><span class="p">,</span> <span class="n">tagline</span><span class="o">=</span><span class="s">'Thoughts on cheese.'</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b2</span><span class="o">.</span><span class="n">id</span>     <span class="c"># Returns None, because b doesn't have an ID yet.</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b2</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b2</span><span class="o">.</span><span class="n">id</span>     <span class="c"># Returns the ID of your new object.</span>
</pre></div>
</div>
<p>There's no way to tell what the value of an ID will be before you call
<tt class="docutils literal"><span class="pre">save()</span></tt>, because that value is calculated by your database, not by Django.</p>
<p>For convenience, each model has an <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/fields/#django.db.models.AutoField" title="django.db.models.AutoField"><tt class="xref py py-class docutils literal"><span class="pre">AutoField</span></tt></a> named
<tt class="docutils literal"><span class="pre">id</span></tt> by default unless you explicitly specify <tt class="docutils literal"><span class="pre">primary_key=True</span></tt> on a field
in your model. See the documentation for <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/fields/#django.db.models.AutoField" title="django.db.models.AutoField"><tt class="xref py py-class docutils literal"><span class="pre">AutoField</span></tt></a>
for more details.</p>
<div class="section" id="s-the-pk-property">
<span id="the-pk-property"></span><h4>The <tt class="docutils literal"><span class="pre">pk</span></tt> property<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#the-pk-property" title="Permalink to this headline">¶</a></h4>
<dl class="attribute">
<dt id="django.db.models.Model.pk">
<tt class="descclassname">Model.</tt><tt class="descname">pk</tt><a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.pk" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<p>Regardless of whether you define a primary key field yourself, or let Django
supply one for you, each model will have a property called <tt class="docutils literal"><span class="pre">pk</span></tt>. It behaves
like a normal attribute on the model, but is actually an alias for whichever
attribute is the primary key field for the model. You can read and set this
value, just as you would for any other attribute, and it will update the
correct field in the model.</p>
</div>
<div class="section" id="s-explicitly-specifying-auto-primary-key-values">
<span id="explicitly-specifying-auto-primary-key-values"></span><h4>Explicitly specifying auto-primary-key values<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#explicitly-specifying-auto-primary-key-values" title="Permalink to this headline">¶</a></h4>
<p>If a model has an <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/fields/#django.db.models.AutoField" title="django.db.models.AutoField"><tt class="xref py py-class docutils literal"><span class="pre">AutoField</span></tt></a> but you want to define a
new object's ID explicitly when saving, just define it explicitly before
saving, rather than relying on the auto-assignment of the ID:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">b3</span> <span class="o">=</span> <span class="n">Blog</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'Cheddar Talk'</span><span class="p">,</span> <span class="n">tagline</span><span class="o">=</span><span class="s">'Thoughts on cheese.'</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b3</span><span class="o">.</span><span class="n">id</span>     <span class="c"># Returns 3.</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b3</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b3</span><span class="o">.</span><span class="n">id</span>     <span class="c"># Returns 3.</span>
</pre></div>
</div>
<p>If you assign auto-primary-key values manually, make sure not to use an
already-existing primary-key value! If you create a new object with an explicit
primary-key value that already exists in the database, Django will assume you're
changing the existing record rather than creating a new one.</p>
<p>Given the above <tt class="docutils literal"><span class="pre">'Cheddar</span> <span class="pre">Talk'</span></tt> blog example, this example would override the
previous record in the database:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">b4</span> <span class="o">=</span> <span class="n">Blog</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'Not Cheddar'</span><span class="p">,</span> <span class="n">tagline</span><span class="o">=</span><span class="s">'Anything but cheese.'</span><span class="p">)</span>
<span class="n">b4</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>  <span class="c"># Overrides the previous blog with ID=3!</span>
</pre></div>
</div>
<p>See <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#how-django-knows-to-update-vs-insert">How Django knows to UPDATE vs. INSERT</a>, below, for the reason this
happens.</p>
<p>Explicitly specifying auto-primary-key values is mostly useful for bulk-saving
objects, when you're confident you won't have primary-key collision.</p>
</div>
</div>
<div class="section" id="s-what-happens-when-you-save">
<span id="what-happens-when-you-save"></span><h3>What happens when you save?<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#what-happens-when-you-save" title="Permalink to this headline">¶</a></h3>
<p>When you save an object, Django performs the following steps:</p>
<ol class="arabic">
<li><p class="first"><strong>Emit a pre-save signal.</strong> The <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/signals/"><em>signal</em></a>
<a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/signals/#django.db.models.signals.pre_save" title="django.db.models.signals.pre_save"><tt class="xref py py-attr docutils literal"><span class="pre">django.db.models.signals.pre_save</span></tt></a> is sent, allowing any
functions listening for that signal to take some customized
action.</p>
</li>
<li><p class="first"><strong>Pre-process the data.</strong> Each field on the object is asked to
perform any automated data modification that the field may need
to perform.</p>
<p>Most fields do <em>no</em> pre-processing — the field data is kept as-is.
Pre-processing is only used on fields that have special behavior.  For
example, if your model has a <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/fields/#django.db.models.DateField" title="django.db.models.DateField"><tt class="xref py py-class docutils literal"><span class="pre">DateField</span></tt></a> with
<tt class="docutils literal"><span class="pre">auto_now=True</span></tt>, the pre-save phase will alter the data in the object
to ensure that the date field contains the current date stamp. (Our
documentation doesn't yet include a list of all the fields with this
"special behavior.")</p>
</li>
<li><p class="first"><strong>Prepare the data for the database.</strong> Each field is asked to provide
its current value in a data type that can be written to the database.</p>
<p>Most fields require <em>no</em> data preparation. Simple data types, such as
integers and strings, are 'ready to write' as a Python object. However,
more complex data types often require some modification.</p>
<p>For example, <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/fields/#django.db.models.DateField" title="django.db.models.DateField"><tt class="xref py py-class docutils literal"><span class="pre">DateField</span></tt></a> fields use a Python
<tt class="docutils literal"><span class="pre">datetime</span></tt> object to store data. Databases don't store <tt class="docutils literal"><span class="pre">datetime</span></tt>
objects, so the field value must be converted into an ISO-compliant date
string for insertion into the database.</p>
</li>
<li><p class="first"><strong>Insert the data into the database.</strong> The pre-processed, prepared
data is then composed into an SQL statement for insertion into the
database.</p>
</li>
<li><p class="first"><strong>Emit a post-save signal.</strong> The signal
<a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/signals/#django.db.models.signals.post_save" title="django.db.models.signals.post_save"><tt class="xref py py-attr docutils literal"><span class="pre">django.db.models.signals.post_save</span></tt></a> is sent, allowing
any functions listening for that signal to take some customized
action.</p>
</li>
</ol>
</div>
<div class="section" id="s-how-django-knows-to-update-vs-insert">
<span id="how-django-knows-to-update-vs-insert"></span><h3>How Django knows to UPDATE vs. INSERT<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#how-django-knows-to-update-vs-insert" title="Permalink to this headline">¶</a></h3>
<p>You may have noticed Django database objects use the same <tt class="docutils literal"><span class="pre">save()</span></tt> method
for creating and changing objects. Django abstracts the need to use <tt class="docutils literal"><span class="pre">INSERT</span></tt>
or <tt class="docutils literal"><span class="pre">UPDATE</span></tt> SQL statements. Specifically, when you call <tt class="docutils literal"><span class="pre">save()</span></tt>, Django
follows this algorithm:</p>
<ul class="simple">
<li>If the object's primary key attribute is set to a value that evaluates to
<tt class="xref docutils literal"><span class="pre">True</span></tt> (i.e., a value other than <tt class="xref docutils literal"><span class="pre">None</span></tt> or the empty string), Django
executes a <tt class="docutils literal"><span class="pre">SELECT</span></tt> query to determine whether a record with the given
primary key already exists.</li>
<li>If the record with the given primary key does already exist, Django
executes an <tt class="docutils literal"><span class="pre">UPDATE</span></tt> query.</li>
<li>If the object's primary key attribute is <em>not</em> set, or if it's set but a
record doesn't exist, Django executes an <tt class="docutils literal"><span class="pre">INSERT</span></tt>.</li>
</ul>
<p>The one gotcha here is that you should be careful not to specify a primary-key
value explicitly when saving new objects, if you cannot guarantee the
primary-key value is unused. For more on this nuance, see <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#explicitly-specifying-auto-primary-key-values">Explicitly specifying
auto-primary-key values</a> above and <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#forcing-an-insert-or-update">Forcing an INSERT or UPDATE</a> below.</p>
<div class="section" id="s-forcing-an-insert-or-update">
<span id="s-ref-models-force-insert"></span><span id="forcing-an-insert-or-update"></span><span id="ref-models-force-insert"></span><h4>Forcing an INSERT or UPDATE<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#forcing-an-insert-or-update" title="Permalink to this headline">¶</a></h4>
<p>In some rare circumstances, it's necessary to be able to force the
<a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.save" title="django.db.models.Model.save"><tt class="xref py py-meth docutils literal"><span class="pre">save()</span></tt></a> method to perform an SQL <tt class="docutils literal"><span class="pre">INSERT</span></tt> and not fall back to
doing an <tt class="docutils literal"><span class="pre">UPDATE</span></tt>. Or vice-versa: update, if possible, but not insert a new
row. In these cases you can pass the <tt class="docutils literal"><span class="pre">force_insert=True</span></tt> or
<tt class="docutils literal"><span class="pre">force_update=True</span></tt> parameters to the <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.save" title="django.db.models.Model.save"><tt class="xref py py-meth docutils literal"><span class="pre">save()</span></tt></a> method.
Obviously, passing both parameters is an error: you cannot both insert <em>and</em>
update at the same time!</p>
<p>It should be very rare that you'll need to use these parameters. Django will
almost always do the right thing and trying to override that will lead to
errors that are difficult to track down. This feature is for advanced use
only.</p>
</div>
</div>
<div class="section" id="s-updating-attributes-based-on-existing-fields">
<span id="updating-attributes-based-on-existing-fields"></span><h3>Updating attributes based on existing fields<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#updating-attributes-based-on-existing-fields" title="Permalink to this headline">¶</a></h3>
<p>Sometimes you'll need to perform a simple arithmetic task on a field, such
as incrementing or decrementing the current value. The obvious way to
achieve this is to do something like:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">product</span> <span class="o">=</span> <span class="n">Product</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'Venezuelan Beaver Cheese'</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">product</span><span class="o">.</span><span class="n">number_sold</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">product</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</pre></div>
</div>
<p>If the old <tt class="docutils literal"><span class="pre">number_sold</span></tt> value retrieved from the database was 10, then
the value of 11 will be written back to the database.</p>
<p>This sequence has a standard update problem in that it contains a race
condition. If another thread of execution has already saved an updated value
after the current thread retrieved the old value, the current thread will only
save the old value plus one, rather than the new (current) value plus one.</p>
<p>The process can be made robust and slightly faster by expressing the update
relative to the original field value, rather than as an explicit assignment of
a new value. Django provides <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/topics/db/queries/#query-expressions"><em>F() expressions</em></a> for
performing this kind of relative update. Using <tt class="docutils literal"><span class="pre">F()</span></tt> expressions, the
previous example is expressed as:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">F</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">product</span> <span class="o">=</span> <span class="n">Product</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'Venezuelan Beaver Cheese'</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">product</span><span class="o">.</span><span class="n">number_sold</span> <span class="o">=</span> <span class="n">F</span><span class="p">(</span><span class="s">'number_sold'</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">product</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</pre></div>
</div>
<p>This approach doesn't use the initial value from the database. Instead, it
makes the database do the update based on whatever value is current at the time
that the <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.save" title="django.db.models.Model.save"><tt class="xref py py-meth docutils literal"><span class="pre">save()</span></tt></a> is executed.</p>
<p>Once the object has been saved, you must reload the object in order to access
the actual value that was applied to the updated field:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">product</span> <span class="o">=</span> <span class="n">Products</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">pk</span><span class="o">=</span><span class="n">product</span><span class="o">.</span><span class="n">pk</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span> <span class="n">product</span><span class="o">.</span><span class="n">number_sold</span>
<span class="go">42</span>
</pre></div>
</div>
<p>For more details, see the documentation on <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/topics/db/queries/#query-expressions"><em>F() expressions</em></a> and their <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/topics/db/queries/#topics-db-queries-update"><em>use in update queries</em></a>.</p>
</div>
</div>
<div class="section" id="s-deleting-objects">
<span id="deleting-objects"></span><h2>Deleting objects<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#deleting-objects" title="Permalink to this headline">¶</a></h2>
<dl class="method">
<dt id="django.db.models.Model.delete">
<tt class="descclassname">Model.</tt><tt class="descname">delete</tt>(<span class="optional">[</span><em>using=DEFAULT_DB_ALIAS</em><span class="optional">]</span>)<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.delete" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<div class="versionadded">
<span class="title">New in Django 1.2:</span> The <tt class="docutils literal"><span class="pre">using</span></tt> argument was added.</div>
<p>Issues a SQL <tt class="docutils literal"><span class="pre">DELETE</span></tt> for the object. This only deletes the object in the
database; the Python instance will still exist and will still have data in
its fields.</p>
<p>For more details, including how to delete objects in bulk, see
<a class="reference internal" href="https://docs.djangoproject.com/en/1.4/topics/db/queries/#topics-db-queries-delete"><em>Deleting objects</em></a>.</p>
<p>If you want customized deletion behavior, you can override the <tt class="docutils literal"><span class="pre">delete()</span></tt>
method. See <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/topics/db/models/#overriding-model-methods"><em>Overriding predefined model methods</em></a> for more details.</p>
</div>
<div class="section" id="s-other-model-instance-methods">
<span id="s-model-instance-methods"></span><span id="other-model-instance-methods"></span><span id="model-instance-methods"></span><h2>Other model instance methods<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#other-model-instance-methods" title="Permalink to this headline">¶</a></h2>
<p>A few object methods have special purposes.</p>
<div class="section" id="s-unicode">
<span id="unicode"></span><h3><tt class="docutils literal"><span class="pre">__unicode__</span></tt><a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#unicode" title="Permalink to this headline">¶</a></h3>
<dl class="method">
<dt id="django.db.models.Model.__unicode__">
<tt class="descclassname">Model.</tt><tt class="descname">__unicode__</tt>()<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.__unicode__" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<p>The <tt class="docutils literal"><span class="pre">__unicode__()</span></tt> method is called whenever you call <tt class="docutils literal"><span class="pre">unicode()</span></tt> on an
object. Django uses <tt class="docutils literal"><span class="pre">unicode(obj)</span></tt> (or the related function, <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.__str__" title="django.db.models.Model.__str__"><tt class="xref py py-meth docutils literal"><span class="pre">str(obj)</span></tt></a>) in a number of places. Most notably, to display an object in
the Django admin site and as the value inserted into a template when it
displays an object. Thus, you should always return a nice, human-readable
representation of the model from the <tt class="docutils literal"><span class="pre">__unicode__()</span></tt> method.</p>
<p>For example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">first_name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
    <span class="n">last_name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__unicode__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s">u'</span><span class="si">%s</span><span class="s"> </span><span class="si">%s</span><span class="s">'</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">first_name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">last_name</span><span class="p">)</span>
</pre></div>
</div>
<p>If you define a <tt class="docutils literal"><span class="pre">__unicode__()</span></tt> method on your model and not a
<a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.__str__" title="django.db.models.Model.__str__"><tt class="xref py py-meth docutils literal"><span class="pre">__str__()</span></tt></a> method, Django will automatically provide you with a
<a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.__str__" title="django.db.models.Model.__str__"><tt class="xref py py-meth docutils literal"><span class="pre">__str__()</span></tt></a> that calls <tt class="docutils literal"><span class="pre">__unicode__()</span></tt> and then converts the
result correctly to a UTF-8 encoded string object. This is recommended
development practice: define only <tt class="docutils literal"><span class="pre">__unicode__()</span></tt> and let Django take care of
the conversion to string objects when required.</p>
</div>
<div class="section" id="s-str">
<span id="str"></span><h3><tt class="docutils literal"><span class="pre">__str__</span></tt><a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#str" title="Permalink to this headline">¶</a></h3>
<dl class="method">
<dt id="django.db.models.Model.__str__">
<tt class="descclassname">Model.</tt><tt class="descname">__str__</tt>()<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.__str__" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<p>The <tt class="docutils literal"><span class="pre">__str__()</span></tt> method is called whenever you call <tt class="docutils literal"><span class="pre">str()</span></tt> on an object. The main use for this method directly inside Django is when the <tt class="docutils literal"><span class="pre">repr()</span></tt> output of a model is displayed anywhere (for example, in debugging output).
Thus, you should return a nice, human-readable string for the object's
<tt class="docutils literal"><span class="pre">__str__()</span></tt>.  It isn't required to put <tt class="docutils literal"><span class="pre">__str__()</span></tt> methods everywhere if you have sensible <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.__unicode__" title="django.db.models.Model.__unicode__"><tt class="xref py py-meth docutils literal"><span class="pre">__unicode__()</span></tt></a> methods.</p>
<p>The previous <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.__unicode__" title="django.db.models.Model.__unicode__"><tt class="xref py py-meth docutils literal"><span class="pre">__unicode__()</span></tt></a> example could be similarly written
using <tt class="docutils literal"><span class="pre">__str__()</span></tt> like this:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">first_name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
    <span class="n">last_name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="c"># Note use of django.utils.encoding.smart_str() here because</span>
        <span class="c"># first_name and last_name will be unicode strings.</span>
        <span class="k">return</span> <span class="n">smart_str</span><span class="p">(</span><span class="s">'</span><span class="si">%s</span><span class="s"> </span><span class="si">%s</span><span class="s">'</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">first_name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">last_name</span><span class="p">))</span>
</pre></div>
</div>
</div>
<div class="section" id="s-get-absolute-url">
<span id="get-absolute-url"></span><h3><tt class="docutils literal"><span class="pre">get_absolute_url</span></tt><a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#get-absolute-url" title="Permalink to this headline">¶</a></h3>
<dl class="method">
<dt id="django.db.models.Model.get_absolute_url">
<tt class="descclassname">Model.</tt><tt class="descname">get_absolute_url</tt>()<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.get_absolute_url" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<p>Define a <tt class="docutils literal"><span class="pre">get_absolute_url()</span></tt> method to tell Django how to calculate the
canonical URL for an object. To callers, this method should appear to return a
string that can be used to refer to the object over HTTP.</p>
<p>For example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">def</span> <span class="nf">get_absolute_url</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">return</span> <span class="s">"/people/</span><span class="si">%i</span><span class="s">/"</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">id</span>
</pre></div>
</div>
<p>(Whilst this code is correct and simple, it may not be the most portable way to
write this kind of method. The <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.permalink" title="django.db.models.permalink"><tt class="xref py py-func docutils literal"><span class="pre">permalink()</span> <span class="pre">decorator</span></tt></a>,
documented below, is usually the best approach and you should read that section
before diving into code implementation.)</p>
<p>One place Django uses <tt class="docutils literal"><span class="pre">get_absolute_url()</span></tt> is in the admin app. If an object
defines this method, the object-editing page will have a "View on site" link
that will jump you directly to the object's public view, as given by
<tt class="docutils literal"><span class="pre">get_absolute_url()</span></tt>.</p>
<p>Similarly, a couple of other bits of Django, such as the <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/contrib/syndication/"><em>syndication feed
framework</em></a>, use <tt class="docutils literal"><span class="pre">get_absolute_url()</span></tt> when it is
defined. If it makes sense for your model's instances to each have a unique
URL, you should define <tt class="docutils literal"><span class="pre">get_absolute_url()</span></tt>.</p>
<p>It's good practice to use <tt class="docutils literal"><span class="pre">get_absolute_url()</span></tt> in templates, instead of
hard-coding your objects' URLs. For example, this template code is bad:</p>
<div class="highlight-python"><pre>&lt;!-- BAD template code. Avoid! --&gt;
&lt;a href="/people/{{ object.id }}/"&gt;{{ object.name }}&lt;/a&gt;</pre>
</div>
<p>This template code is much better:</p>
<div class="highlight-python"><pre>&lt;a href="{{ object.get_absolute_url }}"&gt;{{ object.name }}&lt;/a&gt;</pre>
</div>
<p>The logic here is that if you change the URL structure of your objects, even
for something simple such as correcting a spelling error, you don't want to
have to track down every place that the URL might be created. Specify it once,
in <tt class="docutils literal"><span class="pre">get_absolute_url()</span></tt> and have all your other code call that one place.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p>The string you return from <tt class="docutils literal"><span class="pre">get_absolute_url()</span></tt> <strong>must</strong> contain only
ASCII characters (required by the URI specfication, <span class="target" id="index-0"></span><a class="rfc reference external" href="http://tools.ietf.org/html/rfc2396.html"><strong>RFC 2396</strong></a>) and be
URL-encoded, if necessary.</p>
<p class="last">Code and templates calling <tt class="docutils literal"><span class="pre">get_absolute_url()</span></tt> should be able to use the
result directly without any further processing. You may wish to use the
<tt class="docutils literal"><span class="pre">django.utils.encoding.iri_to_uri()</span></tt> function to help with this if you
are using unicode strings containing characters outside the ASCII range at
all.</p>
</div>
<div class="section" id="s-the-permalink-decorator">
<span id="the-permalink-decorator"></span><h4>The <tt class="docutils literal"><span class="pre">permalink</span></tt> decorator<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#the-permalink-decorator" title="Permalink to this headline">¶</a></h4>
<p>The way we wrote <tt class="docutils literal"><span class="pre">get_absolute_url()</span></tt> above is a slightly violation of the
DRY principle: the URL for this object is defined both in the URLconf file and
in the model.</p>
<p>You can decouple your models from the URLconf using the <tt class="docutils literal"><span class="pre">permalink</span></tt> decorator:</p>
<dl class="function">
<dt id="django.db.models.permalink">
<tt class="descname">permalink</tt>()<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.permalink" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<p>This decorator takes the name of a URL pattern (either a view name or a URL
pattern name) and a list of position or keyword arguments and uses the URLconf
patterns to construct the correct, full URL. It returns a string for the
correct URL, with all parameters substituted in the correct positions.</p>
<p>The <tt class="docutils literal"><span class="pre">permalink</span></tt> decorator is a Python-level equivalent to the <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/templates/builtins/#std:templatetag-url"><tt class="xref std std-ttag docutils literal"><span class="pre">url</span></tt></a> template tag and a high-level wrapper for the <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/topics/http/urls/#django.core.urlresolvers.reverse" title="django.core.urlresolvers.reverse"><tt class="xref py py-func docutils literal"><span class="pre">django.core.urlresolvers.reverse()</span></tt></a> function.</p>
<p>An example should make it clear how to use <tt class="docutils literal"><span class="pre">permalink()</span></tt>. Suppose your URLconf
contains a line such as:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="p">(</span><span class="s">r'^people/(\d+)/$'</span><span class="p">,</span> <span class="s">'people.views.details'</span><span class="p">),</span>
</pre></div>
</div>
<p>...your model could have a <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.get_absolute_url" title="django.db.models.Model.get_absolute_url"><tt class="xref py py-meth docutils literal"><span class="pre">get_absolute_url()</span></tt></a>
method that looked like this:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>

<span class="nd">@models.permalink</span>
<span class="k">def</span> <span class="nf">get_absolute_url</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">(</span><span class="s">'people.views.details'</span><span class="p">,</span> <span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">id</span><span class="p">)])</span>
</pre></div>
</div>
<p>Similarly, if you had a URLconf entry that looked like:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="p">(</span><span class="s">r'/archive/(?P&lt;year&gt;\d{4})/(?P&lt;month&gt;\d{2})/(?P&lt;day&gt;\d{2})/$'</span><span class="p">,</span> <span class="n">archive_view</span><span class="p">)</span>
</pre></div>
</div>
<p>...you could reference this using <tt class="docutils literal"><span class="pre">permalink()</span></tt> as follows:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="nd">@models.permalink</span>
<span class="k">def</span> <span class="nf">get_absolute_url</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">(</span><span class="s">'archive_view'</span><span class="p">,</span> <span class="p">(),</span> <span class="p">{</span>
        <span class="s">'year'</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">created</span><span class="o">.</span><span class="n">year</span><span class="p">,</span>
        <span class="s">'month'</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">created</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">'%m'</span><span class="p">),</span>
        <span class="s">'day'</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">created</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">'</span><span class="si">%d</span><span class="s">'</span><span class="p">)})</span>
</pre></div>
</div>
<p>Notice that we specify an empty sequence for the second parameter in this case,
because we only want to pass keyword parameters, not positional ones.</p>
<p>In this way, you're associating the model's absolute path with the view that is
used to display it, without repeating the view's URL information anywhere. You
can still use the <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.get_absolute_url" title="django.db.models.Model.get_absolute_url"><tt class="xref py py-meth docutils literal"><span class="pre">get_absolute_url()</span></tt></a> method in
templates, as before.</p>
<p>In some cases, such as the use of generic views or the re-use of custom views
for multiple models, specifying the view function may confuse the reverse URL
matcher (because multiple patterns point to the same view). For that case,
Django has <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/topics/http/urls/#naming-url-patterns"><em>named URL patterns</em></a>. Using a named URL
pattern, it's possible to give a name to a pattern, and then reference the name
rather than the view function. A named URL pattern is defined by replacing the
pattern tuple by a call to the <tt class="docutils literal"><span class="pre">url</span></tt> function):</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">patterns</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">include</span>

<span class="n">url</span><span class="p">(</span><span class="s">r'^people/(\d+)/$'</span><span class="p">,</span> <span class="s">'blog_views.generic_detail'</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'people_view'</span><span class="p">),</span>
</pre></div>
</div>
<p>...and then using that name to perform the reverse URL resolution instead
of the view name:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>

<span class="nd">@models.permalink</span>
<span class="k">def</span> <span class="nf">get_absolute_url</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">(</span><span class="s">'people_view'</span><span class="p">,</span> <span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">id</span><span class="p">)])</span>
</pre></div>
</div>
<p>More details on named URL patterns are in the <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/topics/http/urls/"><em>URL dispatch documentation</em></a>.</p>
</div>
</div>
</div>
<div class="section" id="s-extra-instance-methods">
<span id="extra-instance-methods"></span><h2>Extra instance methods<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#extra-instance-methods" title="Permalink to this headline">¶</a></h2>
<p>In addition to <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.save" title="django.db.models.Model.save"><tt class="xref py py-meth docutils literal"><span class="pre">save()</span></tt></a>, <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.delete" title="django.db.models.Model.delete"><tt class="xref py py-meth docutils literal"><span class="pre">delete()</span></tt></a>, a model object
might have some of the following methods:</p>
<dl class="method">
<dt id="django.db.models.Model.get_FOO_display">
<tt class="descclassname">Model.</tt><tt class="descname">get_FOO_display</tt>()<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.get_FOO_display" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<p>For every field that has <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/fields/#django.db.models.Field.choices" title="django.db.models.Field.choices"><tt class="xref py py-attr docutils literal"><span class="pre">choices</span></tt></a> set, the
object will have a <tt class="docutils literal"><span class="pre">get_FOO_display()</span></tt> method, where <tt class="docutils literal"><span class="pre">FOO</span></tt> is the name of
the field. This method returns the "human-readable" value of the field. For
example, in the following model:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">GENDER_CHOICES</span> <span class="o">=</span> <span class="p">(</span>
    <span class="p">(</span><span class="s">'M'</span><span class="p">,</span> <span class="s">'Male'</span><span class="p">),</span>
    <span class="p">(</span><span class="s">'F'</span><span class="p">,</span> <span class="s">'Female'</span><span class="p">),</span>
<span class="p">)</span>
<span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
    <span class="n">gender</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="n">GENDER_CHOICES</span><span class="p">)</span>
</pre></div>
</div>
<p>...each <tt class="docutils literal"><span class="pre">Person</span></tt> instance will have a <tt class="docutils literal"><span class="pre">get_gender_display()</span></tt> method. Example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">p</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'John'</span><span class="p">,</span> <span class="n">gender</span><span class="o">=</span><span class="s">'M'</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">p</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">p</span><span class="o">.</span><span class="n">gender</span>
<span class="go">'M'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">p</span><span class="o">.</span><span class="n">get_gender_display</span><span class="p">()</span>
<span class="go">'Male'</span>
</pre></div>
</div>
<dl class="method">
<dt id="django.db.models.Model.get_next_by_FOO">
<tt class="descclassname">Model.</tt><tt class="descname">get_next_by_FOO</tt>(<em>**kwargs</em>)<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.get_next_by_FOO" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="method">
<dt id="django.db.models.Model.get_previous_by_FOO">
<tt class="descclassname">Model.</tt><tt class="descname">get_previous_by_FOO</tt>(<em>**kwargs</em>)<a class="headerlink" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#django.db.models.Model.get_previous_by_FOO" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<p>For every <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/fields/#django.db.models.DateField" title="django.db.models.DateField"><tt class="xref py py-class docutils literal"><span class="pre">DateField</span></tt></a> and
<a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/fields/#django.db.models.DateTimeField" title="django.db.models.DateTimeField"><tt class="xref py py-class docutils literal"><span class="pre">DateTimeField</span></tt></a> that does not have <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/fields/#django.db.models.Field.null" title="django.db.models.Field.null"><tt class="xref py py-attr docutils literal"><span class="pre">null=True</span></tt></a>, the object will have <tt class="docutils literal"><span class="pre">get_next_by_FOO()</span></tt> and
<tt class="docutils literal"><span class="pre">get_previous_by_FOO()</span></tt> methods, where <tt class="docutils literal"><span class="pre">FOO</span></tt> is the name of the field. This
returns the next and previous object with respect to the date field, raising
a <tt class="xref py py-exc docutils literal"><span class="pre">DoesNotExist</span></tt> exception when appropriate.</p>
<p>Both methods accept optional keyword arguments, which should be in the format
described in <a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/querysets/#field-lookups"><em>Field lookups</em></a>.</p>
<p>Note that in the case of identical date values, these methods will use the
primary key as a tie-breaker. This guarantees that no records are skipped or
duplicated. That also means you cannot use those methods on unsaved objects.</p>
</div>
</div>



<div id="content-secondary">
  <h2 id="comments">Questions/Feedback</h2>
  <p>Having trouble? We'd like to help!</p>
  <ul>
    <li>
      Try the <a href="https://docs.djangoproject.com/en/1.4/faq/">FAQ</a>
      — it's got answers to many common questions.
    </li>
    <li>
      Search for information in the <a href="http://groups.google.com/group/django-users/">archives of the
      django-users mailing list</a>, or <a href="http://groups.google.com/group/django-users/">post a question</a>.
    </li>
    <li>
      Ask a question in the <a href="irc://irc.freenode.net/">#django IRC
      channel</a>, or search the <a href="http://django-irc-logs.com/">IRC
      logs</a> to see if it has been asked before.
    </li>
    <li>
      If you notice errors with this documentation, please <a href="https://code.djangoproject.com/newticket?component=Documentation">
      open a ticket</a> and let us know! Please only use the ticket tracker for
      criticisms and improvements on the docs. For tech support, use the
      resources above.
    </li>
  </ul>
</div>

		</div>
		<!-- END #content-main -->
		<div id="content-related" class="sidebar">
		
  
    <h2>Search</h2>
    
    <form action="https://docs.djangoproject.com/search/" id="sidebar_search" class="search">
  <div>
    <p>
      <input type="search" name="q" id="id_sidebar_search_q">
    </p>
    <p>
      <label for="id_sidebar_search_release">Version:</label>
      <select name="release" id="id_sidebar_search_release">
<option value="2">Django 1.0</option>
<option value="3">Django 1.1</option>
<option value="4">Django 1.2</option>
<option value="5">Django 1.3</option>
<option value="6" selected="selected">Django 1.4</option>
<option value="1">Development trunk</option>
</select>
    </p>
    <p>
      <input type="submit" class="submit" value="Search">
    </p>
  </div>
</form>
  

  
    <h2>Contents</h2>
    
      <ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#">Model instance reference</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#creating-objects">Creating objects</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#validating-objects">Validating objects</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#saving-objects">Saving objects</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#auto-incrementing-primary-keys">Auto-incrementing primary keys</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#the-pk-property">The <tt class="docutils literal"><span class="pre">pk</span></tt> property</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#explicitly-specifying-auto-primary-key-values">Explicitly specifying auto-primary-key values</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#what-happens-when-you-save">What happens when you save?</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#how-django-knows-to-update-vs-insert">How Django knows to UPDATE vs. INSERT</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#forcing-an-insert-or-update">Forcing an INSERT or UPDATE</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#updating-attributes-based-on-existing-fields">Updating attributes based on existing fields</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#deleting-objects">Deleting objects</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#other-model-instance-methods">Other model instance methods</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#unicode"><tt class="docutils literal"><span class="pre">__unicode__</span></tt></a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#str"><tt class="docutils literal"><span class="pre">__str__</span></tt></a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#get-absolute-url"><tt class="docutils literal"><span class="pre">get_absolute_url</span></tt></a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#the-permalink-decorator">The <tt class="docutils literal"><span class="pre">permalink</span></tt> decorator</a></li>
</ul>
</li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/1.4/ref/models/instances/#extra-instance-methods">Extra instance methods</a></li>
</ul>
</li>
</ul>

    
  
  
    <h2>Browse</h2>
    <ul>
      
        
          <li>Prev: <a href="https://docs.djangoproject.com/en/1.4/ref/models/options/">Model <tt class="docutils literal"><span class="pre">Meta</span></tt> options</a></li>
        
        
          <li>Next: <a href="https://docs.djangoproject.com/en/1.4/ref/models/querysets/">QuerySet API reference</a></li>
        
        <li><a href="https://docs.djangoproject.com/en/1.4/contents/">Table of contents</a></li>
        
          <li><a href="https://docs.djangoproject.com/en/1.4/genindex/">General Index</a></li>
        
          <li><a href="https://docs.djangoproject.com/en/1.4/py-modindex/">Python Module Index</a></li>
        
      
    </ul>
  

  
    <h2>You are here:</h2>
    <ul>
      
        <li>
          <a href="https://docs.djangoproject.com/en/1.4/">Django 1.4 documentation</a>
          
            <ul><li><a href="https://docs.djangoproject.com/en/1.4/ref/">API Reference</a>
          
            <ul><li><a href="https://docs.djangoproject.com/en/1.4/ref/models/">Models</a>
          
          <ul><li>Model instance reference</li></ul>
          </li></ul></li></ul>
        </li>
      
    </ul>

    
      <h2>Download:</h2>
      <p>
      
        Offline (Django 1.4):
        <a href="https://www.djangoproject.com/m/docs/django-docs-1.4-en.zip">HTML</a> |
        <a href="http://media.readthedocs.org/pdf/django/1.4.X/django.pdf">PDF</a> |
        <a href="http://media.readthedocs.org/epub/django/1.4.X/django.epub">ePub</a>
      
      <br>
      <span class="quiet">Provided by <a href="http://readthedocs.org/">Read the Docs</a>.
      </span></p>
    
  

		</div>
		<!-- END #content-related -->

    </div>
    <!-- END #content -->
    <div id="footer">
      <p>© 2005-2012 <a href="https://www.djangoproject.com/foundation/">Django Software Foundation</a> unless otherwise noted. Django is a registered trademark of the Django Software Foundation.
      <a href="http://mediatemple.net/">Linux Web hosting</a> graciously provided by Media Temple.
      </p>
    </div>
    <!-- END #footer -->
  </div>
  <!-- END #container -->
  


<div id="mixpanel" style="visibility: hidden; "></div></body><link rel="stylesheet" type="text/css" href="data:text/css,"></html>