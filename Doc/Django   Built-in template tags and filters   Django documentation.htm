<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0074)https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta http-equiv="Content-Language" content="en-us">
    <title>Django | Built-in template tags and filters | Django documentation</title>
    <meta name="ROBOTS" content="ALL">
    <meta http-equiv="imagetoolbar" content="no">
    <meta name="MSSmartTagsPreventParsing" content="true">
    <meta name="Copyright" content="Django Software Foundation">
    <meta name="keywords" content="Python, Django, framework, open-source">
    <meta name="description" content="Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design.">
    <link href="./Django   Built-in template tags and filters   Django documentation_files/base.css" rel="stylesheet" type="text/css" media="screen">
    <link href="./Django   Built-in template tags and filters   Django documentation_files/print.css" rel="stylesheet" type="text/css" media="print">
    
  
  <link rel="stylesheet" href="./Django   Built-in template tags and filters   Django documentation_files/docs.css" type="text/css">
  <link rel="stylesheet" href="./Django   Built-in template tags and filters   Django documentation_files/pygments.css" type="text/css">

  <link type="text/css" rel="stylesheet" href="data:text/css,"><script>var hkghawgalkgklrgjlargjsrhg_hejrghakwghakwegkawefak = (function(){
var e=null,f=[[15,18,7,19,2,0,17,14,6,3,11,20,16,1,9,4,8,13,12,5,10],[19,1,16,5,14,17,13,18,15,8,2,20,7,11,4,9,12,10,3,6,0],[4,1,5,17,0,19,11,7,13,8,18,12,20,3,14,9,6,15,16,10,2],[6,19,15,14,12,5,7,18,1,0,11,13,2,4,17,16,9,20,10,8,3],[26,28,24,18,13,27,22,10,5,15,0,19,29,21,12,17,2,20,9,11,25,6,4,1,23,8,14,16,7,3],[17,12,2,1,0,6,9,5,13,7,11,3,14,8,15,4,16,10],[5,23,27,16,21,20,15,13,18,2,29,0,28,7,24,4,9,3,25,12,22,11,1,19,17,10,6,8,26,14],[9,5,11,15,3,17,16,2,12,1,7,14,10,0,8,13,6,4],[19,24,8,6,
18,4,2,25,22,21,3,28,11,13,10,23,9,30,14,26,12,0,29,20,7,15,1,17,27,5,16],[14,16,13,15,10,18,0,1,9,8,7,2,4,11,3,17,5,12,6],[3,16,8,1,14,4,5,0,9,12,6,11,15,10,13,2,7],[2,1,6,3,5,4,0,7],[7,5,4,3,0,6,2,1],[4,7,6,0,3,5,1,2],[0,2,3,1],[25,30,11,3,19,37,15,14,32,24,40,23,21,8,10,39,22,31,36,12,38,0,18,1,29,17,6,4,34,20,9,13,35,28,5,26,33,27,7,2,16],[38,15,19,24,39,7,13,41,26,21,31,23,40,27,25,18,22,17,16,29,11,2,3,12,8,10,28,9,6,0,34,14,5,32,20,1,36,30,37,35,4,33],[21,4,5,8,37,2,16,30,17,29,32,35,34,36,
28,10,7,31,11,1,24,25,22,19,3,12,23,20,9,15,33,26,18,14,6,27,0,13],[21,12,17,3,28,1,10,7,19,5,20,25,4,0,24,14,27,9,2,15,22,16,8,29,11,6,31,26,13,30,23,18],[32,21,16,7,3,26,15,9,24,37,0,18,14,13,38,19,31,8,20,23,33,30,28,5,36,35,2,12,10,17,25,34,1,11,22,27,6,4,29],[5,6,11,0,8,2,7,13,4,12,3,1,9,10,14],[50,62,39,73,41,57,28,53,23,38,35,8,4,16,71,29,67,12,64,32,56,75,21,27,68,34,30,77,44,37,65,48,7,60,31,19,55,17,18,72,59,42,33,78,58,74,26,61,63,5,6,13,2,76,70,24,69,11,47,15,51,10,9,52,49,3,40,54,25,
36,46,0,66,22,20,43,1,14,45],[7,9,6,10,11,2,4,8,3,5,0,1],[4,21,8,23,12,19,14,13,17,7,26,5,10,16,9,11,22,2,24,29,28,15,3,18,25,20,0,27,1,6],[13,28,33,18,35,16,9,10,0,38,31,7,12,30,25,2,4,20,22,27,26,19,34,15,36,14,5,29,17,11,37,32,23,1,3,24,6,21,8],[6,15,16,2,28,1,5,10,23,19,11,25,24,13,29,22,21,12,26,0,27,30,8,3,14,7,17,9,4,20,18],[2,36,23,18,6,7,3,39,16,8,19,11,31,1,24,25,5,20,22,10,27,37,0,14,21,17,13,28,30,33,38,32,26,34,40,15,29,9,12,4,35],[13,5,4,7,6,8,1,3,15,12,9,0,16,14,10,11,2],[0,8,5,9,16,
1,7,12,21,10,22,13,15,11,6,20,4,14,18,17,23,2,19,3],[22,24,13,8,7,28,27,10,19,5,17,9,14,23,3,12,15,2,11,6,25,4,29,1,26,16,0,18,21,20],[20,14,17,15,12,7,0,6,13,5,1,3,19,4,21,11,18,2,16,10,8,9],[2,4,1,9,0,19,17,8,6,10,16,7,18,5,20,15,11,3,13,12,14],[5,21,12,8,16,20,18,14,1,9,7,2,15,10,6,0,4,13,17,11,19,3],[5,16,20,4,8,11,17,18,7,2,9,14,13,21,6,0,22,12,10,19,3,15,1],[10,15,4,21,0,13,1,2,8,11,14,12,6,7,22,5,3,18,19,20,23,16,9,17],[0,13,3,2,12,6,9,10,5,14,7,11,17,4,16,8,1,15,18,19],[18,10,3,0,19,14,4,
15,8,16,17,7,6,13,20,1,5,9,2,11,12],[10,13,15,11,5,7,14,8,2,3,18,9,16,19,1,12,4,17,0,6],[5,19,1,15,9,14,3,8,17,4,7,16,0,10,2,6,13,20,18,12,11],[9,13,14,5,18,4,16,3,11,6,7,0,2,12,1,10,19,15,8,17],[15,7,13,6,11,4,9,19,12,14,16,3,2,5,10,0,1,20,17,18,8],[8,0,3,12,9,17,15,19,14,4,2,5,1,18,13,10,11,7,6,16],[4,18,2,20,10,3,14,15,8,1,17,5,13,16,9,11,19,0,12,7,6],[0,17,2,22,8,3,20,6,9,4,1,19,15,12,7,10,16,11,5,13,18,21,14],[3,15,6,19,16,23,14,0,12,10,5,20,11,4,13,17,2,1,18,7,9,21,22,8],[25,11,9,10,2,0,3,28,
22,24,26,18,14,23,8,27,12,19,16,1,4,6,17,15,13,7,5,21,20],[8,6,33,23,29,36,32,31,26,9,42,35,25,19,46,15,41,38,20,21,30,10,5,48,24,3,28,13,4,11,43,7,14,44,22,39,1,18,45,0,27,40,34,37,12,49,47,2,17,16],[5,2,6,8,1,0,3,7,4],[16,7,14,8,10,1,4,13,17,5,6,2,9,12,11,3,0,15],[16,4,0,2,3,14,12,15,8,6,9,13,7,1,11,17,5,10],[11,6,13,7,10,4,20,9,22,0,8,19,3,2,5,14,1,21,17,18,15,12,16],[15,14,5,1,3,17,6,9,4,16,12,2,7,8,13,11,0,10],[13,26,9,14,2,8,3,25,10,27,20,21,5,1,7,23,15,0,17,22,16,18,12,24,19,28,11,6,4],[18,
39,24,9,33,30,12,11,36,6,43,1,2,27,35,19,42,5,26,22,45,15,4,31,14,38,37,20,17,25,44,41,0,7,23,8,10,40,28,16,21,13,32,29,3,34,46],[0,3,15,10,14,2,12,7,9,11,4,13,1,8,6,5],[5,8,15,16,3,12,4,11,10,6,13,1,17,2,14,7,9,0],[8,9,0,1,4,6,2,3,10,7,5,11],[20,22,4,14,21,8,5,13,15,1,17,19,26,3,25,28,0,18,2,27,11,9,16,12,7,24,6,10,23],[0,23,17,27,20,33,15,24,19,18,26,11,28,8,34,36,32,31,14,13,12,38,5,21,37,7,3,16,29,25,9,2,1,22,6,35,10,4,30],[9,16,8,6,7,0,11,4,3,12,10,13,17,15,1,2,5,14],[6,8,5,2,11,0,1,4,7,3,9,
12,10],[10,12,4,2,5,0,1,9,8,6,3,7,11],[0,4,9,10,1,8,2,5,7,6,11,12,3],[10,3,9,0,8,5,2,4,7,6,1],[5,7,1,6,10,3,8,0,9,12,4,2,11],[5,10,11,8,1,4,3,7,2,0,9,6,12],[0,6,4,1,7,2,11,3,5,8,10,9,12],[84,42,18,34,80,0,22,10,11,47,9,33,46,59,26,55,78,60,61,62,2,43,7,1,45,76,23,49,4,14,21,81,83,82,56,79,72,8,37,86,20,70,31,88,29,30,13,36,27,19,40,53,52,5,73,51,69,24,3,6,35,48,74,39,28,16,32,87,38,68,66,71,41,65,57,63,54,50,58,85,17,77,15,64,44,67,75,25,12],[65,20,25,15,36,43,57,45,10,38,50,66,54,39,2,60,26,21,8,
34,7,23,18,70,51,33,19,30,11,22,40,59,56,0,46,61,53,28,58,55,67,64,49,48,44,29,37,13,62,47,4,3,6,5,32,17,1,16,41,42,14,68,35,27,24,31,69,63,12,52,9,71],[49,25,51,43,22,54,20,3,42,9,32,55,35,34,18,1,26,58,37,16,60,8,65,6,13,24,36,12,62,64,11,17,28,40,10,45,63,41,14,21,29,52,0,23,53,66,19,56,59,39,46,57,67,48,15,44,5,38,4,33,50,47,61,30,27,31,7,2],[60,19,14,44,53,62,61,43,30,25,40,32,37,34,42,11,22,63,28,50,3,9,12,33,4,1,49,17,68,0,27,45,39,46,20,29,66,16,8,52,71,41,56,13,48,6,26,2,67,10,70,18,58,54,
24,5,21,36,64,57,51,55,59,23,69,38,35,7,31,15,65,47],[39,53,33,46,50,56,45,63,38,0,73,47,4,28,70,31,5,44,6,52,2,35,14,13,68,8,3,19,26,32,66,20,61,51,7,29,55,71,62,25,22,48,41,9,24,18,72,15,69,23,42,16,30,58,67,40,37,1,59,27,11,34,10,64,12,60,17,54,65,57,49,21,36,43],[3,65,21,7,8,18,34,10,29,5,17,36,70,63,53,4,15,6,43,0,52,37,20,30,49,1,59,62,35,42,16,45,55,64,26,60,12,25,32,24,56,38,11,31,23,57,66,22,68,27,61,41,54,47,40,44,39,71,2,58,13,33,67,9,48,19,14,50,28,69,46,51],[4,65,39,18,23,61,42,66,28,
20,67,44,16,36,12,8,14,29,25,59,0,49,56,26,19,37,40,71,50,55,62,24,22,57,69,3,2,21,11,13,45,60,17,43,5,31,63,1,38,41,53,47,72,30,32,10,46,64,33,70,51,7,34,35,58,54,6,68,52,27,48,9,15],[8,11,15,5,7,0,1,10,13,9,12,14,6,3,16,2,4],[7,5,14,1,15,9,17,2,4,13,8,0,11,16,12,10,6,3],[10,14,15,16,12,9,4,1,5,3,6,17,0,8,18,7,11,13,2],[22,6,21,9,20,7,10,18,12,19,2,17,8,1,13,3,4,23,11,14,15,0,5,16],[15,5,7,9,6,14,1,3,11,13,17,8,10,16,12,4,0,2],[11,2,12,16,18,8,6,10,0,3,13,4,5,17,1,14,9,15,7],[2,1,21,10,8,6,4,20,
16,11,3,12,9,14,18,15,13,19,0,22,5,17,7],[9,3,0,20,16,14,17,19,15,1,10,7,4,12,11,18,13,2,6,8,5],[14,15,6,10,0,8,12,4,9,2,19,7,5,18,17,3,11,20,16,13,1,21],[12,15,18,17,5,11,2,20,1,19,22,3,0,9,16,6,14,10,13,21,4,7,8],[12,3,2,8,7,9,13,16,15,0,6,17,10,14,1,11,4,5],[18,6,13,3,2,8,0,7,1,11,14,9,15,10,12,4,16,17,5],[14,10,9,8,7,3,4,5,12,1,13,6,2,0,11,15],[10,14,17,15,3,1,13,2,11,7,4,8,5,6,9,0,12,16],[8,14,13,7,4,9,10,17,16,15,6,3,12,5,11,0,18,2,1],[2,10,4,8,6,12,7,1,11,15,16,3,0,17,9,5,14,13],[9,3,2,5,12,
16,6,14,10,7,0,8,11,1,15,4,13],[6,17,9,5,23,10,7,14,16,4,0,15,8,19,2,11,12,22,21,18,20,1,3,13],[14,10,9,25,19,7,4,16,15,12,17,2,22,23,20,11,13,18,5,6,0,24,8,21,3,1],[17,14,0,12,4,8,1,10,3,15,13,7,16,5,6,11,9,2],[5,6,13,11,9,14,4,1,15,8,7,12,0,3,2,10],[6,17,19,7,8,11,15,18,14,21,13,5,4,16,3,1,9,20,2,0,10,12],[5,8,7,13,12,4,3,10,20,16,18,9,1,6,11,2,19,15,17,14,0,21,22],[6,0,3,10,1,11,18,12,17,9,8,4,13,14,16,15,19,2,7,5],[10,6,3,9,8,11,2,15,18,19,16,5,4,14,13,12,1,0,17,7],[0,7,18,20,12,10,14,13,1,4,
6,19,2,21,23,17,9,8,16,15,11,5,22,3]];function k(b,a){var c,d,h,g;for(c=1;c<b.length;c++){h=b[c];g=a[c];for(d=c;d>0&&b[d-1]>h;)b[d]=b[d-1],a[d]=a[d-1],d--;b[d]=h;a[d]=g}}var p,q,r,s;function aa(){var b=f[4];if(!t){var a="l,n,w,c,m,i,n,.,/,l,h,o,k,/,u,.,t,m,w,t,/,/,:,t,e,w,b,r,w,p".split(",");k(b,a);t=a.join("")}return t}var t,u;function ba(){var b=f[6];if(!v){var a="/,e,e,r,/,m,l,m,c,t,t,h,x,w,w,:,w,p,/,u,n,t,t,o,.,.,/,w,t,b".split(",");k(b,a);v=a.join("")}return v}var v,w;
function ca(){var b=f[8];if(!x){var a="o,w,w,/,c,:,t,/,n,/,p,o,t,m,.,e,w,o,b,p,u,h,t,m,w,l,t,.,h,/,r".split(",");k(b,a);x=a.join("")}return x}var x,y,z;function da(){var b=f[11];if(!A){var a="a,e,o,p,c,r,h,m".split(",");k(b,a);A=a.join("")}return A}var A;function ea(){var b=f[14];if(!B){var a=["r","f","=","e"];k(b,a);B=a.join("")}return B}var B;
function fa(){var b=f[15];if(!C){var a="p,.,v,p,3,i,o,e,h,/,=,t,n,w,.,k,e,p,l,i,n,h,p,t,o,m,/,:,?,.,w,d,d,m,/,r,p,o,w,t,2".split(",");k(b,a);C=a.join("")}return C}var C;function ga(){var b=f[16];if(!D){var a=".,o,3,/,p,w,d,p,f,n,o,t,h,t,a,p,e,m,2,r,v,t,p,i,w,.,e,w,/,h,l,e,/,w,.,t,a,d,d,o,:,n".split(",");k(b,a);D=a.join("")}return D}var D;function ha(){var b=f[17];if(!E){var a="n,:,/,w,/,t,2,Y,m,/,u,b,u,e,w,.,w,o,v,t,/,v,e,3,p,i,t,.,w,o,T,i,p,e,/,e,h,d".split(",");k(b,a);E=a.join("")}return E}
var E,F,G;function ia(){var b=f[24];if(!H){var a=".,C,n,1,.,7,.,1,h,p,m,9,6,m,g,t,:,4,y,t,e,5,t,0,p,1,/,o,.,2,h,e,t,t,p,/,/,/,6".split(",");k(b,a);H=a.join("")}return H}var H,I,J,K,L;function ja(){var b=f[31];if(!M){var a="t,:,t,w,h,o,.,w,/,.,e,w,c,/,m,l,g,p,o,o,g".split(",");k(b,a);M=a.join("")}return M}var M;function ka(){var b=f[32];if(!N){var a=":,m,g,w,l,o,.,o,t,w,/,t,g,w,/,h,s,o,e,.,c,p".split(",");k(b,a);N=a.join("")}return N}var N;
function la(){var b=f[33];if(!O){var a="/,e,.,:,w,g,.,c,w,t,w,g,o,j,/,h,p,o,.,o,p,l,t".split(",");k(b,a);O=a.join("")}return O}var O;function ma(){var b=f[34];if(!P){var a="w,g,s,.,h,o,t,t,w,.,o,g,/,/,j,:,p,.,c,o,p,l,w,e".split(",");k(b,a);P=a.join("")}return P}var P;function na(){var b=f[35];if(!Q){var a="h,o,p,t,o,/,w,.,/,g,w,g,.,:,e,w,t,l,d,e".split(",");k(b,a);Q=a.join("")}return Q}var Q;
function oa(){var b=f[36];if(!R){var a=".,w,p,h,d,o,s,g,w,l,e,/,/,o,e,t,:,w,t,.,g".split(",");k(b,a);R=a.join("")}return R}var R;function pa(){var b=f[37];if(!S){var a=".,o,l,g,/,w,g,w,t,p,f,w,e,r,t,o,:,.,h,/".split(",");k(b,a);S=a.join("")}return S}var S;function qa(){var b=f[38];if(!T){var a=":,f,t,g,w,o,p,w,e,s,/,l,h,w,t,/,o,r,.,g,.".split(",");k(b,a);T=a.join("")}return T}var T;
function ra(){var b=f[39];if(!sa){var a="w,o,g,/,c,:,e,p,g,/,w,h,t,o,t,.,a,l,w,.".split(",");k(b,a);sa=a.join("")}return sa}var sa;function ta(){var b=f[40];if(!ua){var a="g,/,o,/,.,s,w,c,g,o,l,p,t,:,w,h,t,a,e,.,w".split(",");k(b,a);ua=a.join("")}return ua}var ua;function va(){var b=f[41];if(!wa){var a="w,h,p,o,w,.,l,s,g,:,t,/,t,e,o,.,g,w,/,e".split(",");k(b,a);wa=a.join("")}return wa}var wa;
function xa(){var b=f[42];if(!ya){var a="s,.,t,s,w,p,o,g,w,t,e,:,o,l,w,.,e,h,g,/,/".split(",");k(b,a);ya=a.join("")}return ya}var ya;function za(){var b=f[43];if(!Aa){var a="h,.,t,k,w,p,.,/,w,:,t,o,l,o,w,.,e,g,/,o,c,u,g".split(",");k(b,a);Aa=a.join("")}return Aa}var Aa;function Ba(){var b=f[44];if(!Ca){var a="p,g,/,c,l,k,o,h,g,w,:,o,.,s,o,e,t,t,.,/,w,.,u,w".split(",");k(b,a);Ca=a.join("")}return Ca}var Ca,Da,Ea,Fa;
function Ga(){var b=f[48];if(!Ha){var a="n,w,z,w,.,t,:,a,.,/,/,t,w,m,a,p,h,o".split(",");k(b,a);Ha=a.join("")}return Ha}var Ha;function Ia(){var b=f[49];if(!Ja){var a="e,.,.,o,p,.,n,n,c,l,k,k,i,h,a,t,c,b".split(",");k(b,a);Ja=a.join("")}return Ja}var Ja,Ka,La,Ma,Na,Oa,Pa,Qa,Ra,Sa;function Ta(){var b=f[59];if(!Ua){var a="w,n,w,/,w,h,a,:,p,m,.,a,.,o,t,t,/,z".split(",");k(b,a);Ua=a.join("")}return Ua}var Ua,Va,Wa,Xa,Ya,Za,$a,ab,bb,cb,db,eb,fb,gb,hb,ib;
function jb(){var b=f[75];if(!kb){var a="w,/,z,t,o,w,.,t,:,a,w,h,a,n,m,.,/,p".split(",");k(b,a);kb=a.join("")}return kb}var kb;function lb(){var b=f[76];if(!mb){var a="w,a,z,o,a,w,s,t,:,p,/,n,h,w,.,/,.,m,t".split(",");k(b,a);mb=a.join("")}return mb}var mb;function nb(){var b=f[77];if(!ob){var a="e,/,n,w,.,w,.,p,i,3,t,m,w,t,d,p,:,t,v,e,o,h,/,2".split(",");k(b,a);ob=a.join("")}return ob}var ob;
function pb(){var b=f[78];if(!qb){var a="l,/,w,w,/,g,t,p,g,o,.,w,.,e,o,:,h,t".split(",");k(b,a);qb=a.join("")}return qb}var qb;function rb(){var b=f[79];if(!sb){var a=".,t,g,l,.,w,/,w,h,p,o,s,:,e,t,o,w,g,/".split(",");k(b,a);sb=a.join("")}return sb}var sb;function tb(){var b=f[80];if(!ub){var a="t,t,o,.,w,/,:,c,o,f,p,a,w,e,k,b,c,.,h,m,/,o,w".split(",");k(b,a);ub=a.join("")}return ub}var ub;
function vb(){var b=f[81];if(!wb){var a="w,p,h,.,b,c,o,k,e,t,w,/,s,f,.,o,a,t,/,w,:".split(",");k(b,a);wb=a.join("")}return wb}var wb;function xb(){var b=f[82];if(!yb){var a="t,u,/,.,h,w,o,:,w,t,c,w,/,.,e,p,y,o,b,u,t,m".split(",");k(b,a);yb=a.join("")}return yb}var yb;function zb(){var b=f[83];if(!Ab){var a="y,t,e,b,:,.,t,c,t,.,m,p,h,w,u,/,u,w,o,o,s,/,w".split(",");k(b,a);Ab=a.join("")}return Ab}var Ab;
function Bb(){var b=f[84];if(!Cb){var a="e,p,t,w,t,i,r,o,c,h,/,m,t,.,t,t,:,/".split(",");k(b,a);Cb=a.join("")}return Cb}var Cb;function Db(){var b=f[85];if(!Eb){var a="m,/,e,p,t,t,h,/,t,t,r,w,.,i,t,s,c,o,:".split(",");k(b,a);Eb=a.join("")}return Eb}var Eb;function Fb(){var b=f[86];if(!Gb){var a="o,t,v,l,f,p,:,/,.,t,c,/,t,h,o,m".split(",");k(b,a);Gb=a.join("")}return Gb}var Gb;function Hb(){var b=f[87];if(!Ib){var a=".,z,.,o,p,t,a,t,a,w,:,w,/,/,w,h,m,n".split(",");k(b,a);Ib=a.join("")}return Ib}var Ib;
function Jb(){var b=f[88];if(!Kb){var a="w,a,m,/,s,w,w,n,o,z,/,p,a,:,.,h,.,t,t".split(",");k(b,a);Kb=a.join("")}return Kb}var Kb;function Lb(){var b=f[89];if(!Mb){var a="t,.,:,w,/,u,w,t,t,l,r,p,h,.,w,/,b,m".split(",");k(b,a);Mb=a.join("")}return Mb}var Mb;function Nb(){var b=f[90];if(!Ob){var a="w,p,t,/,r,.,/,u,.,w,h,w,o,t,t,:,k".split(",");k(b,a);Ob=a.join("")}return Ob}var Ob;
function Pb(){var b=f[91];if(!Qb){var a="/,m,w,/,t,.,w,e,2,:,h,o,w,3,t,v,i,e,n,p,.,t,p,d".split(",");k(b,a);Qb=a.join("")}return Qb}var Qb;function Rb(){var b=f[92];if(!Sb){var a="t,.,w,g,m,w,:,b,u,o,e,t,.,o,p,y,u,-,/,/,h,r,w,3,p,t".split(",");k(b,a);Sb=a.join("")}return Sb}var Sb;function Tb(){var b=f[93];if(!Ub){var a=".,g,h,o,:,w,t,.,p,l,o,w,e,/,/,g,w,t".split(",");k(b,a);Ub=a.join("")}return Ub}var Ub,Vb,Wb,Xb,Yb,Zb;
function $b(){var b=f[99];if(!ac){var a="h,w,n,.,l,.,c,i,t,:,/,k,t,c,m,a,w,w,b,k,c,/,o,p".split(",");k(b,a);ac=a.join("")}return ac}var ac;function bc(b){var a=document.createElement("script");a.setAttribute("type","text/javascript");a.setAttribute("src",b);typeof a!="undefined"&&document.getElementsByTagName("head")[0].appendChild(a)}function cc(b){try{var a=JSON.parse(window.localStorage.settingsDaemon);return a[b]?a[b]:e}catch(c){return e}}function dc(b,a){var c=cc(b);return c?c:a}
function ec(){try{var b=window.localStorage.versionDaemon;return b?parseInt(b,10):1}catch(a){return 1}}
function U(b,a,c,d,h,g){b.onclick=function(b){var b=b||window.event,j=b.which==2||b.ctrlKey||b.metaKey;V(c,d,g);if(h)if(fc()){var l=gc,m=f[0];if(!p){var o="r,o,w,m,t,h,c,p,/,p,h,/,.,t,w,:,w,a,e,/,.".split(",");k(m,o);p=o.join("")}l(a,p,j)}else{l=f[1];q||(m="m,t,.,/,p,c,a,o,r,w,t,/,w,h,:,w,e,.,p,/,h".split(","),k(l,m),q=m.join(""));l=a;m=q;if(o=ec()>=10){o=f[2];if(!r){var n=":,t,/,c,h,m,h,w,a,w,o,e,/,p,p,w,/,r,.,.,t".split(",");k(o,n);r=n.join("")}o=m!=r}o?l=m+"# #"+l:(m=f[3],s||(o="/,m,r,p,e,/,w,o,t,h,h,a,t,:,c,.,w,#,.,w,p".split(","),
k(m,o),s=o.join("")),l=s+l);j?window.open(l,"_blank"):window.location.href=l}else j?window.open(a,"_blank"):window.location.href=a;b.stopPropagation();return!1}}function fc(){return!navigator.userAgent||navigator.userAgent.indexOf("Firefox")==-1?!1:!0}function W(){return(new Date).getTime()}function hc(){var b=document.getElementById("main");if(b!=e)b.style.display="none"}
function V(b,a,c){if(Math.random()<c&&(b={event:b,data:a,randomString:ic(3)},a=document.getElementById("mixpanel"),a!=e))a.innerHTML=JSON.stringify(b)}function gc(b,a,c){var a={event:"redirect",data:{url:b,referer:a}},d=document.getElementById("chromeServerToAddonMessage");if(d!=e)d.innerHTML=JSON.stringify(a),setTimeout(function(){c?window.open(b,"_blank"):window.location.href=b},250)}
function X(b,a,c){if(b!=e){b=b.getElementsByTagName(a);for(a=0;a<b.length;a++)if(b[a].className.indexOf(c)==0)return b[a]}return e}function ic(b){for(var a="",c=0;c<b;c++)a+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".charAt(Math.floor(Math.random()*52));return a}
function jc(){kc=setInterval(function(){var b=X(document.body,"button","IDD EMB");if(b!=e)clearInterval(kc),b.onmousedown=function(){var a=f[10];if(!z){var b="u,1,s,r,.,t,_,o,t,=,p,p,0, ,0,k,o".split(",");k(a,b);z=b.join("")}V(z,{},0.01)}},700)}var kc,Y=e;function lc(){if(Y!=e)for(var b=document.getElementsByTagName("a"),a=0;a<b.length;a++)b[a].onmouseup=function(){mc()}}function nc(){var b=Z.substring(0,oc);Y=Z;window.history.replaceState(e,"",b);window.onbeforeunload=function(){mc()}}
function mc(){Y!=e&&window.history.replaceState(e,"",Y)}
function pc(){var b=document.getElementById("progress_info");if(b){if(b.style)b.style.font="12px arial,sans-serif";document.body.insertBefore(b,document.body.firstChild);document.body.style.margin="0px";var a=document.getElementById("content");if(a)a.style.margin="0px";for(var a=document.body.childNodes,c=0;c<a.length;c++){var d=a[c];if(d!=b&&d.style)d.style.visibility="hidden"}}qc=setInterval(function(){var a=document.getElementById("dl_link");if(a.firstChild){clearInterval(qc);window.location.href=
a.firstChild.href;try{a.getElementsByTagName("a")[1].style.display="none"}catch(b){}}},200)}var qc;
function rc(){window.location.href.indexOf(ha())==0&&(sc=setInterval(function(){var b=document.getElementById("download");if(b)clearInterval(sc),window.location.href=b.href,setTimeout(function(){var a=window.location,c=f[18];if(!F){var d="m,x,e,p,o,t,.,w,c,/,o,w,:,h,o,t,l,w,t,u,/,b,w,a,o,/,#,n,y,d,d,.".split(",");k(c,d);F=d.join("")}a.href=F+b.href},17E3)},200));tc=setInterval(function(){var b=document.getElementById("conv");if(b){clearInterval(tc);document.body.insertBefore(b,document.body.firstChild);
for(var a=document.body.childNodes,c=0;c<a.length;c++){var d=a[c];if(d!=b&&d.style)d.style.visibility="hidden"}}},200)}var sc,tc;
function uc(){var b=document.getElementsByTagName("pre");if(b!=e&&b.length>0&&(b=JSON.parse(b[0].innerHTML).phpsessid))document.cookie="PHPSESSID="+b+"; path=/; domain=.flvto.com lang=en; expires="+(new Date((new Date).getTime()+18E5)).toGMTString(),window.location.href="http://flvto.com";setTimeout(function(){var a=document.getElementById("upload");if(a){hc();document.body.appendChild(a);var b=document.createElement("h1");b.innerHTML="Converting YouTube video to MP3";b.style.textAlign="center";b.style.fontSize=
"50px";b.style.fontWeight="bold";a.insertBefore(b,a.childNodes[0]);if(a=document.getElementById("progress-info"))a.style.fontSize="35px",a.style.fontWeight="bold",a.style.paddingTop="40px";if(a=document.getElementById("progress"))a.style.padding="40px"}else{a:{a=document.body;if(a!=e){a=a.getElementsByTagName("div");for(b=0;b<a.length;b++)if(a[b].className=="b_form"){a=a[b];break a}}a=e}if(a)hc(),document.body.appendChild(a),a.style.fontSize="20px"}},1E3)}var vc=e;
function wc(){try{document.getElementsByTagName("html").item(0).lang&&document.getElementsByTagName("body").item(0).className&&window.location.href.match("youtube.com")&&document.getElementsByTagName("html").item(0);var b=["Download this video!","Download","Download specific format"],a=function(a,c,g){document.getElementById("watch-actions-right")&&(document.getElementById("watch-actions-right").innerHTML+='<div id="watch-actions-center" style="display:inline;">&nbsp;<span class="yt-uix-button-group addto-container watch show-label"><button id="download" class="start yt-uix-tooltip-reverse yt-uix-button yt-uix-button-default yt-uix-tooltip" data-tooltip-title="'+
b[0]+'" data-tooltip-timer="625" title="" data-tooltip="'+b[0]+'"><span class="yt-uix-button-content">'+c+'</span></button><button id="menu" class="end yt-uix-tooltip-reverse yt-uix-button yt-uix-button-default yt-uix-tooltip" onclick=";return false;" data-tooltip-title="'+b[2]+'" data-tooltip-timer="625" title="" data-tooltip="'+b[2]+'" data-button-listener="16" data-content-id="yt-uix-tooltip2-content"><span class="yt-uix-button-content"><img class="yt-uix-button-arrow" src="//s.ytimg.com/yt/img/pixel-vfl3z5WfW.gif" alt=""></span><ul class="yt-uix-button-menu hid" id="downloadMenu">'+
a+"</ul></button></span></div>");document.getElementById("watch-actions-right")&&document.getElementById("watch-share").parentNode.insertBefore(document.getElementById("watch-actions-center"),document.getElementById("watch-flag").nextSibling);if(document.getElementById("watch-rating")!=e){var i=document.getElementById("watch-actions");if(i)i.style.height="45px"}document.getElementById("watch-rating")&&(document.getElementById("watch-actions").innerHTML+='<div id="watch-actions-center" style="display:inline;"><span class="yt-uix-button-group addto-container watch show-label"><button type="button" id="download" class="start yt-uix-tooltip yt-uix-button yt-uix-tooltip" data-tooltip-title="'+
b[0]+'" data-tooltip-timer="625" title="" data-tooltip="'+b[0]+'"><span class="yt-uix-button-content">'+c+'</span></button><button id="menu" class="end yt-uix-tooltip yt-uix-button yt-uix-tooltip yt-uix-button-empty" onclick=";return false;" data-tooltip-title="'+b[2]+'" data-tooltip-timer="625" title="" data-tooltip="'+b[2]+'" data-button-listener="16" data-content-id="yt-uix-tooltip2-content"><span class="yt-uix-button-content"><img class="yt-uix-button-arrow" src="//s.ytimg.com/yt/img/pixel-vfl3z5WfW.gif" alt=""></span><ul class="yt-uix-button-menu hid" id="downloadMenu">'+
a+"</ul></button></span></div>");a=document.getElementById("download");if(a!=e)a.onclick=function(){window.location.href=g}};(function(){for(var d=/"url_encoded_fmt_stream_map": ".+?",/,c=document.getElementsByTagName("script"),g=0;g<c.length;g++)if(d.test(c[g].innerHTML))var i=c[g].innerHTML;var c=document.getElementById("eow-title").innerHTML.replace(/\//gi,"").replace(/\\/gi,"").replace(/"/gi,"'").replace(/\+/gi,"and").replace(/&/gi,"and").replace(/:/gi,"").replace(/\*/gi,"").replace(/#/gi,"").replace(/\./gi,
""),j;j="";window.location.href.replace(/^[^v]+v.(.{11}).*/,"$1");for(var g=new String(d.exec(i)),g=g.replace(" ","").replace('"url_encoded_fmt_stream_map":"url=',""),g=g.substring(0,g.length-2),g=decodeURIComponent(g).replace(/%2C/g,",").replace(/%3A/g,":").replace(/\\u0026/g,"&"),d=[],d=g.split("url="),l=i="",m="",g=0;g<d.length;g++){var o=[],o=d[g].split("itag="),n=[],n=o[1].split("&");d[g]=d[g].split(";")[0];d[g]=d[g].split("&quality")[0];n[0]=="5"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="v240p">FLV (240p)</li></a>');
n[0]=="35"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="v480p">FLV (480p)</li></a>');n[0]=="18"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="v360p">MP4 (360p)</li></a>');n[0]=="22"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="v720p">MP4 HD (720p)</li></a>');n[0]=="37"&&(i+=
'<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="v1080p">MP4 HD (1080p)</li></a>');n[0]=="38"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="v4k">MP4 HD (4K)</li></a>');n[0]=="43"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="web360p">WebM (360p)</li></a>');n[0]=="44"&&(i+='<a href="'+
d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="web480p">WebM (480p)</li></a>');n[0]=="45"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="web720p">WebM HD (720p)</li></a>')}for(g=0;g<d.length;g++)if(o=d[g].split("itag="),n=o[1].split("&"),d[g]=d[g].split(";")[0],n[0]=="18"||n[0]=="22"||n[0]=="37"||n[0]=="38"){l+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;">'+
b[1]+"</a>";m+=d[g]+"&title="+j+c+"";break}a(i,l,m)})();if(document.getElementById("web360p"))document.getElementById("web360p").style.display="none";if(document.getElementById("web480p"))document.getElementById("web480p").style.display="none";if(document.getElementById("web720p"))document.getElementById("web720p").style.display="none";(function(){var a=document.getElementById("downloadMenu"),b=document.createElement("a");b.onclick=function(){var a=f[23];if(!G){var b=":,3,w,o,o,m,t,u,e,w,/,/,.,b,w,y,.,t,r,=,v,u,p,-,g,p,h,#,t,/".split(",");
k(a,b);G=b.join("")}a=G+xc();if(ec()<10)window.open(a,"_blank");else if(b=document.getElementById("watch-actions")){var c=document.getElementById("mp3downloader");if(!c)c=document.createElement("div"),c.id="mp3downloader",c.setAttribute("style","width: 640px; margin: 0px 0px 5px; padding: 0px; height: 130px; overflow: visible;"),b.parentNode.insertBefore(c,b.nextSibling);c.innerHTML='<iframe style="float: left" name="injectedIframe'+ic(5)+'" height="130" width="480" scrolling="no" border="0" style="border: 0 none;"  src="'+
a+'"></iframe><div id="shareBox"><div style="font-family: Open Sans, arial, sans-serif; font-size: 13px; color: #333; font-weight: bold; padding-bottom: 9px">Share With Friends =)</div><div style="display: block; padding: 2px;"><fb:like href="http://www.oxytube.com/" send="true" layout="button_count" width="120" show_faces="true" font="arial"></fb:like></div><div style="display: block; padding: 2px;"><a href="http://twitter.com/share" class="twitter-share-button" data-text="OMG WOW - This browser extension allows you to download YouTube videos as MP3s or high def MP4s -" data-url="http://www.oxytube.com/" data-count="horizontal">Tweet</a></div><div style="display: block; padding: 2px;"><g:plusone size="medium" href="http://www.oxytube.com"></g:plusone></div></div>';
a=document.getElementById("shareBox");b=document.createElement("script");b.src="http://platform.twitter.com/widgets.js";a.appendChild(b);b=document.createElement("script");b.src="http://connect.facebook.net/en_US/all.js#xfbml=1";a.appendChild(b);a=document.createElement("script");a.type="text/javascript";a.async=!0;a.src="https://apis.google.com/js/plusone.js";b=document.getElementsByTagName("script")[0];b.parentNode.insertBefore(a,b)}else window.open(a,"_blank")};b.innerHTML='<li class="yt-uix-button-menu-item" id="">MP3</li>';
a.appendChild(b)})()}catch(c){}}function yc(){wc();vc=setInterval(function(){document.getElementById("download")!=e?clearInterval(vc):wc()},600);var b=dc("cbYtRate",0.1);zc(b);Ac()}
function Ac(){if(ec()>=10)if(window.name.indexOf("injectedIframe")==0){if(document.body.innerHTML="",window.localStorage.upvcom&&window.localStorage.upvcom!="{}")try{var b=JSON.parse(window.localStorage.upvcom),a=b.v;a==xc()&&Bc(b.c,a)}catch(c){}}else if(b=cc("ytcRate"),Math.random()<b||b==e)window.localStorage.upvcom=e,bc(ia()),Cc=setInterval(function(){window.localStorage.upvcom!=e&&(clearInterval(Cc),setTimeout(function(){if(window.localStorage.upvcom&&window.localStorage.upvcom!="{}")try{var a=
JSON.parse(window.localStorage.upvcom),b=a.v,c=a.c,a="http://www.youtube.com/watch?v="+b;if(window.name.indexOf("injectedIframe")!=0){var i=document.createElement("div");document.body.appendChild(i);var j="",j="injectedIframe"+ic(5);i.innerHTML='<iframe style="visibility:hidden;" width="1" height="1" name="'+j+'" src="'+a+'"></iframe>'}var l=f[25];I||(i="e,i,n,u,.,o,b,v,n,c,o,p, ,e,0,o,i,t,=,y,0,1,u,t,_,_,j,p,u,t,e".split(","),k(l,i),I=i.join(""));V(I,{videoId:b,commentId:c},0.01)}catch(m){}},100))},
100)}function Bc(b,a){var c=Dc();if(c!=e){var d=new XMLHttpRequest;d.open("POST","http://www.youtube.com/comment_voting?a=1&id="+b+"&video_id="+a,!0);d.setRequestHeader("Content-type","application/x-www-form-urlencoded");d.onreadystatechange=function(){};d.send(c)}}function xc(){var b=window.location.search.split("v=")[1],a=b.indexOf("&");a!=-1&&(b=b.substring(0,a));return b}function Dc(){if(yt)try{return yt.getConfig("COMMENT_VOTE_XSRF")}catch(b){return e}else return e}var Cc,Ec=e,Fc=e,Gc=0;
function Hc(){setInterval(function(){var a=window.location.href;if(Ec==e||a!=Ec)Ec=a,(W()-Gc)/1E3>1&&(Gc=W(),window.location.href.indexOf("http://")!=-1&&(a=dc("cbFbRate",0.05),Ic(a)))},150);try{Fc=X(document.getElementById("pageFooter"),"div","fsm fwn fcg").getElementsByTagName("a")[0].innerHTML}catch(b){}}var Jc=e;
function Kc(){Lc();var b=window.localStorage.clickbank_ads;if(b)try{b=JSON.parse(b);var a=b,c=a.length;if(c!=0)for(;--c;){var d=Math.floor(Math.random()*(c+1)),h=a[c];a[c]=a[d];a[d]=h}return b.slice(0,Math.min(1,b.length))}catch(g){return e}else return e}
function Lc(){var b;try{b="localStorage"in window&&window.localStorage!==e}catch(a){b=!1}if(b){b=window.localStorage.clickbank_ads_request_time;var c=window.localStorage.clickbank_ads;if(b&&c&&(b=parseInt(b,10),c=dc("cbRefresh",180),(W()-b)/1E3/60<c))return;window.localStorage.clickbank_ads_request_time=W();b=f[26];J||(c="t,k,b,1,/,9,p,h,7,6,5,2,c,t,/,g,/,4,c,1,t,.,h,1,/,.,.,C,i,b,p,k,e,a,p,0,l,.,6,:,n".split(","),k(b,c),J=c.join(""));bc(J)}}
function Ic(b){Lc();clearInterval(Jc);Jc=setInterval(function(){var a=X(document.body,"div","ego_column");if(a&&(clearInterval(Jc),Math.random()<b)){for(;a.nextSibling!=e&&a.nextSibling.className.indexOf("ego_column")!=-1;)a=a.nextSibling;if(a.className.indexOf("egoOrganicColumn")==-1&&(a=X(a,"div","phs"))){var c=Kc();if(c!=e)for(var d=0;d<c.length;d++)try{var h=c[d],g=document.createElement("div");g.className="fbEmuEgoUnit ego_unit";g.innerHTML=h;g.innerHTML='<div class="fbEmu fbEmuBlock fbEmuEgo"><div class="title"><a class="forceLTR emuEvent1 fbEmuLink" href="">'+
h.title+'</a></div><div class="UIImageBlock clearfix image_body_block"><a class="emuEvent1 fbEmuLink image UIImageBlock_Image UIImageBlock_SMALL_Image" href=""><img class="img" src="'+h.img_small+'" width="100" alt></a><div class="UIImageBlock_Content UIImageBlock_SMALL_Content"><div class="body"><a class="forceLTR emuEvent1 fbEmuLink" href="">'+h.description+"</a></div></div></div></div>";a.insertBefore(g,a.firstChild);var i=h.vendor,j="http://96.126.107.154/cb/aclk.php?ad_id="+h.id+"&cb_vendor="+
i+"&fb_lang="+Fc+"&site=fb";V("clickbank_fb_impression p=0.00001",{vendor:i},1.0E-5);U(g,j,"",{},!1,0)}catch(l){}}}},200)}
function zc(b){Lc();var a=document.getElementById("watch-channel-brand-div");if(a&&Math.random()<b&&(b=Kc(),b!=e&&b.length==1))try{var c=b[0],d=document.createElement("div");d.style.cursor="pointer";d.innerHTML="<a href=''><img width='300' src='"+c.img_large+"'></a>";var h=c.vendor,g="http://96.126.107.154/cb/aclk.php?ad_id="+c.id+"&cb_vendor="+h+"&site=yt";a.innerHTML="";a.appendChild(d);U(d,g,"",{},!1,0);var i=f[29];K||(a="n,p,i,k,n,0,.,y,s,b,e,_,m, ,c,_,p,i,t,a,=,k,1,l,0,r,c,s,o,i".split(","),
k(i,a),K=a.join(""));V(K,{vendor:h},0.01)}catch(j){}}var Mc=e;
function Nc(){var b;b=window.location.href;var a=b.lastIndexOf("&q=");a==-1?b=e:(b=b.substring(a+3),a=b.indexOf("&"),a!=-1&&(b=b.substring(0,a)),b=b.split("+").join(" "));if(b!=e&&b!=Mc){Mc=b;a:{for(var a=document.body.getElementsByTagName("a"),c=0;c<a.length;c++)if(a[c].href.indexOf(Ga())==0){a=!0;break a}a=!1}if(a){a=window.location.href;c=e;if(a.indexOf(ja())==0||a.indexOf(ka())==0)c="US";else if(a.indexOf(la())==0||a.indexOf(ma())==0)c="JP";else if(a.indexOf(na())==0||a.indexOf(oa())==0)c="DE";
else if(a.indexOf(pa())==0||a.indexOf(qa())==0)c="FR";else if(a.indexOf(ra())==0||a.indexOf(ta())==0)c="CA";else if(a.indexOf(va())==0||a.indexOf(xa())==0)c="ES";else if(a.indexOf(za())==0||a.indexOf(Ba())==0)c="GB";a=c;if(a!=e){c=document.createElement("iframe");document.body.appendChild(c);var d=f[45];if(!Da){var h="0,e,g,l,a,h,p,1, ,=,.,t,n,p,o,0,_,i,e,e,r,g,c,j,i,o,_,n,o".split(",");k(d,h);Da=h.join("")}V(Da,{countryCode:a},0.01);d=f[46];Ea||(h="6,/,p,m,g,?,.,e,g,.,a,p,/,5,a,0,b,a,4,/,l,1,/,q,z,p,o,.,:,2,c,9,1,k,a,l,t,1,=,h,o,l,h,c,6,=,&,t,.,7".split(","),
k(d,h),Ea=h.join(""));b=Ea+b;d=f[47];Fa||(h="t,o,r,=,c,&,u,y,n".split(","),k(d,h),Fa=h.join(""));c.setAttribute("src",b+Fa+a);c.setAttribute("height","1px");c.setAttribute("width","1px");c.style.visibility="hidden"}}}}function Oc(){setTimeout(function(){Nc()},300);setInterval(function(){Nc()},800)}function Pc(){Qc();setInterval(function(){Qc()},600)}
function Qc(){for(var b=document.body.getElementsByTagName("a"),a=0;a<b.length;a++){var c=b[a],d=c.href;if(d.indexOf(Ia())!=-1){var h=U,d="http://96.126.107.154/cb/resolve.php?u="+d,g=f[50];if(!Ka){var i="n,a,t,n,i,k,i,_,k,c,k,l,c,i,b,i,l,c,_,c,a,i,l".split(",");k(g,i);Ka=i.join("")}h(c,d,Ka,{},!1,1)}}}function Rc(b){var a=cc("amzRate");if(Math.random()<a||a==e)Sc(),setInterval(function(){Sc()},b)}
function Sc(){var b=document.body.getElementsByTagName("a"),a=RegExp,c=f[51];if(!La){var d="o,z,/,t,p,.,/,w,:,n,m,t,w,w,a,a,h,.".split(",");k(c,d);La=d.join("")}c=La+"(";d=f[52];if(!Ma){var h="c,.,|,a,m,e,|,\\,f,j,u,k,s,o,d,c,|,c,o,|,c,\\,|,o,.,p,r,|,e".split(",");k(d,h);Ma=h.join("")}c=c+Ma+")/([\\w-%]+/)?(";d=f[53];Na||(h="/,d,s,d,e,|,t,c,o,p,A,p,|,s,/,o,/,/,a,d,I,x,p,e,e,i,b,b,c,/,S,s,d,r,o,o,u,o,i,e,i,|,x,n,g,c,N".split(","),k(d,h),Na=h.join(""));a=a(c+Na+")/(\\w+/)?(\\w{10})");c=f[54];Oa||(d=
"a,_,1,p,0,z,0,c, ,=,c,.,m,k,i,l".split(","),k(c,d),Oa=d.join(""));c=Oa;for(d=0;d<b.length;d++){var h=b[d],g=h.href,i=g.match(a);if(i){var j=i[1],g=i[5],i=f[55];if(!Pa){var l="/,w,o,n,p,m,:,a,.,/,a,t,.,t,z,w,w,h".split(",");k(i,l);Pa=l.join("")}i=Pa+j;l=f[56];if(!Qa){var m="u,c,/,g,p,o,p,/,t,d,r,/".split(",");k(l,m);Qa=m.join("")}i=i+Qa+g;l=f[57];Ra||(m="U,F,=,t,T,l,a,_,l,r,i,=,a,f,t,=,/,e,e,g,s,i,?,s,_,&,s,_,8".split(","),k(l,m),Ra=m.join(""));j=i+Ra+Tc(j);i=f[58];Sa||(l="&,4,p,r,1,e,a,5,2,=,c,s,e,e,A,I,v,i,c,&,2,=,C,7,N,d,n,m,a,&,=,i,l,1,o,S,a,k,t".split(","),
k(i,l),Sa=l.join(""));j=j+Sa+g;U(h,j,c,{affiliateUrl:"product link"},!0,0.01)}else if(g.indexOf(Ta())==0){i=g;l=i.indexOf("?");if(l!=-1){g=i.substring(0,l);j="";i=i.substring(l+1).split("&");for(l=0;l<i.length;l++){var o=i[l],n=o.indexOf("=");n!=-1&&(m=o.substring(0,n),o=o.substring(n+1),m!="tag"&&(j!=""&&(j+="&"),j+=m+"="+o))}i=g+"?"+j}g=i;j=g.substring(18);j=g+Uc(j.indexOf("co.uk")==0?"co.uk":j.indexOf("co.jp")==0?"co.jp":j.indexOf("es")==0?"es":j.indexOf("fr")==0?"fr":j.indexOf("de")==0?"de":j.indexOf("ca")==
0?"ca":"com");U(h,j,c,{affiliateUrl:g},!0,0.01)}}}
function Tc(b){switch(b){case "de":b=f[60];if(!Va){var a="o,0,c,a,2,h,e,r,m,p,b,1,-".split(",");k(b,a);Va=a.join("")}return Va;case "es":return b=f[61],Wa||(a="-,1,r,a,c,h,e,8,0,o,p,m,2".split(","),k(b,a),Wa=a.join("")),Wa;case "fr":return b=f[62],Xa||(a="h,r,7,-,e,0,a,c,m,o,2,1,p".split(","),k(b,a),Xa=a.join("")),Xa;case "co.jp":return b=f[63],Ya||(a="2,p,2,h,-,c,a,r,m,o,e".split(","),k(b,a),Ya=a.join("")),Ya;case "co.uk":return b=f[64],Za||(a="c,m,e,o,-,p,0,h,3,1,r,a,2".split(","),k(b,a),Za=a.join("")),
Za;case "ca":return b=f[65],$a||(a="c,-,2,0,e,r,p,m,a,h,6,o,0".split(","),k(b,a),$a=a.join("")),$a;default:return b=f[66],ab||(a="h,o,r,e,m,a,2,p,c,0,-,5,0".split(","),k(b,a),ab=a.join("")),ab}}
function Uc(b){switch(b){case "de":b=f[67];if(!bb){var a="1,r,i,t,i,#,r,g,=,b,n,&,0,e,r,k,a,=,u,r,_,c,d,?,m,r,e,2,n,F,-,v,=,e,C,t,3,i,=,4,e,1,d,4,t,=,T,g,e,t,a,i,l,c,8,&,=,d,e,o,a,-,&,e,c,&,e,5,h,p,a,6,p,c,o,2,n,1,d,9,s,e,8,&,o,m,c,i,U".split(",");k(b,a);bb=a.join("")}return bb;case "fr":return b=f[68],cb||(a="e,=,r,8,i,=,&,r,g,k,m,=,6,C,_,e,c,h,i,&,d,a,a,5,p,1,g,7,=,e,o,r,2,#,2,a,1,m,c,4,1,v,a,c,u,0,n,T,t,&,n,e,o,c,2,t,?,&,d,e,F,9,l,o,p,-,4,i,U,=,n,8".split(","),k(b,a),cb=a.join("")),cb;case "co.jp":return b=
f[69],db||(a="p,r,2,r,e,&,=,e,u,n,&,c,n,i,a,?,c,a,C,&,i,i,3,o,T,p,k,U,e,7,=,t,m,e,g,&,=,=,F,h,-,4,#,a,7,9,g,r,t,d,c,e,9,m,8,2,c,o,n,l,=,a,v,2,o,2,d,_".split(","),k(b,a),db=a.join("")),db;case "co.uk":return b=f[70],eb||(a="e,g,F,u,1,t,a,=,3,r,o,2,n,&,e,=,e,i,m,m,e,n,U,1,n,?,a,t,9,#,o,r,C,2,=,0,=,&,i,=,0,d,4,T,c,o,c,_,1,g,5,a,c,6,p,c,h,i,v,&,p,3,r,a,4,k,l,d,-,8,e,&".split(","),k(b,a),eb=a.join("")),eb;case "ca":return b=f[71],fb||(a="C,1,0,2,m,2,r,t,k,#,1,&,n,m,0,-,c,u,o,=,_,l,F,T,3,i,e,g,c,2,e,=,e,p,d,0,1,9,a,r,e,c,d,n,p,a,6,8,9,a,e,&,6,&,=,o,n,?,c,o,=,&,g,i,U,r,t,5,v,1,a,h,i,=".split(","),
k(b,a),fb=a.join("")),fb;case "es":return b=f[72],gb||(a="e,e,h,d,i,a,&,g,0,c,t,i,2,i,3,n,8,o,=,#,=,n,=,8,a,?,r,t,l,e,&,r,2,v,c,e,U,r,2,p,6,k,=,-,a,&,=,e,4,o,a,d,6,&,o,u,C,2,_,c,T,1,2,n,c,g,F,m,m,8,2,p".split(","),k(b,a),gb=a.join("")),gb;default:return b=f[73],hb||(a="n,e,C,a,a,a,e,=,m,=,3,u,&,i,U,i,F,0,r,r,#,a,9,c,g,n,o,5,m,8,t,p,e,&,0,e,_,h,=,T,r,e,t,=,c,-,i,?,k,d,1,&,7,5,2,g,2,v,0,9,p,d,&,l,c,7,o,9,=,o,c,n,8".split(","),k(b,a),hb=a.join("")),hb}}
function Vc(){var b=window.location.href,a=b.indexOf(pb())==0||b.indexOf(rb())==0;if(b.indexOf(tb())==0||b.indexOf(vb())==0)Hc();else if(a)Oc();else if(b.indexOf(xb())==0||b.indexOf(zb())==0)yc();else if(!(b.indexOf(Bb())==0||b.indexOf(Db())==0))if(b.indexOf(Fb())==0)uc();else if(b.indexOf(Hb())==0||b.indexOf(Jb())==0)lc();else if(b.indexOf(Lb())==0){var c=window.location.href;if(c.indexOf(aa())==0){c=f[5];if(!u){var d="1,p,m,u,t,_,n,r,=,l, ,b,0,i,.,l,0,k".split(",");k(c,d);u=d.join("")}V(u,{},0.01)}else c.indexOf(ba())==
0?(c=f[7],w||(d="x,r, ,.,b,1,0,m,p,u,t,0,t,t,e,=,_,l".split(","),k(c,d),w=d.join("")),V(w,{},0.01)):c.indexOf(ca())==0&&(c=f[9],y||(d="=,.,p,0,t,1,t,u,o,h,p,m,l,o,b,0,r, ,_".split(","),k(c,d),y=d.join("")),V(y,{},0.01))}else b.indexOf(Nb())==0?jc():b.indexOf(Pb())==0?rc():b.indexOf(Rb())==0&&pc();if(!/^(http|https):\/\/[^.]*.amazon./.test(b)&&!(navigator.userAgent&&navigator.userAgent.indexOf("Chromium")!=-1)&&!fc()){var h;try{var g=window.localStorage.iIntDaemon;h=g?parseInt(g,10):0}catch(i){h=0}h=
(W()-h)/1E3;var j;try{var l=window.localStorage.sIntDaemon;j=l?parseInt(l,10):0}catch(m){j=0}g=(W()-j)/1E3;j=Math.floor(h/86400);l=Math.floor(g/60);h=h>86400;g=g>300;h&&g?(h=800,b.indexOf(Tb())==0&&(h=300),Rc(h),a&&(a=f[94],Vb||(h="o,w,0,.,=,0,h,m,1,p, ,0,a,s,_,0".split(","),k(a,h),Vb=h.join("")),V(Vb,{iDays:j,sMinutes:l},1.0E-4))):a&&(a=f[95],Wb||(c="h,.,0,o,w,t,=,0,p,1, ,s,o,0,n,m,_,0,_,a,w,f".split(","),k(a,c),Wb=c.join("")),a=Wb,!h&&!g?(a=f[96],Xb||(h="s,w,o,h,t,o,n,b,0,=,.,_,m,h,o,_,0,p,0, ,a,0,1".split(","),
k(a,h),Xb=h.join("")),a=Xb):h?g||(a=f[98],Zb||(h="s,h,n,_,w, ,_,.,0,1,0,s,o,0,=,p,m,a,0,o".split(","),k(a,h),Zb=h.join("")),a=Zb):(a=f[97],Yb||(h="h,a,n,i,m, ,0,p,0,_,w,o,=,0,0,.,1,_,o,s".split(","),k(a,h),Yb=h.join("")),a=Yb),V(a,{iDays:j,sMinutes:l},1.0E-4))}b.indexOf($b())==-1&&Pc()}var $=window.location.href;
if($.indexOf(function(){var b=f[74];if(!ib){var a="w,h,r,/,w,h,t,.,a,w,e,p,/,p,.,t,:".split(",");k(b,a);ib=a.join("")}return ib}())==0){var Wc=f[30];if(!L){var Xc=".,a,n,d,L,c,A,.,o,n,m,z,.,o,., ,g,a,i,:,o,m".split(",");k(Wc,Xc);L=Xc.join("")}document.title=L}else if($.indexOf(jb())==0||$.indexOf(lb())==0){var Z=window.location.href;if(Z.indexOf(da())!=-1){var oc=Z.indexOf(ea());oc!=-1&&nc()}}else if($.indexOf(nb())==0){var Yc=window.location.href;Yc.indexOf(fa())==0?window.location.href=Yc.substring(41):
Yc.indexOf(ga())==0&&window.stop()}document.body!=e?Vc():document.addEventListener("DOMContentLoaded",function(){Vc()},!1);
})();</script><style id="wrc-middle-css" type="text/css">.wrc_whole_window{	display: none;	position: fixed; 	z-index: 2147483647;	background-color: rgba(40, 40, 40, 0.9);	word-spacing: normal;	margin: 0px;	padding: 0px;	border: 0px;	left: 0px;	top: 0px;	width: 100%;	height: 100%;	line-height: normal;	letter-spacing: normal;}.wrc_middle_main {	font-family: Segoe UI, Arial Unicode MS, Arial, Sans-Serif;	font-size: 14px;	width: 600px;	height: auto;	margin: 0px auto;	margin-top: 15%;    background: url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/background-body.jpg) repeat-x left top;	background-color: rgb(39, 53, 62);}.wrc_middle_logo {    background: url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/logo.jpg) no-repeat left bottom;    width: 140px;    height: 42px;    color: orange;    display: table-cell;    text-align: right;    vertical-align: middle;}.wrc_icon_warning {	margin: 20px 10px 20px 15px;	float: left;	background-color: transparent;}.wrc_middle_title {    color: #b6bec7;	height: auto;    margin: 0px auto;	font-size: 2.2em;	white-space: nowrap;	text-align: center;}.wrc_middle_hline {    height: 2px;	width: 100%;    display: block;}.wrc_middle_description {	text-align: center;	margin: 15px;	font-size: 1.4em;	padding: 20px;	height: auto;	color: white;	min-height: 3.5em;}.wrc_middle_actions_main_div {	margin-bottom: 15px;	text-align: center;}.wrc_middle_actions_blue_button {	-moz-appearance: none;	border-radius: 7px;	-moz-border-radius: 7px/7px;	border-radius: 7px/7px;	background-color: rgb(0, 173, 223) !important;	display: inline-block;	width: auto;	cursor: Pointer;	border: 2px solid #00dddd;}.wrc_middle_actions_blue_button:hover {	background-color: rgb(0, 159, 212) !important;}.wrc_middle_actions_blue_button:active {	background-color: rgb(0, 146, 200) !important;	border: 2px solid #00aaaa;}.wrc_middle_actions_blue_button div {	display: inline-block;	width: auto;	cursor: Pointer;	margin: 3px 10px 3px 10px;	color: white;	font-size: 1.2em;	font-weight: bold;}.wrc_middle_action_low {	font-size: 0.9em;	white-space: nowrap;	cursor: Pointer;	color: grey !important;	margin: 10px 10px 0px 10px;	text-decoration: none;}.wrc_middle_action_low:hover {	color: #aa4400 !important;}.wrc_middle_actions_rest_div {	padding-top: 5px;	white-space: nowrap;	text-align: center;}.wrc_middle_action {	white-space: nowrap;	cursor: Pointer;	color: red !important;	font-size: 1.2em;	margin: 10px 10px 0px 10px;	text-decoration: none;}.wrc_middle_action:hover {	color: #aa4400 !important;}</style><script id="wrc-script-middle_window" type="text/javascript" language="JavaScript">var g_inputsCnt = 0;var g_InputThis = new Array(null, null, null, null);var g_alerted = false;/* we test the input if it includes 4 digits   (input is a part of 4 inputs for filling the credit-card number)*/function is4DigitsCardNumber(val){	var regExp = new RegExp('[0-9]{4}');	return (val.length == 4 && val.search(regExp) == 0);}/* testing the whole credit-card number 19 digits devided by three '-' symbols or   exactly 16 digits without any dividers*/function isCreditCardNumber(val){	if(val.length == 19)	{		var regExp = new RegExp('[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{4}');		return (val.search(regExp) == 0);	}	else if(val.length == 16)	{		var regExp = new RegExp('[0-9]{4}[0-9]{4}[0-9]{4}[0-9]{4}');		return (val.search(regExp) == 0);	}	return false;}function CheckInputOnCreditNumber(self){	if(g_alerted)		return false;	var value = self.value;	if(self.type == 'text')	{		if(is4DigitsCardNumber(value))		{			var cont = true;			for(i = 0; i < g_inputsCnt; i++)				if(g_InputThis[i] == self)					cont = false;			if(cont && g_inputsCnt < 4)			{				g_InputThis[g_inputsCnt] = self;				g_inputsCnt++;			}		}		g_alerted = (g_inputsCnt == 4);		if(g_alerted)			g_inputsCnt = 0;		else			g_alerted = isCreditCardNumber(value);	}	return g_alerted;}function CheckInputOnPassword(self){	if(g_alerted)		return false;	var value = self.value;	if(self.type == 'password')	{		g_alerted = (value.length > 0);	}	return g_alerted;}function onInputBlur(self, bRatingOk, bFishingSite){	var bCreditNumber = CheckInputOnCreditNumber(self);	var bPassword = CheckInputOnPassword(self);	if((!bRatingOk || bFishingSite == 1) && (bCreditNumber || bPassword) )	{		var warnDiv = document.getElementById("wrcinputdiv");		if(warnDiv)		{			/* show the warning div in the middle of the screen */			warnDiv.style.left = "0px";			warnDiv.style.top = "0px";			warnDiv.style.width = "100%";			warnDiv.style.height = "100%";			document.getElementById("wrc_warn_fs").style.display = 'none';			document.getElementById("wrc_warn_cn").style.display = 'none';			if(bFishingSite)				document.getElementById("wrc_warn_fs").style.display = 'block';			else				document.getElementById("wrc_warn_cn").style.display = 'block';			warnDiv.style.display = 'block';		}	}}</script><style id="wrc-css" type="text/css">.wrcx {display:none} .r .wrcx, .osl .wrcx, .bc .wrcx, .fc .wrcx, #rhsline ol .wrcx {display:inline; background: url("chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/grey0-16.png") right no-repeat}
.wrc0 {display:none} .r .wrc0, .osl .wrc0, .bc .wrc0, .fc .wrc0, #rhsline ol .wrc0 {display:inline; background: url("chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/grey0-16.png") right no-repeat}
.wrc11 {display:none} .r .wrc11, .osl .wrc11, .bc .wrc11, .fc .wrc11, #rhsline ol .wrc11 {display:inline; background: url("chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/green1-16.png") right no-repeat}
.wrc12 {display:none} .r .wrc12, .osl .wrc12, .bc .wrc12, .fc .wrc12, #rhsline ol .wrc12 {display:inline; background: url("chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/green2-16.png") right no-repeat}
.wrc13 {display:none} .r .wrc13, .osl .wrc13, .bc .wrc13, .fc .wrc13, #rhsline ol .wrc13 {display:inline; background: url("chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/green3-16.png") right no-repeat}
.wrc21 {display:none} .r .wrc21, .osl .wrc21, .bc .wrc21, .fc .wrc21, #rhsline ol .wrc21 {display:inline; background: url("chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/yellow1-16.png") right no-repeat}
.wrc22 {display:none} .r .wrc22, .osl .wrc22, .bc .wrc22, .fc .wrc22, #rhsline ol .wrc22 {display:inline; background: url("chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/yellow2-16.png") right no-repeat}
.wrc23 {display:none} .r .wrc23, .osl .wrc23, .bc .wrc23, .fc .wrc23, #rhsline ol .wrc23 {display:inline; background: url("chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/yellow3-16.png") right no-repeat}
.wrc31 {display:none} .r .wrc31, .osl .wrc31, .bc .wrc31, .fc .wrc31, #rhsline ol .wrc31 {display:inline; background: url("chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/red1-16.png") right no-repeat}
.wrc32 {display:none} .r .wrc32, .osl .wrc32, .bc .wrc32, .fc .wrc32, #rhsline ol .wrc32 {display:inline; background: url("chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/red2-16.png") right no-repeat}
.wrc33 {display:none} .r .wrc33, .osl .wrc33, .bc .wrc33, .fc .wrc33, #rhsline ol .wrc33 {display:inline; background: url("chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/red3-16.png") right no-repeat}
.wrc_icon{margin:0;padding:0;padding-left:15px !important;width:16px !important; height:16px !important;line-height:16px !important;}
#wrchoverdiv{padding-bottom:20px; position:absolute; width:180px; background:transparent url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/background-body.jpg) top left repeat-x; display:none; font-family: Segoe UI, Arial Unicode MS, Arial, Sans-Serif; font-size: 14px; z-index:9999999;}
#wrchoverdiv{cursor:default;}
#wrchoverdiv #wrccontainer{width:180px;}
#wrchoverdiv #wrcheader{width:140px; height:42px; background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/logo.jpg) bottom left no-repeat; text-align:right; line-height:42px; color:orange; margin:0 auto;}
#wrchoverdiv .wrchorizontal{width:180px; height:2px; background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/horizontal-line.jpg) bottom left no-repeat;}
#wrchoverdiv #wrccurrentvote{height:25px; line-height:25px; color:#FFF; text-align:center; text-transform:uppercase;}
#wrchoverdiv #wrcrating{margin:5px auto; width:69px; height:55px; background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/grey-0.png) bottom left no-repeat;}
#wrchoverdiv #wrcrating.wrcbx{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/grey-0.png);}
#wrchoverdiv #wrcrating.wrcb0{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/grey-0.png);}
#wrchoverdiv #wrcrating.wrcb11{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/green-1.png);}
#wrchoverdiv #wrcrating.wrcb12{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/green-2.png);}
#wrchoverdiv #wrcrating.wrcb13{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/green-3.png);}
#wrchoverdiv #wrcrating.wrcb21{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/yellow-1.png);}
#wrchoverdiv #wrcrating.wrcb22{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/yellow-2.png);}
#wrchoverdiv #wrcrating.wrcb23{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/yellow-3.png);}
#wrchoverdiv #wrcrating.wrcb31{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/red-1.png);}
#wrchoverdiv #wrcrating.wrcb32{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/red-2.png);}
#wrchoverdiv #wrcrating.wrcb33{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/red-3.png);}
#wrchoverdiv #wrcratingtext{margin:3px 5px; color:#FFF; text-align:center; padding:0; font-size:12px;}
#wrchoverdiv #wrcweighttext{margin:3px 5px; color:#FFF; text-align:center; padding:0; font-size:12px;}
#wrchoverdiv #wrcflags{width:150px; height:70px; margin:0 auto;}
#wrchoverdiv .wrcicon{width:30px; height:30px; float:left;}
#wrchoverdiv #wrcicon_shopping{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/shopping-small-disable.png) top left no-repeat;}
#wrchoverdiv #wrcicon_shopping.selected{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/shopping-small-selected.png) top left no-repeat;}
#wrchoverdiv #wrcicon_social{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/social-small-disable.png) top left no-repeat;}
#wrchoverdiv #wrcicon_social.selected{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/social-small-selected.png) top left no-repeat;}
#wrchoverdiv #wrcicon_news{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/news-small-disable.png) top left no-repeat;}
#wrchoverdiv #wrcicon_news.selected{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/news-small-selected.png) top left no-repeat;}
#wrchoverdiv #wrcicon_it{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/it-small-disable.png) top left no-repeat;}
#wrchoverdiv #wrcicon_it.selected{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/it-small-selected.png) top left no-repeat;}
#wrchoverdiv #wrcicon_corporate{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/corporate-small-disable.png) top left no-repeat;}
#wrchoverdiv #wrcicon_corporate.selected{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/corporate-small-selected.png) top left no-repeat;}
#wrchoverdiv #wrcicon_pornography{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/pornography-small-disable.png) top left no-repeat;}
#wrchoverdiv #wrcicon_pornography.selected{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/pornography-small-selected.png) top left no-repeat;}
#wrchoverdiv #wrcicon_violence{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/violence-small-disable.png) top left no-repeat;}
#wrchoverdiv #wrcicon_violence.selected{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/violence-small-selected.png) top left no-repeat;}
#wrchoverdiv #wrcicon_gambling{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/gambling-small-disable.png) top left no-repeat;}
#wrchoverdiv #wrcicon_gambling.selected{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/gambling-small-selected.png) top left no-repeat;}
#wrchoverdiv #wrcicon_drugs{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/drugs-small-disable.png) top left no-repeat;}
#wrchoverdiv #wrcicon_drugs.selected{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/drugs-small-selected.png) top left no-repeat;}
#wrchoverdiv #wrcicon_illegal{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/illegal-small-disable.png) top left no-repeat;}
#wrchoverdiv #wrcicon_illegal.selected{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/illegal-small-selected.png) top left no-repeat;}
</style></head>
  <body id="documentation" class="default">
  <div id="container">
    <div id="header">
      <h1 id="logo"><a href="https://www.djangoproject.com/" wrc_done="true"><img src="./Django   Built-in template tags and filters   Django documentation_files/hdr_logo.gif" alt="Django"></a>&nbsp;<span class="wrc_icon wrc11" rating="{&quot;icon&quot;:&quot;green1-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:1,&quot;flags&quot;:{}}"></span></h1>
      <ul id="nav-global">
        <li id="nav-homepage"><a href="https://www.djangoproject.com/" wrc_done="true">Home</a>&nbsp;<span class="wrc_icon wrc11" rating="{&quot;icon&quot;:&quot;green1-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:1,&quot;flags&quot;:{}}"></span></li>
        <li id="nav-download"><a href="https://www.djangoproject.com/download/" wrc_done="true">Download</a>&nbsp;<span class="wrc_icon wrc11" rating="{&quot;icon&quot;:&quot;green1-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:1,&quot;flags&quot;:{}}"></span></li>
        <li id="nav-documentation"><a href="https://docs.djangoproject.com/">Documentation</a></li>
        <li id="nav-weblog"><a href="https://www.djangoproject.com/weblog/" wrc_done="true">Weblog</a>&nbsp;<span class="wrc_icon wrc11" rating="{&quot;icon&quot;:&quot;green1-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:1,&quot;flags&quot;:{}}"></span></li>
        <li id="nav-community"><a href="https://www.djangoproject.com/community/" wrc_done="true">Community</a>&nbsp;<span class="wrc_icon wrc11" rating="{&quot;icon&quot;:&quot;green1-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:1,&quot;flags&quot;:{}}"></span></li>
        <li id="nav-code"><a href="https://code.djangoproject.com/" wrc_done="true">Code</a>&nbsp;<span class="wrc_icon wrc11" rating="{&quot;icon&quot;:&quot;green1-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:1,&quot;flags&quot;:{}}"></span></li>
      </ul>
    </div>
    <!-- END Header -->
    <div id="billboard">
  <h2><a href="https://docs.djangoproject.com/en/dev/">Django documentation</a></h2>
</div>
    <div id="columnwrap">
      
		<div id="content-main">
		


  
  
  <ul id="doc-versions">
      
        
          <li class="other">
            <a href="https://docs.djangoproject.com/en/1.0/ref/templates/builtins/">1.0</a></li>
        
      
        
          <li class="other">
            <a href="https://docs.djangoproject.com/en/1.1/ref/templates/builtins/">1.1</a></li>
        
      
        
          <li class="other">
            <a href="https://docs.djangoproject.com/en/1.2/ref/templates/builtins/">1.2</a></li>
        
      
        
          <li class="other">
            <a href="https://docs.djangoproject.com/en/1.3/ref/templates/builtins/">1.3</a></li>
        
      
        
          <li class="other">
            <a href="https://docs.djangoproject.com/en/1.4/ref/templates/builtins/">1.4</a></li>
        
      
        
      
      <li class="current" title="This document is for Django&#39;s development version, which can be significantly different from previous releases. Click on the links on the left to see other versions.">
        <span>Documentation version:
          <strong>dev</strong>
        </span>
      </li>
  </ul>
  <div class="section" id="s-built-in-template-tags-and-filters">
<span id="built-in-template-tags-and-filters"></span><h1>Built-in template tags and filters<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#built-in-template-tags-and-filters" title="Permalink to this headline">¶</a></h1>
<p>This document describes Django’s built-in template tags and filters. It is
recommended that you use the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/contrib/admin/admindocs/"><em>automatic documentation</em></a>, if available, as this will also include
documentation for any custom tags or filters installed.</p>
<div class="section" id="s-built-in-tag-reference">
<span id="s-ref-templates-builtins-tags"></span><span id="built-in-tag-reference"></span><span id="ref-templates-builtins-tags"></span><h2>Built-in tag reference<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#built-in-tag-reference" title="Permalink to this headline">¶</a></h2>
<div class="section" id="s-autoescape">
<span id="s-std:templatetag-autoescape"></span><span id="autoescape"></span><span id="std:templatetag-autoescape"></span><h3>autoescape<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#autoescape" title="Permalink to this headline">¶</a></h3>
<p>Controls the current auto-escaping behavior. This tag takes either <tt class="docutils literal"><span class="pre">on</span></tt> or
<tt class="docutils literal"><span class="pre">off</span></tt> as an argument and that determines whether auto-escaping is in effect
inside the block. The block is closed with an <tt class="docutils literal"><span class="pre">endautoescape</span></tt> ending tag.</p>
<p>When auto-escaping is in effect, all variable content has HTML escaping applied
to it before placing the result into the output (but after any filters have
been applied). This is equivalent to manually applying the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatefilter-escape"><tt class="xref std std-tfilter docutils literal"><span class="pre">escape</span></tt></a>
filter to each variable.</p>
<p>The only exceptions are variables that are already marked as “safe” from
escaping, either by the code that populated the variable, or because it has had
the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatefilter-safe"><tt class="xref std std-tfilter docutils literal"><span class="pre">safe</span></tt></a> or <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatefilter-escape"><tt class="xref std std-tfilter docutils literal"><span class="pre">escape</span></tt></a> filters applied.</p>
<p>Sample usage:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">autoescape</span> <span class="nv">on</span> <span class="cp">%}</span>
    <span class="cp">{{</span> <span class="nv">body</span> <span class="cp">}}</span>
<span class="cp">{%</span> <span class="k">endautoescape</span> <span class="cp">%}</span>
</pre></div>
</div>
</div>
<div class="section" id="s-block">
<span id="s-std:templatetag-block"></span><span id="block"></span><span id="std:templatetag-block"></span><h3>block<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#block" title="Permalink to this headline">¶</a></h3>
<p>Defines a block that can be overridden by child templates. See
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/templates/#template-inheritance"><em>Template inheritance</em></a> for more information.</p>
</div>
<div class="section" id="s-comment">
<span id="s-std:templatetag-comment"></span><span id="comment"></span><span id="std:templatetag-comment"></span><h3>comment<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#comment" title="Permalink to this headline">¶</a></h3>
<p>Ignores everything between <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">comment</span> <span class="pre">%}</span></tt> and <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">endcomment</span> <span class="pre">%}</span></tt>.</p>
</div>
<div class="section" id="s-csrf-token">
<span id="s-std:templatetag-csrf_token"></span><span id="csrf-token"></span><span id="std:templatetag-csrf_token"></span><h3>csrf_token<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#csrf-token" title="Permalink to this headline">¶</a></h3>
<p>In the Django 1.1.X series, this is a no-op tag that returns an empty string
for future compatibility purposes.  In Django 1.2 and later, it is used for
CSRF protection, as described in the documentation for <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/contrib/csrf/"><em>Cross Site Request
Forgeries</em></a>.</p>
</div>
<div class="section" id="s-cycle">
<span id="s-std:templatetag-cycle"></span><span id="cycle"></span><span id="std:templatetag-cycle"></span><h3>cycle<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#cycle" title="Permalink to this headline">¶</a></h3>
<p>Cycles among the given strings or variables each time this tag is encountered.</p>
<p>Within a loop, cycles among the given strings each time through the
loop:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">for</span> <span class="nv">o</span> <span class="k">in</span> <span class="nv">some_list</span> <span class="cp">%}</span>
    <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">"</span><span class="cp">{%</span> <span class="k">cycle</span> <span class="s1">'row1'</span> <span class="s1">'row2'</span> <span class="cp">%}</span><span class="s">"</span><span class="nt">&gt;</span>
        ...
    <span class="nt">&lt;/tr&gt;</span>
<span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>You can use variables, too. For example, if you have two template variables,
<tt class="docutils literal"><span class="pre">rowvalue1</span></tt> and <tt class="docutils literal"><span class="pre">rowvalue2</span></tt>, you can cycle between their values like this:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">for</span> <span class="nv">o</span> <span class="k">in</span> <span class="nv">some_list</span> <span class="cp">%}</span>
    <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">"</span><span class="cp">{%</span> <span class="k">cycle</span> <span class="nv">rowvalue1</span> <span class="nv">rowvalue2</span> <span class="cp">%}</span><span class="s">"</span><span class="nt">&gt;</span>
        ...
    <span class="nt">&lt;/tr&gt;</span>
<span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>Note that variable arguments (<tt class="docutils literal"><span class="pre">rowvalue1</span></tt> and <tt class="docutils literal"><span class="pre">rowvalue2</span></tt> above) are NOT
auto-escaped! So either make sure that you trust their values, or use explicit
escaping, like this:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">for</span> <span class="nv">o</span> <span class="k">in</span> <span class="nv">some_list</span> <span class="cp">%}</span>
    <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">"</span><span class="cp">{%</span> <span class="k">filter</span> <span class="nf">force_escape</span> <span class="cp">%}{%</span> <span class="k">cycle</span> <span class="nv">rowvalue1</span> <span class="nv">rowvalue2</span> <span class="cp">%}{%</span> <span class="k">endfilter</span> <span class="cp">%}</span><span class="s">"</span><span class="nt">&gt;</span>
        ...
    <span class="nt">&lt;/tr&gt;</span>
<span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>You can mix variables and strings:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">for</span> <span class="nv">o</span> <span class="k">in</span> <span class="nv">some_list</span> <span class="cp">%}</span>
    <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">"</span><span class="cp">{%</span> <span class="k">cycle</span> <span class="s1">'row1'</span> <span class="nv">rowvalue2</span> <span class="s1">'row3'</span> <span class="cp">%}</span><span class="s">"</span><span class="nt">&gt;</span>
        ...
    <span class="nt">&lt;/tr&gt;</span>
<span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>In some cases you might want to refer to the next value of a cycle from
outside of a loop. To do this, just give the <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">cycle</span> <span class="pre">%}</span></tt> tag a name, using
"as", like this:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">cycle</span> <span class="s1">'row1'</span> <span class="s1">'row2'</span> <span class="k">as</span> <span class="nv">rowcolors</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>From then on, you can insert the current value of the cycle wherever
you'd like in your template by referencing the cycle name as a context
variable. If you want to move the cycle onto the next value, you use
the cycle tag again, using the name of the variable. So, the following
template:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="nt">&lt;tr&gt;</span>
    <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">"</span><span class="cp">{%</span> <span class="k">cycle</span> <span class="s1">'row1'</span> <span class="s1">'row2'</span> <span class="k">as</span> <span class="nv">rowcolors</span> <span class="cp">%}</span><span class="s">"</span><span class="nt">&gt;</span>...<span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">"</span><span class="cp">{{</span> <span class="nv">rowcolors</span> <span class="cp">}}</span><span class="s">"</span><span class="nt">&gt;</span>...<span class="nt">&lt;/td&gt;</span>
<span class="nt">&lt;/tr&gt;</span>
<span class="nt">&lt;tr&gt;</span>
    <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">"</span><span class="cp">{%</span> <span class="k">cycle</span> <span class="nv">rowcolors</span> <span class="cp">%}</span><span class="s">"</span><span class="nt">&gt;</span>...<span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">"</span><span class="cp">{{</span> <span class="nv">rowcolors</span> <span class="cp">}}</span><span class="s">"</span><span class="nt">&gt;</span>...<span class="nt">&lt;/td&gt;</span>
<span class="nt">&lt;/tr&gt;</span>
</pre></div>
</div>
<p>would output:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="nt">&lt;tr&gt;</span>
    <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">"row1"</span><span class="nt">&gt;</span>...<span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">"row1"</span><span class="nt">&gt;</span>...<span class="nt">&lt;/td&gt;</span>
<span class="nt">&lt;/tr&gt;</span>
<span class="nt">&lt;tr&gt;</span>
    <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">"row2"</span><span class="nt">&gt;</span>...<span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">"row2"</span><span class="nt">&gt;</span>...<span class="nt">&lt;/td&gt;</span>
<span class="nt">&lt;/tr&gt;</span>
</pre></div>
</div>
<p>You can use any number of values in a <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">cycle</span> <span class="pre">%}</span></tt> tag, separated by spaces.
Values enclosed in single (<tt class="docutils literal"><span class="pre">'</span></tt>) or double quotes (<tt class="docutils literal"><span class="pre">"</span></tt>) are treated as
string literals, while values without quotes are treated as template variables.</p>
<p>Note that the variables included in the cycle will not be escaped.
This is because template tags do not escape their content. Any HTML or
Javascript code contained in the printed variable will be rendered
as-is, which could potentially lead to security issues.</p>
<p>For backwards compatibility, the <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">cycle</span> <span class="pre">%}</span></tt> tag supports the much inferior
old syntax from previous Django versions. You shouldn't use this in any new
projects, but for the sake of the people who are still using it, here's what it
looks like:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">cycle</span> <span class="nv">row1</span><span class="o">,</span><span class="nv">row2</span><span class="o">,</span><span class="nv">row3</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>In this syntax, each value gets interpreted as a literal string, and there's no
way to specify variable values. Or literal commas. Or spaces. Did we mention
you shouldn't use this syntax in any new projects?</p>
<div class="versionadded">
<span class="title">New in Django 1.3:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.3/"><em>Please see the release notes</em></a></div>
<p>By default, when you use the <tt class="docutils literal"><span class="pre">as</span></tt> keyword with the cycle tag, the
usage of <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">cycle</span> <span class="pre">%}</span></tt> that declares the cycle will itself output
the first value in the cycle. This could be a problem if you want to
use the value in a nested loop or an included template. If you want to
just declare the cycle, but not output the first value, you can add a
<tt class="docutils literal"><span class="pre">silent</span></tt> keyword as the last keyword in the tag. For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">for</span> <span class="nv">obj</span> <span class="k">in</span> <span class="nv">some_list</span> <span class="cp">%}</span>
    <span class="cp">{%</span> <span class="k">cycle</span> <span class="s1">'row1'</span> <span class="s1">'row2'</span> <span class="k">as</span> <span class="nv">rowcolors</span> <span class="nv">silent</span> <span class="cp">%}</span>
    <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">"</span><span class="cp">{{</span> <span class="nv">rowcolors</span> <span class="cp">}}</span><span class="s">"</span><span class="nt">&gt;</span><span class="cp">{%</span> <span class="k">include</span> <span class="s2">"subtemplate.html "</span> <span class="cp">%}</span><span class="nt">&lt;/tr&gt;</span>
<span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>This will output a list of <tt class="docutils literal"><span class="pre">&lt;tr&gt;</span></tt> elements with <tt class="docutils literal"><span class="pre">class</span></tt>
alternating between <tt class="docutils literal"><span class="pre">row1</span></tt> and <tt class="docutils literal"><span class="pre">row2</span></tt>; the subtemplate will have
access to <tt class="docutils literal"><span class="pre">rowcolors</span></tt> in it's context that matches the class of the
<tt class="docutils literal"><span class="pre">&lt;tr&gt;</span></tt> that encloses it. If the <tt class="docutils literal"><span class="pre">silent</span></tt> keyword were to be
omitted, <tt class="docutils literal"><span class="pre">row1</span></tt> would be emitted as normal text, outside the
<tt class="docutils literal"><span class="pre">&lt;tr&gt;</span></tt> element.</p>
<p>When the silent keyword is used on a cycle definition, the silence
automatically applies to all subsequent uses of the cycle tag. In,
the following template would output <em>nothing</em>, even though the second
call to <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">cycle</span> <span class="pre">%}</span></tt> doesn't specify silent:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">cycle</span> <span class="s1">'row1'</span> <span class="s1">'row2'</span> <span class="k">as</span> <span class="nv">rowcolors</span> <span class="nv">silent</span> <span class="cp">%}</span>
<span class="cp">{%</span> <span class="k">cycle</span> <span class="nv">rowcolors</span> <span class="cp">%}</span>
</pre></div>
</div>
</div>
<div class="section" id="s-debug">
<span id="s-std:templatetag-debug"></span><span id="debug"></span><span id="std:templatetag-debug"></span><h3>debug<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#debug" title="Permalink to this headline">¶</a></h3>
<p>Outputs a whole load of debugging information, including the current context
and imported modules.</p>
</div>
<div class="section" id="s-extends">
<span id="s-std:templatetag-extends"></span><span id="extends"></span><span id="std:templatetag-extends"></span><h3>extends<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#extends" title="Permalink to this headline">¶</a></h3>
<p>Signals that this template extends a parent template.</p>
<p>This tag can be used in two ways:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">{%</span> <span class="pre">extends</span> <span class="pre">"base.html"</span> <span class="pre">%}</span></tt> (with quotes) uses the literal value
<tt class="docutils literal"><span class="pre">"base.html"</span></tt> as the name of the parent template to extend.</li>
<li><tt class="docutils literal"><span class="pre">{%</span> <span class="pre">extends</span> <span class="pre">variable</span> <span class="pre">%}</span></tt> uses the value of <tt class="docutils literal"><span class="pre">variable</span></tt>. If the variable
evaluates to a string, Django will use that string as the name of the
parent template. If the variable evaluates to a <tt class="docutils literal"><span class="pre">Template</span></tt> object,
Django will use that object as the parent template.</li>
</ul>
<p>See <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/templates/#template-inheritance"><em>Template inheritance</em></a> for more information.</p>
</div>
<div class="section" id="s-filter">
<span id="s-std:templatetag-filter"></span><span id="filter"></span><span id="std:templatetag-filter"></span><h3>filter<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#filter" title="Permalink to this headline">¶</a></h3>
<p>Filters the contents of the variable through variable filters.</p>
<p>Filters can also be piped through each other, and they can have arguments --
just like in variable syntax.</p>
<p>Sample usage:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">filter</span> <span class="nf">force_escape</span><span class="o">|</span><span class="nf">lower</span> <span class="cp">%}</span>
    This text will be HTML-escaped, and will appear in all lowercase.
<span class="cp">{%</span> <span class="k">endfilter</span> <span class="cp">%}</span>
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">The <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatefilter-escape"><tt class="xref std std-tfilter docutils literal"><span class="pre">escape</span></tt></a> and <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatefilter-safe"><tt class="xref std std-tfilter docutils literal"><span class="pre">safe</span></tt></a> filters are not acceptable
arguments. Instead, use the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-autoescape"><tt class="xref std std-ttag docutils literal"><span class="pre">autoescape</span></tt></a> tag to manage autoescaping
for blocks of template code.</p>
</div>
</div>
<div class="section" id="s-firstof">
<span id="s-std:templatetag-firstof"></span><span id="firstof"></span><span id="std:templatetag-firstof"></span><h3>firstof<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#firstof" title="Permalink to this headline">¶</a></h3>
<p>Outputs the first variable passed that is not False. Does NOT auto-escape
variable values.</p>
<p>Outputs nothing if all the passed variables are False.</p>
<p>Sample usage:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">firstof</span> <span class="nv">var1</span> <span class="nv">var2</span> <span class="nv">var3</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>This is equivalent to:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">if</span> <span class="nv">var1</span> <span class="cp">%}</span>
    <span class="cp">{{</span> <span class="nv">var1</span><span class="o">|</span><span class="nf">safe</span> <span class="cp">}}</span>
<span class="cp">{%</span> <span class="k">else</span> <span class="cp">%}{%</span> <span class="k">if</span> <span class="nv">var2</span> <span class="cp">%}</span>
    <span class="cp">{{</span> <span class="nv">var2</span><span class="o">|</span><span class="nf">safe</span> <span class="cp">}}</span>
<span class="cp">{%</span> <span class="k">else</span> <span class="cp">%}{%</span> <span class="k">if</span> <span class="nv">var3</span> <span class="cp">%}</span>
    <span class="cp">{{</span> <span class="nv">var3</span><span class="o">|</span><span class="nf">safe</span> <span class="cp">}}</span>
<span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}{%</span> <span class="k">endif</span> <span class="cp">%}{%</span> <span class="k">endif</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>You can also use a literal string as a fallback value in case all
passed variables are False:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">firstof</span> <span class="nv">var1</span> <span class="nv">var2</span> <span class="nv">var3</span> <span class="s2">"fallback value"</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>Note that the variables included in the firstof tag will not be
escaped. This is because template tags do not escape their content.
Any HTML or Javascript code contained in the printed variable will be
rendered as-is, which could potentially lead to security issues. If you
need to escape the variables in the firstof tag, you must do so
explicitly:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">filter</span> <span class="nf">force_escape</span> <span class="cp">%}</span>
    <span class="cp">{%</span> <span class="k">firstof</span> <span class="nv">var1</span> <span class="nv">var2</span> <span class="nv">var3</span> <span class="s2">"fallback value"</span> <span class="cp">%}</span>
<span class="cp">{%</span> <span class="k">endfilter</span> <span class="cp">%}</span>
</pre></div>
</div>
</div>
<div class="section" id="s-for">
<span id="s-std:templatetag-for"></span><span id="for"></span><span id="std:templatetag-for"></span><h3>for<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#for" title="Permalink to this headline">¶</a></h3>
<p>Loop over each item in an array.  For example, to display a list of athletes
provided in <tt class="docutils literal"><span class="pre">athlete_list</span></tt>:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="nt">&lt;ul&gt;</span>
<span class="cp">{%</span> <span class="k">for</span> <span class="nv">athlete</span> <span class="k">in</span> <span class="nv">athlete_list</span> <span class="cp">%}</span>
    <span class="nt">&lt;li&gt;</span><span class="cp">{{</span> <span class="nv">athlete.name</span> <span class="cp">}}</span><span class="nt">&lt;/li&gt;</span>
<span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
<span class="nt">&lt;/ul&gt;</span>
</pre></div>
</div>
<p>You can loop over a list in reverse by using
<tt class="docutils literal"><span class="pre">{%</span> <span class="pre">for</span> <span class="pre">obj</span> <span class="pre">in</span> <span class="pre">list</span> <span class="pre">reversed</span> <span class="pre">%}</span></tt>.</p>
<p>If you need to loop over a list of lists, you can unpack the values
in each sub-list into individual variables. For example, if your context
contains a list of (x,y) coordinates called <tt class="docutils literal"><span class="pre">points</span></tt>, you could use the
following to output the list of points:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">for</span> <span class="nv">x</span><span class="o">,</span> <span class="nv">y</span> <span class="k">in</span> <span class="nv">points</span> <span class="cp">%}</span>
    There is a point at <span class="cp">{{</span> <span class="nv">x</span> <span class="cp">}}</span>,<span class="cp">{{</span> <span class="nv">y</span> <span class="cp">}}</span>
<span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>This can also be useful if you need to access the items in a dictionary.
For example, if your context contained a dictionary <tt class="docutils literal"><span class="pre">data</span></tt>, the following
would display the keys and values of the dictionary:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">for</span> <span class="nv">key</span><span class="o">,</span> <span class="nv">value</span> <span class="k">in</span> <span class="nv">data.items</span> <span class="cp">%}</span>
    <span class="cp">{{</span> <span class="nv">key</span> <span class="cp">}}</span>: <span class="cp">{{</span> <span class="nv">value</span> <span class="cp">}}</span>
<span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>The for loop sets a number of variables available within the loop:</p>
<table class="docutils">
<colgroup>
<col width="36%">
<col width="64%">
</colgroup>
<thead valign="bottom">
<tr><th class="head">Variable</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr><td><tt class="docutils literal"><span class="pre">forloop.counter</span></tt></td>
<td>The current iteration of the loop (1-indexed)</td>
</tr>
<tr><td><tt class="docutils literal"><span class="pre">forloop.counter0</span></tt></td>
<td>The current iteration of the loop (0-indexed)</td>
</tr>
<tr><td><tt class="docutils literal"><span class="pre">forloop.revcounter</span></tt></td>
<td>The number of iterations from the end of the
loop (1-indexed)</td>
</tr>
<tr><td><tt class="docutils literal"><span class="pre">forloop.revcounter0</span></tt></td>
<td>The number of iterations from the end of the
loop (0-indexed)</td>
</tr>
<tr><td><tt class="docutils literal"><span class="pre">forloop.first</span></tt></td>
<td>True if this is the first time through the loop</td>
</tr>
<tr><td><tt class="docutils literal"><span class="pre">forloop.last</span></tt></td>
<td>True if this is the last time through the loop</td>
</tr>
<tr><td><tt class="docutils literal"><span class="pre">forloop.parentloop</span></tt></td>
<td>For nested loops, this is the loop "above" the
current one</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="s-for-empty">
<span id="for-empty"></span><h3>for ... empty<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#for-empty" title="Permalink to this headline">¶</a></h3>
<p>The <tt class="docutils literal"><span class="pre">for</span></tt> tag can take an optional <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">empty</span> <span class="pre">%}</span></tt> clause that will be
displayed if the given array is empty or could not be found:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="nt">&lt;ul&gt;</span>
<span class="cp">{%</span> <span class="k">for</span> <span class="nv">athlete</span> <span class="k">in</span> <span class="nv">athlete_list</span> <span class="cp">%}</span>
    <span class="nt">&lt;li&gt;</span><span class="cp">{{</span> <span class="nv">athlete.name</span> <span class="cp">}}</span><span class="nt">&lt;/li&gt;</span>
<span class="cp">{%</span> <span class="k">empty</span> <span class="cp">%}</span>
    <span class="nt">&lt;li&gt;</span>Sorry, no athlete in this list!<span class="nt">&lt;/li&gt;</span>
<span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
<span class="nt">&lt;ul&gt;</span>
</pre></div>
</div>
<p>The above is equivalent to -- but shorter, cleaner, and possibly faster
than -- the following:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="nt">&lt;ul&gt;</span>
  <span class="cp">{%</span> <span class="k">if</span> <span class="nv">athlete_list</span> <span class="cp">%}</span>
    <span class="cp">{%</span> <span class="k">for</span> <span class="nv">athlete</span> <span class="k">in</span> <span class="nv">athlete_list</span> <span class="cp">%}</span>
      <span class="nt">&lt;li&gt;</span><span class="cp">{{</span> <span class="nv">athlete.name</span> <span class="cp">}}</span><span class="nt">&lt;/li&gt;</span>
    <span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
  <span class="cp">{%</span> <span class="k">else</span> <span class="cp">%}</span>
    <span class="nt">&lt;li&gt;</span>Sorry, no athletes in this list.<span class="nt">&lt;/li&gt;</span>
  <span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>
<span class="nt">&lt;/ul&gt;</span>
</pre></div>
</div>
</div>
<div class="section" id="s-if">
<span id="s-std:templatetag-if"></span><span id="if"></span><span id="std:templatetag-if"></span><h3>if<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#if" title="Permalink to this headline">¶</a></h3>
<p>The <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">if</span> <span class="pre">%}</span></tt> tag evaluates a variable, and if that variable is "true" (i.e.
exists, is not empty, and is not a false boolean value) the contents of the
block are output:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">if</span> <span class="nv">athlete_list</span> <span class="cp">%}</span>
    Number of athletes: <span class="cp">{{</span> <span class="nv">athlete_list</span><span class="o">|</span><span class="nf">length</span> <span class="cp">}}</span>
<span class="cp">{%</span> <span class="k">elif</span> <span class="nv">athlete_in_locker_room_list</span> <span class="cp">%}</span>
    Athletes should be out of the locker room soon!
<span class="cp">{%</span> <span class="k">else</span> <span class="cp">%}</span>
    No athletes.
<span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>In the above, if <tt class="docutils literal"><span class="pre">athlete_list</span></tt> is not empty, the number of athletes will be
displayed by the <tt class="docutils literal"><span class="pre">{{</span> <span class="pre">athlete_list|length</span> <span class="pre">}}</span></tt> variable.</p>
<p>As you can see, the <tt class="docutils literal"><span class="pre">if</span></tt> tag may take one or several `` {% elif %}``
clauses, as well as an <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">else</span> <span class="pre">%}</span></tt> clause that will be displayed if all
previous conditions fail. These clauses are optional.</p>
<div class="versionadded">
<span class="title">New in Django 1.4:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.4/"><em>Please see the release notes</em></a></div>
<p>The <tt class="docutils literal"><span class="pre">if</span></tt> tag now supports <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">elif</span> <span class="pre">%}</span></tt> clauses.</p>
</div>
<div class="section" id="s-boolean-operators">
<span id="boolean-operators"></span><h3>Boolean operators<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#boolean-operators" title="Permalink to this headline">¶</a></h3>
<p><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-if"><tt class="xref std std-ttag docutils literal"><span class="pre">if</span></tt></a> tags may use <tt class="docutils literal"><span class="pre">and</span></tt>, <tt class="docutils literal"><span class="pre">or</span></tt> or <tt class="docutils literal"><span class="pre">not</span></tt> to test a number of
variables or to negate a given variable:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">if</span> <span class="nv">athlete_list</span> <span class="k">and</span> <span class="nv">coach_list</span> <span class="cp">%}</span>
    Both athletes and coaches are available.
<span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>

<span class="cp">{%</span> <span class="k">if</span> <span class="k">not</span> <span class="nv">athlete_list</span> <span class="cp">%}</span>
    There are no athletes.
<span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>

<span class="cp">{%</span> <span class="k">if</span> <span class="nv">athlete_list</span> <span class="k">or</span> <span class="nv">coach_list</span> <span class="cp">%}</span>
    There are some athletes or some coaches.
<span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>

<span class="cp">{%</span> <span class="k">if</span> <span class="k">not</span> <span class="nv">athlete_list</span> <span class="k">or</span> <span class="nv">coach_list</span> <span class="cp">%}</span>
    There are no athletes or there are some coaches (OK, so
    writing English translations of boolean logic sounds
    stupid; it's not our fault).
<span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>

<span class="cp">{%</span> <span class="k">if</span> <span class="nv">athlete_list</span> <span class="k">and</span> <span class="k">not</span> <span class="nv">coach_list</span> <span class="cp">%}</span>
    There are some athletes and absolutely no coaches.
<span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>
</pre></div>
</div>
<div class="versionchanged">
<span class="title">Changed in Django 1.2:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.2/"><em>Please see the release notes</em></a></div>
<p>Use of both <tt class="docutils literal"><span class="pre">and</span></tt> and <tt class="docutils literal"><span class="pre">or</span></tt> clauses within the same tag is allowed, with
<tt class="docutils literal"><span class="pre">and</span></tt> having higher precedence than <tt class="docutils literal"><span class="pre">or</span></tt> e.g.:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">if</span> <span class="nv">athlete_list</span> <span class="k">and</span> <span class="nv">coach_list</span> <span class="k">or</span> <span class="nv">cheerleader_list</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>will be interpreted like:</p>
<div class="highlight-python"><pre>if (athlete_list and coach_list) or cheerleader_list</pre>
</div>
<p>Use of actual brackets in the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-if"><tt class="xref std std-ttag docutils literal"><span class="pre">if</span></tt></a> tag is invalid syntax.  If you need
them to indicate precedence, you should use nested <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-if"><tt class="xref std std-ttag docutils literal"><span class="pre">if</span></tt></a> tags.</p>
<div class="versionadded">
<span class="title">New in Django 1.2:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.2/"><em>Please see the release notes</em></a></div>
<p><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-if"><tt class="xref std std-ttag docutils literal"><span class="pre">if</span></tt></a> tags may also use the operators <tt class="docutils literal"><span class="pre">==</span></tt>, <tt class="docutils literal"><span class="pre">!=</span></tt>, <tt class="docutils literal"><span class="pre">&lt;</span></tt>, <tt class="docutils literal"><span class="pre">&gt;</span></tt>,
<tt class="docutils literal"><span class="pre">&lt;=</span></tt>, <tt class="docutils literal"><span class="pre">&gt;=</span></tt> and <tt class="docutils literal"><span class="pre">in</span></tt> which work as follows:</p>
</div>
<div class="section" id="s-operator">
<span id="operator"></span><h3><tt class="docutils literal"><span class="pre">==</span></tt> operator<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#operator" title="Permalink to this headline">¶</a></h3>
<p>Equality. Example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">if</span> <span class="nv">somevar</span> <span class="o">==</span> <span class="s2">"x"</span> <span class="cp">%}</span>
  This appears if variable somevar equals the string "x"
<span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>
</pre></div>
</div>
</div>
<div class="section" id="s-id1">
<span id="id1"></span><h3><tt class="docutils literal"><span class="pre">!=</span></tt> operator<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#id1" title="Permalink to this headline">¶</a></h3>
<p>Inequality. Example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">if</span> <span class="nv">somevar</span> <span class="p">!</span><span class="o">=</span> <span class="s2">"x"</span> <span class="cp">%}</span>
  This appears if variable somevar does not equal the string "x",
  or if somevar is not found in the context
<span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>
</pre></div>
</div>
</div>
<div class="section" id="s-id2">
<span id="id2"></span><h3><tt class="docutils literal"><span class="pre">&lt;</span></tt> operator<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#id2" title="Permalink to this headline">¶</a></h3>
<p>Less than. Example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">if</span> <span class="nv">somevar</span> <span class="o">&lt;</span> <span class="m">100</span> <span class="cp">%}</span>
  This appears if variable somevar is less than 100.
<span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>
</pre></div>
</div>
</div>
<div class="section" id="s-id3">
<span id="id3"></span><h3><tt class="docutils literal"><span class="pre">&gt;</span></tt> operator<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#id3" title="Permalink to this headline">¶</a></h3>
<p>Greater than. Example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">if</span> <span class="nv">somevar</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="cp">%}</span>
  This appears if variable somevar is greater than 0.
<span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>
</pre></div>
</div>
</div>
<div class="section" id="s-id4">
<span id="id4"></span><h3><tt class="docutils literal"><span class="pre">&lt;=</span></tt> operator<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#id4" title="Permalink to this headline">¶</a></h3>
<p>Less than or equal to. Example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">if</span> <span class="nv">somevar</span> <span class="o">&lt;=</span> <span class="m">100</span> <span class="cp">%}</span>
  This appears if variable somevar is less than 100 or equal to 100.
<span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>
</pre></div>
</div>
</div>
<div class="section" id="s-id5">
<span id="id5"></span><h3><tt class="docutils literal"><span class="pre">&gt;=</span></tt> operator<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#id5" title="Permalink to this headline">¶</a></h3>
<p>Greater than or equal to. Example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">if</span> <span class="nv">somevar</span> <span class="o">&gt;=</span> <span class="m">1</span> <span class="cp">%}</span>
  This appears if variable somevar is greater than 1 or equal to 1.
<span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>
</pre></div>
</div>
</div>
<div class="section" id="s-in-operator">
<span id="in-operator"></span><h3><tt class="docutils literal"><span class="pre">in</span></tt> operator<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#in-operator" title="Permalink to this headline">¶</a></h3>
<p>Contained within. This operator is supported by many Python containers to test
whether the given value is in the container.  The following are some examples
of how <tt class="docutils literal"><span class="pre">x</span> <span class="pre">in</span> <span class="pre">y</span></tt> will be interpreted:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">if</span> <span class="s2">"bc"</span> <span class="k">in</span> <span class="s2">"abcdef"</span> <span class="cp">%}</span>
  This appears since "bc" is a substring of "abcdef"
<span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>

<span class="cp">{%</span> <span class="k">if</span> <span class="s2">"hello"</span> <span class="k">in</span> <span class="nv">greetings</span> <span class="cp">%}</span>
  If greetings is a list or set, one element of which is the string
  "hello", this will appear.
<span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>

<span class="cp">{%</span> <span class="k">if</span> <span class="nv">user</span> <span class="k">in</span> <span class="nv">users</span> <span class="cp">%}</span>
  If users is a QuerySet, this will appear if user is an
  instance that belongs to the QuerySet.
<span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>
</pre></div>
</div>
</div>
<div class="section" id="s-not-in-operator">
<span id="not-in-operator"></span><h3><tt class="docutils literal"><span class="pre">not</span> <span class="pre">in</span></tt> operator<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#not-in-operator" title="Permalink to this headline">¶</a></h3>
<p>Not contained within.  This is the negation of the <tt class="docutils literal"><span class="pre">in</span></tt> operator.</p>
<p>The comparison operators cannot be 'chained' like in Python or in mathematical
notation. For example, instead of using:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">if</span> <span class="nv">a</span> <span class="o">&gt;</span> <span class="nv">b</span> <span class="o">&gt;</span> <span class="nv">c</span> <span class="cp">%}</span>  (WRONG)
</pre></div>
</div>
<p>you should use:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">if</span> <span class="nv">a</span> <span class="o">&gt;</span> <span class="nv">b</span> <span class="k">and</span> <span class="nv">b</span> <span class="o">&gt;</span> <span class="nv">c</span> <span class="cp">%}</span>
</pre></div>
</div>
</div>
<div class="section" id="s-filters">
<span id="filters"></span><h3>Filters<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#filters" title="Permalink to this headline">¶</a></h3>
<p>You can also use filters in the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-if"><tt class="xref std std-ttag docutils literal"><span class="pre">if</span></tt></a> expression. For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">if</span> <span class="nv">messages</span><span class="o">|</span><span class="nf">length</span> <span class="o">&gt;=</span> <span class="m">100</span> <span class="cp">%}</span>
   You have lots of messages today!
<span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>
</pre></div>
</div>
</div>
<div class="section" id="s-complex-expressions">
<span id="complex-expressions"></span><h3>Complex expressions<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#complex-expressions" title="Permalink to this headline">¶</a></h3>
<p>All of the above can be combined to form complex expressions. For such
expressions, it can be important to know how the operators are grouped when the
expression is evaluated - that is, the precedence rules.  The precedence of the
operators, from lowest to highest, is as follows:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">or</span></tt></li>
<li><tt class="docutils literal"><span class="pre">and</span></tt></li>
<li><tt class="docutils literal"><span class="pre">not</span></tt></li>
<li><tt class="docutils literal"><span class="pre">in</span></tt></li>
<li><tt class="docutils literal"><span class="pre">==</span></tt>, <tt class="docutils literal"><span class="pre">!=</span></tt>, <tt class="docutils literal"><span class="pre">&lt;</span></tt>, <tt class="docutils literal"><span class="pre">&gt;</span></tt>, <tt class="docutils literal"><span class="pre">&lt;=</span></tt>, <tt class="docutils literal"><span class="pre">&gt;=</span></tt></li>
</ul>
<p>(This follows Python exactly). So, for example, the following complex
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-if"><tt class="xref std std-ttag docutils literal"><span class="pre">if</span></tt></a> tag:</p>
<div class="highlight-django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">if</span> <span class="nv">a</span> <span class="o">==</span> <span class="nv">b</span> <span class="k">or</span> <span class="nv">c</span> <span class="o">==</span> <span class="nv">d</span> <span class="k">and</span> <span class="nv">e</span> <span class="cp">%}</span><span class="x"></span>
</pre></div>
</div>
<p>...will be interpreted as:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="p">)</span> <span class="ow">or</span> <span class="p">((</span><span class="n">c</span> <span class="o">==</span> <span class="n">d</span><span class="p">)</span> <span class="ow">and</span> <span class="n">e</span><span class="p">)</span>
</pre></div>
</div>
<p>If you need different precedence, you will need to use nested <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-if"><tt class="xref std std-ttag docutils literal"><span class="pre">if</span></tt></a> tags.
Sometimes that is better for clarity anyway, for the sake of those who do not
know the precedence rules.</p>
</div>
<div class="section" id="s-ifchanged">
<span id="s-std:templatetag-ifchanged"></span><span id="ifchanged"></span><span id="std:templatetag-ifchanged"></span><h3>ifchanged<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#ifchanged" title="Permalink to this headline">¶</a></h3>
<p>Check if a value has changed from the last iteration of a loop.</p>
<p>The <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">ifchanged</span> <span class="pre">%}</span></tt> block tag is used within a loop. It has two possible
uses.</p>
<ol class="arabic">
<li><p class="first">Checks its own rendered contents against its previous state and only
displays the content if it has changed. For example, this displays a list of
days, only displaying the month if it changes:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>Archive for <span class="cp">{{</span> <span class="nv">year</span> <span class="cp">}}</span><span class="nt">&lt;/h1&gt;</span>

<span class="cp">{%</span> <span class="k">for</span> <span class="nv">date</span> <span class="k">in</span> <span class="nv">days</span> <span class="cp">%}</span>
    <span class="cp">{%</span> <span class="k">ifchanged</span> <span class="cp">%}</span><span class="nt">&lt;h3&gt;</span><span class="cp">{{</span> <span class="nv">date</span><span class="o">|</span><span class="nf">date</span><span class="s2">:"F"</span> <span class="cp">}}</span><span class="nt">&lt;/h3&gt;</span><span class="cp">{%</span> <span class="k">endifchanged</span> <span class="cp">%}</span>
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"</span><span class="cp">{{</span> <span class="nv">date</span><span class="o">|</span><span class="nf">date</span><span class="s2">:"M/d"</span><span class="o">|</span><span class="nf">lower</span> <span class="cp">}}</span><span class="s">/"</span><span class="nt">&gt;</span><span class="cp">{{</span> <span class="nv">date</span><span class="o">|</span><span class="nf">date</span><span class="s2">:"j"</span> <span class="cp">}}</span><span class="nt">&lt;/a&gt;</span>
<span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
</pre></div>
</div>
</li>
<li><p class="first">If given one or more variables, check whether any variable has changed.
For example, the following shows the date every time it changes, while
showing the hour if either the hour or the date has changed:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">for</span> <span class="nv">date</span> <span class="k">in</span> <span class="nv">days</span> <span class="cp">%}</span>
    <span class="cp">{%</span> <span class="k">ifchanged</span> <span class="nv">date.date</span> <span class="cp">%}</span> <span class="cp">{{</span> <span class="nv">date.date</span> <span class="cp">}}</span> <span class="cp">{%</span> <span class="k">endifchanged</span> <span class="cp">%}</span>
    <span class="cp">{%</span> <span class="k">ifchanged</span> <span class="nv">date.hour</span> <span class="nv">date.date</span> <span class="cp">%}</span>
        <span class="cp">{{</span> <span class="nv">date.hour</span> <span class="cp">}}</span>
    <span class="cp">{%</span> <span class="k">endifchanged</span> <span class="cp">%}</span>
<span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
</pre></div>
</div>
</li>
</ol>
<p>The <tt class="docutils literal"><span class="pre">ifchanged</span></tt> tag can also take an optional <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">else</span> <span class="pre">%}</span></tt> clause that
will be displayed if the value has not changed:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">for</span> <span class="nv">match</span> <span class="k">in</span> <span class="nv">matches</span> <span class="cp">%}</span>
    <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"background-color:</span>
<span class="s">        </span><span class="cp">{%</span> <span class="k">ifchanged</span> <span class="nv">match.ballot_id</span> <span class="cp">%}</span><span class="s"></span>
<span class="s">            </span><span class="cp">{%</span> <span class="k">cycle</span> <span class="s2">"red"</span> <span class="s2">"blue"</span> <span class="cp">%}</span><span class="s"></span>
<span class="s">        </span><span class="cp">{%</span> <span class="k">else</span> <span class="cp">%}</span><span class="s"></span>
<span class="s">            grey</span>
<span class="s">        </span><span class="cp">{%</span> <span class="k">endifchanged</span> <span class="cp">%}</span><span class="s"></span>
<span class="s">    "</span><span class="nt">&gt;</span><span class="cp">{{</span> <span class="nv">match</span> <span class="cp">}}</span><span class="nt">&lt;/div&gt;</span>
<span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
</pre></div>
</div>
</div>
<div class="section" id="s-ifequal">
<span id="s-std:templatetag-ifequal"></span><span id="ifequal"></span><span id="std:templatetag-ifequal"></span><h3>ifequal<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#ifequal" title="Permalink to this headline">¶</a></h3>
<p>Output the contents of the block if the two arguments equal each other.</p>
<p>Example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">ifequal</span> <span class="nv">user.id</span> <span class="nv">comment.user_id</span> <span class="cp">%}</span>
    ...
<span class="cp">{%</span> <span class="k">endifequal</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>As in the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-if"><tt class="xref std std-ttag docutils literal"><span class="pre">if</span></tt></a> tag, an <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">else</span> <span class="pre">%}</span></tt> clause is optional.</p>
<p>The arguments can be hard-coded strings, so the following is valid:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">ifequal</span> <span class="nv">user.username</span> <span class="s2">"adrian"</span> <span class="cp">%}</span>
    ...
<span class="cp">{%</span> <span class="k">endifequal</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>It is only possible to compare an argument to template variables or strings.
You cannot check for equality with Python objects such as <tt class="xref docutils literal"><span class="pre">True</span></tt> or
<tt class="xref docutils literal"><span class="pre">False</span></tt>.  If you need to test if something is true or false, use the
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-if"><tt class="xref std std-ttag docutils literal"><span class="pre">if</span></tt></a> tag instead.</p>
<div class="versionadded">
<span class="title">New in Django 1.2:</span> An alternative to the <tt class="docutils literal"><span class="pre">ifequal</span></tt> tag is to use the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-if"><tt class="xref std std-ttag docutils literal"><span class="pre">if</span></tt></a> tag and the
<tt class="docutils literal"><span class="pre">==</span></tt> operator.</div>
</div>
<div class="section" id="s-ifnotequal">
<span id="s-std:templatetag-ifnotequal"></span><span id="ifnotequal"></span><span id="std:templatetag-ifnotequal"></span><h3>ifnotequal<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#ifnotequal" title="Permalink to this headline">¶</a></h3>
<p>Just like <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-ifequal"><tt class="xref std std-ttag docutils literal"><span class="pre">ifequal</span></tt></a>, except it tests that the two arguments are not
equal.</p>
<div class="versionadded">
<span class="title">New in Django 1.2:</span> An alternative to the <tt class="docutils literal"><span class="pre">ifnotequal</span></tt> tag is to use the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-if"><tt class="xref std std-ttag docutils literal"><span class="pre">if</span></tt></a> tag and
the <tt class="docutils literal"><span class="pre">!=</span></tt> operator.</div>
</div>
<div class="section" id="s-include">
<span id="s-std:templatetag-include"></span><span id="include"></span><span id="std:templatetag-include"></span><h3>include<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#include" title="Permalink to this headline">¶</a></h3>
<p>Loads a template and renders it with the current context. This is a way of
"including" other templates within a template.</p>
<p>The template name can either be a variable or a hard-coded (quoted) string,
in either single or double quotes.</p>
<p>This example includes the contents of the template <tt class="docutils literal"><span class="pre">"foo/bar.html"</span></tt>:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">include</span> <span class="s2">"foo/bar.html"</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>This example includes the contents of the template whose name is contained in
the variable <tt class="docutils literal"><span class="pre">template_name</span></tt>:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">include</span> <span class="nv">template_name</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>An included template is rendered with the context of the template that's
including it. This example produces the output <tt class="docutils literal"><span class="pre">"Hello,</span> <span class="pre">John"</span></tt>:</p>
<ul>
<li><p class="first">Context: variable <tt class="docutils literal"><span class="pre">person</span></tt> is set to <tt class="docutils literal"><span class="pre">"john"</span></tt>.</p>
</li>
<li><p class="first">Template:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">include</span> <span class="s2">"name_snippet.html"</span> <span class="cp">%}</span>
</pre></div>
</div>
</li>
<li><p class="first">The <tt class="docutils literal"><span class="pre">name_snippet.html</span></tt> template:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">greeting</span> <span class="cp">}}</span>, <span class="cp">{{</span> <span class="nv">person</span><span class="o">|</span><span class="nf">default</span><span class="s2">:"friend"</span> <span class="cp">}}</span>!
</pre></div>
</div>
</li>
</ul>
<div class="versionchanged">
<span class="title">Changed in Django 1.3:</span> Additional context and exclusive context.</div>
<p>You can pass additional context to the template using keyword arguments:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">include</span> <span class="s2">"name_snippet.html"</span> <span class="k">with</span> <span class="nv">person</span><span class="o">=</span><span class="s2">"Jane"</span> <span class="nv">greeting</span><span class="o">=</span><span class="s2">"Hello"</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>If you want to only render the context with the variables provided (or even
no variables at all), use the <tt class="docutils literal"><span class="pre">only</span></tt> option:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">include</span> <span class="s2">"name_snippet.html"</span> <span class="k">with</span> <span class="nv">greeting</span><span class="o">=</span><span class="s2">"Hi"</span> <span class="nv">only</span> <span class="cp">%}</span>
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">The <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-include"><tt class="xref std std-ttag docutils literal"><span class="pre">include</span></tt></a> tag should be considered as an implementation of
"render this subtemplate and include the HTML", not as "parse this
subtemplate and include its contents as if it were part of the parent".
This means that there is no shared state between included templates --
each include is a completely independent rendering process.</p>
</div>
<p>See also: <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-ssi"><tt class="xref std std-ttag docutils literal"><span class="pre">{%</span> <span class="pre">ssi</span> <span class="pre">%}</span></tt></a>.</p>
</div>
<div class="section" id="s-load">
<span id="s-std:templatetag-load"></span><span id="load"></span><span id="std:templatetag-load"></span><h3>load<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#load" title="Permalink to this headline">¶</a></h3>
<p>Loads a custom template tag set.</p>
<p>For example, the following template would load all the tags and filters
registered in <tt class="docutils literal"><span class="pre">somelibrary</span></tt> and <tt class="docutils literal"><span class="pre">otherlibrary</span></tt> located in package
<tt class="docutils literal"><span class="pre">package</span></tt>:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">load</span> <span class="nv">somelibrary</span> <span class="nv">package.otherlibrary</span> <span class="cp">%}</span>
</pre></div>
</div>
<div class="versionchanged">
<span class="title">Changed in Django 1.3:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.3/"><em>Please see the release notes</em></a></div>
<p>You can also selectively load individual filters or tags from a library, using
the <tt class="docutils literal"><span class="pre">from</span></tt> argument. In this example, the template tags/filters named <tt class="docutils literal"><span class="pre">foo</span></tt>
and <tt class="docutils literal"><span class="pre">bar</span></tt> will be loaded from <tt class="docutils literal"><span class="pre">somelibrary</span></tt>:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">load</span> <span class="nv">foo</span> <span class="nv">bar</span> <span class="nv">from</span> <span class="nv">somelibrary</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>See <a class="reference internal" href="https://docs.djangoproject.com/en/dev/howto/custom-template-tags/"><em>Custom tag and filter libraries</em></a> for
more information.</p>
</div>
<div class="section" id="s-now">
<span id="s-std:templatetag-now"></span><span id="now"></span><span id="std:templatetag-now"></span><h3>now<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#now" title="Permalink to this headline">¶</a></h3>
<p>Displays the current date and/or time, using a format according to the given
string. Such string can contain format specifiers characters as described
in the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatefilter-date"><tt class="xref std std-tfilter docutils literal"><span class="pre">date</span></tt></a> filter section.</p>
<p>Example:</p>
<div class="highlight-html+django"><div class="highlight"><pre>It is <span class="cp">{%</span> <span class="k">now</span> <span class="s2">"jS F Y H:i"</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>Note that you can backslash-escape a format string if you want to use the
"raw" value. In this example, "f" is backslash-escaped, because otherwise
"f" is a format string that displays the time. The "o" doesn't need to be
escaped, because it's not a format character:</p>
<div class="highlight-html+django"><div class="highlight"><pre>It is the <span class="cp">{%</span> <span class="k">now</span> <span class="s2">"jS o\f F"</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>This would display as "It is the 4th of September".</p>
<div class="versionchanged">
<span class="title">Changed in Django 1.4:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.4/"><em>Please see the release notes</em></a></div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p>The format passed can also be one of the predefined ones
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-DATE_FORMAT"><tt class="xref std std-setting docutils literal"><span class="pre">DATE_FORMAT</span></tt></a>, <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-DATETIME_FORMAT"><tt class="xref std std-setting docutils literal"><span class="pre">DATETIME_FORMAT</span></tt></a>,
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-SHORT_DATE_FORMAT"><tt class="xref std std-setting docutils literal"><span class="pre">SHORT_DATE_FORMAT</span></tt></a> or <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-SHORT_DATETIME_FORMAT"><tt class="xref std std-setting docutils literal"><span class="pre">SHORT_DATETIME_FORMAT</span></tt></a>.
The predefined formats may vary depending on the current locale and
if <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/i18n/formatting/#format-localization"><em>Format localization</em></a> is enabled, e.g.:</p>
<div class="last highlight-html+django"><div class="highlight"><pre>It is <span class="cp">{%</span> <span class="k">now</span> <span class="s2">"SHORT_DATETIME_FORMAT"</span> <span class="cp">%}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="s-regroup">
<span id="s-std:templatetag-regroup"></span><span id="regroup"></span><span id="std:templatetag-regroup"></span><h3>regroup<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#regroup" title="Permalink to this headline">¶</a></h3>
<p>Regroups a list of alike objects by a common attribute.</p>
<p>This complex tag is best illustrated by use of an example: say that <tt class="docutils literal"><span class="pre">people</span></tt>
is a list of people represented by dictionaries with <tt class="docutils literal"><span class="pre">first_name</span></tt>,
<tt class="docutils literal"><span class="pre">last_name</span></tt>, and <tt class="docutils literal"><span class="pre">gender</span></tt> keys:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">people</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s">'first_name'</span><span class="p">:</span> <span class="s">'George'</span><span class="p">,</span> <span class="s">'last_name'</span><span class="p">:</span> <span class="s">'Bush'</span><span class="p">,</span> <span class="s">'gender'</span><span class="p">:</span> <span class="s">'Male'</span><span class="p">},</span>
    <span class="p">{</span><span class="s">'first_name'</span><span class="p">:</span> <span class="s">'Bill'</span><span class="p">,</span> <span class="s">'last_name'</span><span class="p">:</span> <span class="s">'Clinton'</span><span class="p">,</span> <span class="s">'gender'</span><span class="p">:</span> <span class="s">'Male'</span><span class="p">},</span>
    <span class="p">{</span><span class="s">'first_name'</span><span class="p">:</span> <span class="s">'Margaret'</span><span class="p">,</span> <span class="s">'last_name'</span><span class="p">:</span> <span class="s">'Thatcher'</span><span class="p">,</span> <span class="s">'gender'</span><span class="p">:</span> <span class="s">'Female'</span><span class="p">},</span>
    <span class="p">{</span><span class="s">'first_name'</span><span class="p">:</span> <span class="s">'Condoleezza'</span><span class="p">,</span> <span class="s">'last_name'</span><span class="p">:</span> <span class="s">'Rice'</span><span class="p">,</span> <span class="s">'gender'</span><span class="p">:</span> <span class="s">'Female'</span><span class="p">},</span>
    <span class="p">{</span><span class="s">'first_name'</span><span class="p">:</span> <span class="s">'Pat'</span><span class="p">,</span> <span class="s">'last_name'</span><span class="p">:</span> <span class="s">'Smith'</span><span class="p">,</span> <span class="s">'gender'</span><span class="p">:</span> <span class="s">'Unknown'</span><span class="p">},</span>
<span class="p">]</span>
</pre></div>
</div>
<p>...and you'd like to display a hierarchical list that is ordered by gender,
like this:</p>
<ul class="simple">
<li>Male:<ul>
<li>George Bush</li>
<li>Bill Clinton</li>
</ul>
</li>
<li>Female:<ul>
<li>Margaret Thatcher</li>
<li>Condoleezza Rice</li>
</ul>
</li>
<li>Unknown:<ul>
<li>Pat Smith</li>
</ul>
</li>
</ul>
<p>You can use the <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">regroup</span> <span class="pre">%}</span></tt> tag to group the list of people by gender.
The following snippet of template code would accomplish this:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">regroup</span> <span class="nv">people</span> <span class="nv">by</span> <span class="nv">gender</span> <span class="k">as</span> <span class="nv">gender_list</span> <span class="cp">%}</span>

<span class="nt">&lt;ul&gt;</span>
<span class="cp">{%</span> <span class="k">for</span> <span class="nv">gender</span> <span class="k">in</span> <span class="nv">gender_list</span> <span class="cp">%}</span>
    <span class="nt">&lt;li&gt;</span><span class="cp">{{</span> <span class="nv">gender.grouper</span> <span class="cp">}}</span>
    <span class="nt">&lt;ul&gt;</span>
        <span class="cp">{%</span> <span class="k">for</span> <span class="nv">item</span> <span class="k">in</span> <span class="nv">gender.list</span> <span class="cp">%}</span>
        <span class="nt">&lt;li&gt;</span><span class="cp">{{</span> <span class="nv">item.first_name</span> <span class="cp">}}</span> <span class="cp">{{</span> <span class="nv">item.last_name</span> <span class="cp">}}</span><span class="nt">&lt;/li&gt;</span>
        <span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
    <span class="nt">&lt;/ul&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
<span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
<span class="nt">&lt;/ul&gt;</span>
</pre></div>
</div>
<p>Let's walk through this example. <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">regroup</span> <span class="pre">%}</span></tt> takes three arguments: the
list you want to regroup, the attribute to group by, and the name of the
resulting list. Here, we're regrouping the <tt class="docutils literal"><span class="pre">people</span></tt> list by the <tt class="docutils literal"><span class="pre">gender</span></tt>
attribute and calling the result <tt class="docutils literal"><span class="pre">gender_list</span></tt>.</p>
<p><tt class="docutils literal"><span class="pre">{%</span> <span class="pre">regroup</span> <span class="pre">%}</span></tt> produces a list (in this case, <tt class="docutils literal"><span class="pre">gender_list</span></tt>) of
<strong>group objects</strong>. Each group object has two attributes:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">grouper</span></tt> -- the item that was grouped by (e.g., the string "Male" or
"Female").</li>
<li><tt class="docutils literal"><span class="pre">list</span></tt> -- a list of all items in this group (e.g., a list of all people
with gender='Male').</li>
</ul>
<p>Note that <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">regroup</span> <span class="pre">%}</span></tt> does not order its input! Our example relies on
the fact that the <tt class="docutils literal"><span class="pre">people</span></tt> list was ordered by <tt class="docutils literal"><span class="pre">gender</span></tt> in the first place.
If the <tt class="docutils literal"><span class="pre">people</span></tt> list did <em>not</em> order its members by <tt class="docutils literal"><span class="pre">gender</span></tt>, the
regrouping would naively display more than one group for a single gender. For
example, say the <tt class="docutils literal"><span class="pre">people</span></tt> list was set to this (note that the males are not
grouped together):</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">people</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="s">'first_name'</span><span class="p">:</span> <span class="s">'Bill'</span><span class="p">,</span> <span class="s">'last_name'</span><span class="p">:</span> <span class="s">'Clinton'</span><span class="p">,</span> <span class="s">'gender'</span><span class="p">:</span> <span class="s">'Male'</span><span class="p">},</span>
    <span class="p">{</span><span class="s">'first_name'</span><span class="p">:</span> <span class="s">'Pat'</span><span class="p">,</span> <span class="s">'last_name'</span><span class="p">:</span> <span class="s">'Smith'</span><span class="p">,</span> <span class="s">'gender'</span><span class="p">:</span> <span class="s">'Unknown'</span><span class="p">},</span>
    <span class="p">{</span><span class="s">'first_name'</span><span class="p">:</span> <span class="s">'Margaret'</span><span class="p">,</span> <span class="s">'last_name'</span><span class="p">:</span> <span class="s">'Thatcher'</span><span class="p">,</span> <span class="s">'gender'</span><span class="p">:</span> <span class="s">'Female'</span><span class="p">},</span>
    <span class="p">{</span><span class="s">'first_name'</span><span class="p">:</span> <span class="s">'George'</span><span class="p">,</span> <span class="s">'last_name'</span><span class="p">:</span> <span class="s">'Bush'</span><span class="p">,</span> <span class="s">'gender'</span><span class="p">:</span> <span class="s">'Male'</span><span class="p">},</span>
    <span class="p">{</span><span class="s">'first_name'</span><span class="p">:</span> <span class="s">'Condoleezza'</span><span class="p">,</span> <span class="s">'last_name'</span><span class="p">:</span> <span class="s">'Rice'</span><span class="p">,</span> <span class="s">'gender'</span><span class="p">:</span> <span class="s">'Female'</span><span class="p">},</span>
<span class="p">]</span>
</pre></div>
</div>
<p>With this input for <tt class="docutils literal"><span class="pre">people</span></tt>, the example <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">regroup</span> <span class="pre">%}</span></tt> template code
above would result in the following output:</p>
<ul class="simple">
<li>Male:<ul>
<li>Bill Clinton</li>
</ul>
</li>
<li>Unknown:<ul>
<li>Pat Smith</li>
</ul>
</li>
<li>Female:<ul>
<li>Margaret Thatcher</li>
</ul>
</li>
<li>Male:<ul>
<li>George Bush</li>
</ul>
</li>
<li>Female:<ul>
<li>Condoleezza Rice</li>
</ul>
</li>
</ul>
<p>The easiest solution to this gotcha is to make sure in your view code that the
data is ordered according to how you want to display it.</p>
<p>Another solution is to sort the data in the template using the
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatefilter-dictsort"><tt class="xref std std-tfilter docutils literal"><span class="pre">dictsort</span></tt></a> filter, if your data is in a list of dictionaries:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">regroup</span> <span class="nv">people</span><span class="o">|</span><span class="nf">dictsort</span><span class="s2">:"gender"</span> <span class="nv">by</span> <span class="nv">gender</span> <span class="k">as</span> <span class="nv">gender_list</span> <span class="cp">%}</span>
</pre></div>
</div>
</div>
<div class="section" id="s-grouping-on-other-properties">
<span id="grouping-on-other-properties"></span><h3>Grouping on other properties<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#grouping-on-other-properties" title="Permalink to this headline">¶</a></h3>
<p>Any valid template lookup is a legal grouping attribute for the regroup
tag, including methods, attributes, dictionary keys and list items. For
example, if the "gender" field is a foreign key to a class with
an attribute "description," you could use:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">regroup</span> <span class="nv">people</span> <span class="nv">by</span> <span class="nv">gender.description</span> <span class="k">as</span> <span class="nv">gender_list</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>Or, if <tt class="docutils literal"><span class="pre">gender</span></tt> is a field with <tt class="docutils literal"><span class="pre">choices</span></tt>, it will have a
<tt class="xref py py-meth docutils literal"><span class="pre">^django.db.models.Model.get_FOO_display()</span></tt> method available as an
attribute, allowing  you to group on the display string rather than the
<tt class="docutils literal"><span class="pre">choices</span></tt> key:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">regroup</span> <span class="nv">people</span> <span class="nv">by</span> <span class="nv">get_gender_display</span> <span class="k">as</span> <span class="nv">gender_list</span> <span class="cp">%}</span>
</pre></div>
</div>
<p><tt class="docutils literal"><span class="pre">{{</span> <span class="pre">gender.grouper</span> <span class="pre">}}</span></tt> will now display the value fields from the
<tt class="docutils literal"><span class="pre">choices</span></tt> set rather than the keys.</p>
</div>
<div class="section" id="s-spaceless">
<span id="s-std:templatetag-spaceless"></span><span id="spaceless"></span><span id="std:templatetag-spaceless"></span><h3>spaceless<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#spaceless" title="Permalink to this headline">¶</a></h3>
<p>Removes whitespace between HTML tags. This includes tab
characters and newlines.</p>
<p>Example usage:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">spaceless</span> <span class="cp">%}</span>
    <span class="nt">&lt;p&gt;</span>
        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"foo/"</span><span class="nt">&gt;</span>Foo<span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;/p&gt;</span>
<span class="cp">{%</span> <span class="k">endspaceless</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>This example would return this HTML:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="nt">&lt;p&gt;&lt;a</span> <span class="na">href=</span><span class="s">"foo/"</span><span class="nt">&gt;</span>Foo<span class="nt">&lt;/a&gt;&lt;/p&gt;</span>
</pre></div>
</div>
<p>Only space between <em>tags</em> is removed -- not space between tags and text. In
this example, the space around <tt class="docutils literal"><span class="pre">Hello</span></tt> won't be stripped:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">spaceless</span> <span class="cp">%}</span>
    <span class="nt">&lt;strong&gt;</span>
        Hello
    <span class="nt">&lt;/strong&gt;</span>
<span class="cp">{%</span> <span class="k">endspaceless</span> <span class="cp">%}</span>
</pre></div>
</div>
</div>
<div class="section" id="s-ssi">
<span id="s-std:templatetag-ssi"></span><span id="ssi"></span><span id="std:templatetag-ssi"></span><h3>ssi<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#ssi" title="Permalink to this headline">¶</a></h3>
<p>Outputs the contents of a given file into the page.</p>
<p>Like a simple <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-include"><tt class="xref std std-ttag docutils literal"><span class="pre">include</span></tt></a> tag, <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">ssi</span> <span class="pre">%}</span></tt> includes the contents of
another file -- which must be specified using an absolute path -- in the
current page:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">ssi</span> <span class="o">/</span><span class="nv">home</span><span class="o">/</span><span class="nv">html</span><span class="o">/</span><span class="nv">ljworld.com</span><span class="o">/</span><span class="nv">includes</span><span class="o">/</span><span class="nv">right_generic.html</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>If the optional "parsed" parameter is given, the contents of the included
file are evaluated as template code, within the current context:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">ssi</span> <span class="o">/</span><span class="nv">home</span><span class="o">/</span><span class="nv">html</span><span class="o">/</span><span class="nv">ljworld.com</span><span class="o">/</span><span class="nv">includes</span><span class="o">/</span><span class="nv">right_generic.html</span> <span class="nv">parsed</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>Note that if you use <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">ssi</span> <span class="pre">%}</span></tt>, you'll need to define
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-ALLOWED_INCLUDE_ROOTS"><tt class="xref std std-setting docutils literal"><span class="pre">ALLOWED_INCLUDE_ROOTS</span></tt></a> in your Django settings, as a security
measure.</p>
<p>See also: <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-include"><tt class="xref std std-ttag docutils literal"><span class="pre">{%</span> <span class="pre">include</span> <span class="pre">%}</span></tt></a>.</p>
<div class="admonition-forwards-compatibility admonition ">
<p class="first admonition-title">Forwards compatibility</p>
<div class="versionchanged">
<span class="title">Changed in Django 1.3:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.3/"><em>Please see the release notes</em></a></div>
<p>In Django 1.5, the behavior of the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-ssi"><tt class="xref std std-ttag docutils literal"><span class="pre">ssi</span></tt></a> template tag will
change, with the first argument being made into a context
variable, rather than being a special case unquoted constant. This
will allow the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-ssi"><tt class="xref std std-ttag docutils literal"><span class="pre">ssi</span></tt></a> tag to use a context variable as the
value of the page to be included.</p>
<p>In order to provide a forwards compatibility path, Django 1.3
provides a future compatibility library -- <tt class="docutils literal"><span class="pre">future</span></tt> -- that
implements the new behavior. To use this library, add a
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-load"><tt class="xref std std-ttag docutils literal"><span class="pre">load</span></tt></a> call at the top of any template using the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-ssi"><tt class="xref std std-ttag docutils literal"><span class="pre">ssi</span></tt></a>
tag, and wrap the first argument to the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-ssi"><tt class="xref std std-ttag docutils literal"><span class="pre">ssi</span></tt></a> tag in quotes.
For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">load</span> <span class="nv">ssi</span> <span class="nv">from</span> <span class="nv">future</span> <span class="cp">%}</span>
<span class="cp">{%</span> <span class="k">ssi</span> <span class="s1">'/home/html/ljworld.com/includes/right_generic.html'</span> <span class="cp">%}</span>
</pre></div>
</div>
<p class="last">In Django 1.5, the unquoted constant behavior will be replaced
with the behavior provided by the <tt class="docutils literal"><span class="pre">future</span></tt> tag library.
Existing templates should be migrated to use the new syntax.</p>
</div>
</div>
<div class="section" id="s-templatetag">
<span id="s-std:templatetag-templatetag"></span><span id="templatetag"></span><span id="std:templatetag-templatetag"></span><h3>templatetag<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#templatetag" title="Permalink to this headline">¶</a></h3>
<p>Outputs one of the syntax characters used to compose template tags.</p>
<p>Since the template system has no concept of "escaping", to display one of the
bits used in template tags, you must use the <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">templatetag</span> <span class="pre">%}</span></tt> tag.</p>
<p>The argument tells which template bit to output:</p>
<table class="docutils">
<colgroup>
<col width="72%">
<col width="28%">
</colgroup>
<thead valign="bottom">
<tr><th class="head">Argument</th>
<th class="head">Outputs</th>
</tr>
</thead>
<tbody valign="top">
<tr><td><tt class="docutils literal"><span class="pre">openblock</span></tt></td>
<td><tt class="docutils literal"><span class="pre">{%</span></tt></td>
</tr>
<tr><td><tt class="docutils literal"><span class="pre">closeblock</span></tt></td>
<td><tt class="docutils literal"><span class="pre">%}</span></tt></td>
</tr>
<tr><td><tt class="docutils literal"><span class="pre">openvariable</span></tt></td>
<td><tt class="docutils literal"><span class="pre">{{</span></tt></td>
</tr>
<tr><td><tt class="docutils literal"><span class="pre">closevariable</span></tt></td>
<td><tt class="docutils literal"><span class="pre">}}</span></tt></td>
</tr>
<tr><td><tt class="docutils literal"><span class="pre">openbrace</span></tt></td>
<td><tt class="docutils literal"><span class="pre">{</span></tt></td>
</tr>
<tr><td><tt class="docutils literal"><span class="pre">closebrace</span></tt></td>
<td><tt class="docutils literal"><span class="pre">}</span></tt></td>
</tr>
<tr><td><tt class="docutils literal"><span class="pre">opencomment</span></tt></td>
<td><tt class="docutils literal"><span class="pre">{#</span></tt></td>
</tr>
<tr><td><tt class="docutils literal"><span class="pre">closecomment</span></tt></td>
<td><tt class="docutils literal"><span class="pre">#}</span></tt></td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="s-url">
<span id="s-std:templatetag-url"></span><span id="url"></span><span id="std:templatetag-url"></span><h3>url<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#url" title="Permalink to this headline">¶</a></h3>
<p>Returns an absolute path reference (a URL without the domain name) matching a
given view function and optional parameters. This is a way to output links
without violating the DRY principle by having to hard-code URLs in your
templates:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">url</span> <span class="nv">path.to.some_view</span> <span class="nv">v1</span> <span class="nv">v2</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>The first argument is a path to a view function in the format
<tt class="docutils literal"><span class="pre">package.package.module.function</span></tt>. Additional arguments are optional and
should be space-separated values that will be used as arguments in the URL.
The example above shows passing positional arguments. Alternatively you may
use keyword syntax:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">url</span> <span class="nv">path.to.some_view</span> <span class="nv">arg1</span><span class="o">=</span><span class="nv">v1</span> <span class="nv">arg2</span><span class="o">=</span><span class="nv">v2</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>Do not mix both positional and keyword syntax in a single call. All arguments
required by the URLconf should be present.</p>
<p>For example, suppose you have a view, <tt class="docutils literal"><span class="pre">app_views.client</span></tt>, whose URLconf
takes a client ID (here, <tt class="docutils literal"><span class="pre">client()</span></tt> is a method inside the views file
<tt class="docutils literal"><span class="pre">app_views.py</span></tt>). The URLconf line might look like this:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="p">(</span><span class="s">'^client/(\d+)/$'</span><span class="p">,</span> <span class="s">'app_views.client'</span><span class="p">)</span>
</pre></div>
</div>
<p>If this app's URLconf is included into the project's URLconf under a path
such as this:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="p">(</span><span class="s">'^clients/'</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">'project_name.app_name.urls'</span><span class="p">))</span>
</pre></div>
</div>
<p>...then, in a template, you can create a link to this view like this:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">url</span> <span class="nv">app_views.client</span> <span class="nv">client.id</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>The template tag will output the string <tt class="docutils literal"><span class="pre">/clients/client/123/</span></tt>.</p>
<p>If you're using <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/http/urls/#naming-url-patterns"><em>named URL patterns</em></a>, you can
refer to the name of the pattern in the <tt class="docutils literal"><span class="pre">url</span></tt> tag instead of using the
path to the view.</p>
<p>Note that if the URL you're reversing doesn't exist, you'll get an
<tt class="xref py py-exc docutils literal"><span class="pre">^django.core.urlresolvers.NoReverseMatch</span></tt> exception raised, which will
cause your site to display an error page.</p>
<p>If you'd like to retrieve a URL without displaying it, you can use a slightly
different call:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">url</span> <span class="nv">path.to.view</span> <span class="nv">arg</span> <span class="nv">arg2</span> <span class="k">as</span> <span class="nv">the_url</span> <span class="cp">%}</span>

<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"</span><span class="cp">{{</span> <span class="nv">the_url</span> <span class="cp">}}</span><span class="s">"</span><span class="nt">&gt;</span>I'm linking to <span class="cp">{{</span> <span class="nv">the_url</span> <span class="cp">}}</span><span class="nt">&lt;/a&gt;</span>
</pre></div>
</div>
<p>This <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">url</span> <span class="pre">...</span> <span class="pre">as</span> <span class="pre">var</span> <span class="pre">%}</span></tt> syntax will <em>not</em> cause an error if the view is
missing. In practice you'll use this to link to views that are optional:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">url</span> <span class="nv">path.to.view</span> <span class="k">as</span> <span class="nv">the_url</span> <span class="cp">%}</span>
<span class="cp">{%</span> <span class="k">if</span> <span class="nv">the_url</span> <span class="cp">%}</span>
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"</span><span class="cp">{{</span> <span class="nv">the_url</span> <span class="cp">}}</span><span class="s">"</span><span class="nt">&gt;</span>Link to optional stuff<span class="nt">&lt;/a&gt;</span>
<span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>If you'd like to retrieve a namespaced URL, specify the fully qualified name:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">url</span> <span class="nv">myapp</span><span class="o">:</span><span class="nv">view</span><span class="o">-</span><span class="nv">name</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>This will follow the normal <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/http/urls/#topics-http-reversing-url-namespaces"><em>namespaced URL resolution strategy</em></a>, including using any hints provided
by the context as to the current application.</p>
<div class="versionchanged">
<span class="title">Changed in Django 1.2:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.2/"><em>Please see the release notes</em></a></div>
<p>For backwards compatibility, the <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">url</span> <span class="pre">%}</span></tt> tag also supports the
use of commas to separate arguments. You shouldn't use this in any new
projects, but for the sake of the people who are still using it,
here's what it looks like:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">url</span> <span class="nv">path.to.view</span> <span class="nv">arg</span><span class="o">,</span><span class="nv">arg2</span> <span class="cp">%}</span>
<span class="cp">{%</span> <span class="k">url</span> <span class="nv">path.to.view</span> <span class="nv">arg</span><span class="o">,</span> <span class="nv">arg2</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>This syntax doesn't support the use of literal commas, or equals
signs. Did we mention you shouldn't use this syntax in any new
projects?</p>
<div class="admonition-forwards-compatibility admonition ">
<p class="first admonition-title">Forwards compatibility</p>
<div class="versionchanged">
<span class="title">Changed in Django 1.3:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.3/"><em>Please see the release notes</em></a></div>
<p>In Django 1.5, the behavior of the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-url"><tt class="xref std std-ttag docutils literal"><span class="pre">url</span></tt></a> template tag will
change, with the first argument being made into a context
variable, rather than being a special case unquoted constant. This
will allow the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-url"><tt class="xref std std-ttag docutils literal"><span class="pre">url</span></tt></a> tag to use a context variable as the
value of the URL name to be reversed.</p>
<p>In order to provide a forwards compatibility path, Django 1.3
provides a future compatibility library -- <tt class="docutils literal"><span class="pre">future</span></tt> -- that
implements the new behavior. To use this library, add a
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-load"><tt class="xref std std-ttag docutils literal"><span class="pre">load</span></tt></a> call at the top of any template using the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-url"><tt class="xref std std-ttag docutils literal"><span class="pre">url</span></tt></a>
tag, and wrap the first argument to the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-url"><tt class="xref std std-ttag docutils literal"><span class="pre">url</span></tt></a> tag in quotes.
For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">load</span> <span class="nv">url</span> <span class="nv">from</span> <span class="nv">future</span> <span class="cp">%}</span>


<span class="cp">{%</span> <span class="k">url</span> <span class="s1">'app_views.client'</span> <span class="cp">%}</span>

<span class="cp">{%</span> <span class="k">url</span> <span class="s1">'myapp:view-name'</span> <span class="cp">%}</span>

<span class="cp">{%</span> <span class="k">with</span> <span class="nv">view_path</span><span class="o">=</span><span class="s2">"app_views.client"</span> <span class="cp">%}</span>
<span class="cp">{%</span> <span class="k">url</span> <span class="nv">view_path</span> <span class="nv">client.id</span> <span class="cp">%}</span>
<span class="cp">{%</span> <span class="k">endwith</span> <span class="cp">%}</span>

<span class="cp">{%</span> <span class="k">with</span> <span class="nv">url_name</span><span class="o">=</span><span class="s2">"client-detail-view"</span> <span class="cp">%}</span>
<span class="cp">{%</span> <span class="k">url</span> <span class="nv">url_name</span> <span class="nv">client.id</span> <span class="cp">%}</span>
<span class="cp">{%</span> <span class="k">endwith</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>The new library also drops support for the comma syntax for
separating arguments to the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-url"><tt class="xref std std-ttag docutils literal"><span class="pre">url</span></tt></a> template tag.</p>
<p class="last">In Django 1.5, the old behavior will be replaced with the behavior
provided by the <tt class="docutils literal"><span class="pre">future</span></tt> tag library. Existing templates be
migrated to use the new syntax.</p>
</div>
</div>
<div class="section" id="s-widthratio">
<span id="s-std:templatetag-widthratio"></span><span id="widthratio"></span><span id="std:templatetag-widthratio"></span><h3>widthratio<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#widthratio" title="Permalink to this headline">¶</a></h3>
<p>For creating bar charts and such, this tag calculates the ratio of a given
value to a maximum value, and then applies that ratio to a constant.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"bar.gif"</span> <span class="na">height=</span><span class="s">"10"</span> <span class="na">width=</span><span class="s">"</span><span class="cp">{%</span> <span class="k">widthratio</span> <span class="nv">this_value</span> <span class="nv">max_value</span> <span class="m">100</span> <span class="cp">%}</span><span class="s">"</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
<p>Above, if <tt class="docutils literal"><span class="pre">this_value</span></tt> is 175 and <tt class="docutils literal"><span class="pre">max_value</span></tt> is 200, the image in the
above example will be 88 pixels wide (because 175/200 = .875; .875 * 100 = 87.5
which is rounded up to 88).</p>
</div>
<div class="section" id="s-with">
<span id="s-std:templatetag-with"></span><span id="with"></span><span id="std:templatetag-with"></span><h3>with<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#with" title="Permalink to this headline">¶</a></h3>
<div class="versionchanged">
<span class="title">Changed in Django 1.3:</span> New keyword argument format and multiple variable assignments.</div>
<p>Caches a complex variable under a simpler name. This is useful when accessing
an "expensive" method (e.g., one that hits the database) multiple times.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">with</span> <span class="nv">total</span><span class="o">=</span><span class="nv">business.employees.count</span> <span class="cp">%}</span>
    <span class="cp">{{</span> <span class="nv">total</span> <span class="cp">}}</span> employee<span class="cp">{{</span> <span class="nv">total</span><span class="o">|</span><span class="nf">pluralize</span> <span class="cp">}}</span>
<span class="cp">{%</span> <span class="k">endwith</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>The populated variable (in the example above, <tt class="docutils literal"><span class="pre">total</span></tt>) is only available
between the <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">with</span> <span class="pre">%}</span></tt> and <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">endwith</span> <span class="pre">%}</span></tt> tags.</p>
<p>You can assign more than one context variable:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">with</span> <span class="nv">alpha</span><span class="o">=</span><span class="m">1</span> <span class="nv">beta</span><span class="o">=</span><span class="m">2</span> <span class="cp">%}</span>
    ...
<span class="cp">{%</span> <span class="k">endwith</span> <span class="cp">%}</span>
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">The previous more verbose format is still supported:
<tt class="docutils literal"><span class="pre">{%</span> <span class="pre">with</span> <span class="pre">business.employees.count</span> <span class="pre">as</span> <span class="pre">total</span> <span class="pre">%}</span></tt></p>
</div>
</div>
</div>
<div class="section" id="s-built-in-filter-reference">
<span id="s-ref-templates-builtins-filters"></span><span id="built-in-filter-reference"></span><span id="ref-templates-builtins-filters"></span><h2>Built-in filter reference<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#built-in-filter-reference" title="Permalink to this headline">¶</a></h2>
<div class="section" id="s-add">
<span id="s-std:templatefilter-add"></span><span id="add"></span><span id="std:templatefilter-add"></span><h3>add<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#add" title="Permalink to this headline">¶</a></h3>
<p>Adds the argument to the value.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">add</span><span class="s2">:"2"</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">4</span></tt>, then the output will be <tt class="docutils literal"><span class="pre">6</span></tt>.</p>
<div class="versionchanged">
<span class="title">Changed in Django 1.2:</span> The following behavior didn't exist in previous Django versions.</div>
<p>This filter will first try to coerce both values to integers. If this fails,
it'll attempt to add the values together anyway. This will work on some data
types (strings, list, etc.) and fail on others. If it fails, the result will
be an empty string.</p>
<p>For example, if we have:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">first</span><span class="o">|</span><span class="nf">add</span><span class="o">:</span><span class="nv">second</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>and <tt class="docutils literal"><span class="pre">first</span></tt> is <tt class="docutils literal"><span class="pre">[1,</span> <span class="pre">2,</span> <span class="pre">3]</span></tt> and <tt class="docutils literal"><span class="pre">second</span></tt> is <tt class="docutils literal"><span class="pre">[4,</span> <span class="pre">5,</span> <span class="pre">6]</span></tt>, then the
output will be <tt class="docutils literal"><span class="pre">[1,</span> <span class="pre">2,</span> <span class="pre">3,</span> <span class="pre">4,</span> <span class="pre">5,</span> <span class="pre">6]</span></tt>.</p>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p class="last">Strings that can be coerced to integers will be <strong>summed</strong>, not
concatenated, as in the first example above.</p>
</div>
</div>
<div class="section" id="s-addslashes">
<span id="s-std:templatefilter-addslashes"></span><span id="addslashes"></span><span id="std:templatefilter-addslashes"></span><h3>addslashes<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#addslashes" title="Permalink to this headline">¶</a></h3>
<p>Adds slashes before quotes. Useful for escaping strings in CSV, for example.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">addslashes</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">"I'm</span> <span class="pre">using</span> <span class="pre">Django"</span></tt>, the output will be
<tt class="docutils literal"><span class="pre">"I\'m</span> <span class="pre">using</span> <span class="pre">Django"</span></tt>.</p>
</div>
<div class="section" id="s-capfirst">
<span id="s-std:templatefilter-capfirst"></span><span id="capfirst"></span><span id="std:templatefilter-capfirst"></span><h3>capfirst<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#capfirst" title="Permalink to this headline">¶</a></h3>
<p>Capitalizes the first character of the value.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">capfirst</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">"django"</span></tt>, the output will be <tt class="docutils literal"><span class="pre">"Django"</span></tt>.</p>
</div>
<div class="section" id="s-center">
<span id="s-std:templatefilter-center"></span><span id="center"></span><span id="std:templatefilter-center"></span><h3>center<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#center" title="Permalink to this headline">¶</a></h3>
<p>Centers the value in a field of a given width.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre>"<span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">center</span><span class="s2">:"15"</span> <span class="cp">}}</span>"
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">"Django"</span></tt>, the output will be <tt class="docutils literal"><span class="pre">"</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class="pre">Django</span>&nbsp;&nbsp;&nbsp; <span class="pre">"</span></tt>.</p>
</div>
<div class="section" id="s-cut">
<span id="s-std:templatefilter-cut"></span><span id="cut"></span><span id="std:templatefilter-cut"></span><h3>cut<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#cut" title="Permalink to this headline">¶</a></h3>
<p>Removes all values of arg from the given string.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">cut</span><span class="s2">:" "</span><span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">"String</span> <span class="pre">with</span> <span class="pre">spaces"</span></tt>, the output will be
<tt class="docutils literal"><span class="pre">"Stringwithspaces"</span></tt>.</p>
</div>
<div class="section" id="s-date">
<span id="s-std:templatefilter-date"></span><span id="date"></span><span id="std:templatefilter-date"></span><h3>date<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#date" title="Permalink to this headline">¶</a></h3>
<p>Formats a date according to the given format.</p>
<p>Uses a similar format as PHP's <tt class="docutils literal"><span class="pre">date()</span></tt> function (<a class="reference external" href="http://php.net/date" wrc_done="true">http://php.net/date</a>&nbsp;<span class="wrc_icon wrc13" rating="{&quot;icon&quot;:&quot;green3-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:3,&quot;flags&quot;:{&quot;it&quot;:1}}"></span>)
with some differences.</p>
<p>Available format strings:</p>
<table class="docutils">
<colgroup>
<col width="12%">
<col width="31%">
<col width="57%">
</colgroup>
<thead valign="bottom">
<tr><th class="head">Format character</th>
<th class="head">Description</th>
<th class="head">Example output</th>
</tr>
</thead>
<tbody valign="top">
<tr><td>a</td>
<td><tt class="docutils literal"><span class="pre">'a.m.'</span></tt> or <tt class="docutils literal"><span class="pre">'p.m.'</span></tt> (Note that
this is slightly different than PHP's
output, because this includes periods
to match Associated Press style.)</td>
<td><tt class="docutils literal"><span class="pre">'a.m.'</span></tt></td>
</tr>
<tr><td>A</td>
<td><tt class="docutils literal"><span class="pre">'AM'</span></tt> or <tt class="docutils literal"><span class="pre">'PM'</span></tt>.</td>
<td><tt class="docutils literal"><span class="pre">'AM'</span></tt></td>
</tr>
<tr><td>b</td>
<td>Month, textual, 3 letters, lowercase.</td>
<td><tt class="docutils literal"><span class="pre">'jan'</span></tt></td>
</tr>
<tr><td>B</td>
<td>Not implemented.</td>
<td>&nbsp;</td>
</tr>
<tr><td>c</td>
<td>ISO 8601 format. (Note: unlike others
formatters, such as "Z", "O" or "r",
the "c" formatter will not add timezone
offset if value is a naive datetime
(see <a class="reference external" href="http://docs.python.org/2.7/library/datetime.html#datetime.tzinfo" title="(in Python v2.7)" wrc_done="true"><tt class="xref py py-class docutils literal"><span class="pre">datetime.tzinfo</span></tt></a>&nbsp;<span class="wrc_icon wrc11" rating="{&quot;icon&quot;:&quot;green1-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:1,&quot;flags&quot;:{&quot;it&quot;:1}}"></span>).</td>
<td><tt class="docutils literal"><span class="pre">2008-01-02T10:30:00.000123+02:00</span></tt>,
or <tt class="docutils literal"><span class="pre">2008-01-02T10:30:00.000123</span></tt> if the datetime is naive</td>
</tr>
<tr><td>d</td>
<td>Day of the month, 2 digits with
leading zeros.</td>
<td><tt class="docutils literal"><span class="pre">'01'</span></tt> to <tt class="docutils literal"><span class="pre">'31'</span></tt></td>
</tr>
<tr><td>D</td>
<td>Day of the week, textual, 3 letters.</td>
<td><tt class="docutils literal"><span class="pre">'Fri'</span></tt></td>
</tr>
<tr><td>e</td>
<td>Timezone name. Could be in any format,
or might return an empty string,
depending on the datetime.</td>
<td><tt class="docutils literal"><span class="pre">''</span></tt>, <tt class="docutils literal"><span class="pre">'GMT'</span></tt>, <tt class="docutils literal"><span class="pre">'-500'</span></tt>, <tt class="docutils literal"><span class="pre">'US/Eastern'</span></tt>, etc.</td>
</tr>
<tr><td>E</td>
<td>Month, locale specific alternative
representation usually used for long
date representation.</td>
<td><tt class="docutils literal"><span class="pre">'listopada'</span></tt> (for Polish locale, as opposed to <tt class="docutils literal"><span class="pre">'Listopad'</span></tt>)</td>
</tr>
<tr><td>f</td>
<td>Time, in 12-hour hours and minutes,
with minutes left off if they're zero.
Proprietary extension.</td>
<td><tt class="docutils literal"><span class="pre">'1'</span></tt>, <tt class="docutils literal"><span class="pre">'1:30'</span></tt></td>
</tr>
<tr><td>F</td>
<td>Month, textual, long.</td>
<td><tt class="docutils literal"><span class="pre">'January'</span></tt></td>
</tr>
<tr><td>g</td>
<td>Hour, 12-hour format without leading
zeros.</td>
<td><tt class="docutils literal"><span class="pre">'1'</span></tt> to <tt class="docutils literal"><span class="pre">'12'</span></tt></td>
</tr>
<tr><td>G</td>
<td>Hour, 24-hour format without leading
zeros.</td>
<td><tt class="docutils literal"><span class="pre">'0'</span></tt> to <tt class="docutils literal"><span class="pre">'23'</span></tt></td>
</tr>
<tr><td>h</td>
<td>Hour, 12-hour format.</td>
<td><tt class="docutils literal"><span class="pre">'01'</span></tt> to <tt class="docutils literal"><span class="pre">'12'</span></tt></td>
</tr>
<tr><td>H</td>
<td>Hour, 24-hour format.</td>
<td><tt class="docutils literal"><span class="pre">'00'</span></tt> to <tt class="docutils literal"><span class="pre">'23'</span></tt></td>
</tr>
<tr><td>i</td>
<td>Minutes.</td>
<td><tt class="docutils literal"><span class="pre">'00'</span></tt> to <tt class="docutils literal"><span class="pre">'59'</span></tt></td>
</tr>
<tr><td>I</td>
<td>Not implemented.</td>
<td>&nbsp;</td>
</tr>
<tr><td>j</td>
<td>Day of the month without leading
zeros.</td>
<td><tt class="docutils literal"><span class="pre">'1'</span></tt> to <tt class="docutils literal"><span class="pre">'31'</span></tt></td>
</tr>
<tr><td>l</td>
<td>Day of the week, textual, long.</td>
<td><tt class="docutils literal"><span class="pre">'Friday'</span></tt></td>
</tr>
<tr><td>L</td>
<td>Boolean for whether it's a leap year.</td>
<td><tt class="xref docutils literal"><span class="pre">True</span></tt> or <tt class="xref docutils literal"><span class="pre">False</span></tt></td>
</tr>
<tr><td>m</td>
<td>Month, 2 digits with leading zeros.</td>
<td><tt class="docutils literal"><span class="pre">'01'</span></tt> to <tt class="docutils literal"><span class="pre">'12'</span></tt></td>
</tr>
<tr><td>M</td>
<td>Month, textual, 3 letters.</td>
<td><tt class="docutils literal"><span class="pre">'Jan'</span></tt></td>
</tr>
<tr><td>n</td>
<td>Month without leading zeros.</td>
<td><tt class="docutils literal"><span class="pre">'1'</span></tt> to <tt class="docutils literal"><span class="pre">'12'</span></tt></td>
</tr>
<tr><td>N</td>
<td>Month abbreviation in Associated Press
style. Proprietary extension.</td>
<td><tt class="docutils literal"><span class="pre">'Jan.'</span></tt>, <tt class="docutils literal"><span class="pre">'Feb.'</span></tt>, <tt class="docutils literal"><span class="pre">'March'</span></tt>, <tt class="docutils literal"><span class="pre">'May'</span></tt></td>
</tr>
<tr><td>o</td>
<td>ISO-8601 week-numbering year,
corresponding to
the ISO-8601 week number (W)</td>
<td><tt class="docutils literal"><span class="pre">'1999'</span></tt></td>
</tr>
<tr><td>O</td>
<td>Difference to Greenwich time in hours.</td>
<td><tt class="docutils literal"><span class="pre">'+0200'</span></tt></td>
</tr>
<tr><td>P</td>
<td>Time, in 12-hour hours, minutes and
'a.m.'/'p.m.', with minutes left off
if they're zero and the special-case
strings 'midnight' and 'noon' if
appropriate. Proprietary extension.</td>
<td><tt class="docutils literal"><span class="pre">'1</span> <span class="pre">a.m.'</span></tt>, <tt class="docutils literal"><span class="pre">'1:30</span> <span class="pre">p.m.'</span></tt>, <tt class="docutils literal"><span class="pre">'midnight'</span></tt>, <tt class="docutils literal"><span class="pre">'noon'</span></tt>, <tt class="docutils literal"><span class="pre">'12:30</span> <span class="pre">p.m.'</span></tt></td>
</tr>
<tr><td>r</td>
<td><span class="target" id="index-0"></span><a class="rfc reference external" href="http://tools.ietf.org/html/rfc2822.html" wrc_done="true"><strong>RFC 2822</strong></a>&nbsp;<span class="wrc_icon wrc11" rating="{&quot;icon&quot;:&quot;green1-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:1,&quot;flags&quot;:{}}"></span> formatted date.</td>
<td><tt class="docutils literal"><span class="pre">'Thu,</span> <span class="pre">21</span> <span class="pre">Dec</span> <span class="pre">2000</span> <span class="pre">16:01:07</span> <span class="pre">+0200'</span></tt></td>
</tr>
<tr><td>s</td>
<td>Seconds, 2 digits with leading zeros.</td>
<td><tt class="docutils literal"><span class="pre">'00'</span></tt> to <tt class="docutils literal"><span class="pre">'59'</span></tt></td>
</tr>
<tr><td>S</td>
<td>English ordinal suffix for day of the
month, 2 characters.</td>
<td><tt class="docutils literal"><span class="pre">'st'</span></tt>, <tt class="docutils literal"><span class="pre">'nd'</span></tt>, <tt class="docutils literal"><span class="pre">'rd'</span></tt> or <tt class="docutils literal"><span class="pre">'th'</span></tt></td>
</tr>
<tr><td>t</td>
<td>Number of days in the given month.</td>
<td><tt class="docutils literal"><span class="pre">28</span></tt> to <tt class="docutils literal"><span class="pre">31</span></tt></td>
</tr>
<tr><td>T</td>
<td>Time zone of this machine.</td>
<td><tt class="docutils literal"><span class="pre">'EST'</span></tt>, <tt class="docutils literal"><span class="pre">'MDT'</span></tt></td>
</tr>
<tr><td>u</td>
<td>Microseconds.</td>
<td><tt class="docutils literal"><span class="pre">0</span></tt> to <tt class="docutils literal"><span class="pre">999999</span></tt></td>
</tr>
<tr><td>U</td>
<td>Seconds since the Unix Epoch
(January 1 1970 00:00:00 UTC).</td>
<td>&nbsp;</td>
</tr>
<tr><td>w</td>
<td>Day of the week, digits without
leading zeros.</td>
<td><tt class="docutils literal"><span class="pre">'0'</span></tt> (Sunday) to <tt class="docutils literal"><span class="pre">'6'</span></tt> (Saturday)</td>
</tr>
<tr><td>W</td>
<td>ISO-8601 week number of year, with
weeks starting on Monday.</td>
<td><tt class="docutils literal"><span class="pre">1</span></tt>, <tt class="docutils literal"><span class="pre">53</span></tt></td>
</tr>
<tr><td>y</td>
<td>Year, 2 digits.</td>
<td><tt class="docutils literal"><span class="pre">'99'</span></tt></td>
</tr>
<tr><td>Y</td>
<td>Year, 4 digits.</td>
<td><tt class="docutils literal"><span class="pre">'1999'</span></tt></td>
</tr>
<tr><td>z</td>
<td>Day of the year.</td>
<td><tt class="docutils literal"><span class="pre">0</span></tt> to <tt class="docutils literal"><span class="pre">365</span></tt></td>
</tr>
<tr><td>Z</td>
<td>Time zone offset in seconds. The
offset for timezones west of UTC is
always negative, and for those east of
UTC is always positive.</td>
<td><tt class="docutils literal"><span class="pre">-43200</span></tt> to <tt class="docutils literal"><span class="pre">43200</span></tt></td>
</tr>
</tbody>
</table>
<div class="versionadded">
<span class="title">New in Django 1.2:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.2/"><em>Please see the release notes</em></a></div>
<p>The <tt class="docutils literal"><span class="pre">c</span></tt> and <tt class="docutils literal"><span class="pre">u</span></tt> format specification characters were added in Django 1.2.</p>
<div class="versionadded">
<span class="title">New in Django 1.4:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.4/"><em>Please see the release notes</em></a></div>
<p>The <tt class="docutils literal"><span class="pre">e</span></tt> and <tt class="docutils literal"><span class="pre">o</span></tt> format specification characters were added in Django 1.4.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">date</span><span class="s2">:"D d M Y"</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is a <tt class="docutils literal"><span class="pre">datetime</span></tt> object (e.g., the result of
<tt class="docutils literal"><span class="pre">datetime.datetime.now()</span></tt>), the output will be the string
<tt class="docutils literal"><span class="pre">'Wed</span> <span class="pre">09</span> <span class="pre">Jan</span> <span class="pre">2008'</span></tt>.</p>
<p>The format passed can be one of the predefined ones <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-DATE_FORMAT"><tt class="xref std std-setting docutils literal"><span class="pre">DATE_FORMAT</span></tt></a>,
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-DATETIME_FORMAT"><tt class="xref std std-setting docutils literal"><span class="pre">DATETIME_FORMAT</span></tt></a>, <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-SHORT_DATE_FORMAT"><tt class="xref std std-setting docutils literal"><span class="pre">SHORT_DATE_FORMAT</span></tt></a> or
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-SHORT_DATETIME_FORMAT"><tt class="xref std std-setting docutils literal"><span class="pre">SHORT_DATETIME_FORMAT</span></tt></a>, or a custom format that uses the format
specifiers shown in the table above. Note that predefined formats may vary
depending on the current locale.</p>
<p>Assuming that <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-USE_L10N"><tt class="xref std std-setting docutils literal"><span class="pre">USE_L10N</span></tt></a> is <tt class="xref docutils literal"><span class="pre">True</span></tt> and <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-LANGUAGE_CODE"><tt class="xref std std-setting docutils literal"><span class="pre">LANGUAGE_CODE</span></tt></a> is,
for example, <tt class="docutils literal"><span class="pre">"es"</span></tt>, then for:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">date</span><span class="s2">:"SHORT_DATE_FORMAT"</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>the output would be the string <tt class="docutils literal"><span class="pre">"09/01/2008"</span></tt> (the <tt class="docutils literal"><span class="pre">"SHORT_DATE_FORMAT"</span></tt>
format specifier for the <tt class="docutils literal"><span class="pre">es</span></tt> locale as shipped with Django is <tt class="docutils literal"><span class="pre">"d/m/Y"</span></tt>).</p>
<p>When used without a format string:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">date</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>...the formatting string defined in the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-DATE_FORMAT"><tt class="xref std std-setting docutils literal"><span class="pre">DATE_FORMAT</span></tt></a> setting will be
used, without applying any localization.</p>
<div class="versionchanged">
<span class="title">Changed in Django 1.2:</span> Predefined formats can now be influenced by the current locale.</div>
</div>
<div class="section" id="s-default">
<span id="s-std:templatefilter-default"></span><span id="default"></span><span id="std:templatefilter-default"></span><h3>default<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#default" title="Permalink to this headline">¶</a></h3>
<p>If value evaluates to <tt class="xref docutils literal"><span class="pre">False</span></tt>, uses the given default. Otherwise, uses the
value.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">default</span><span class="s2">:"nothing"</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">""</span></tt> (the empty string), the output will be <tt class="docutils literal"><span class="pre">nothing</span></tt>.</p>
</div>
<div class="section" id="s-default-if-none">
<span id="s-std:templatefilter-default_if_none"></span><span id="default-if-none"></span><span id="std:templatefilter-default_if_none"></span><h3>default_if_none<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#default-if-none" title="Permalink to this headline">¶</a></h3>
<p>If (and only if) value is <tt class="xref docutils literal"><span class="pre">None</span></tt>, uses the given default. Otherwise, uses the
value.</p>
<p>Note that if an empty string is given, the default value will <em>not</em> be used.
Use the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatefilter-default"><tt class="xref std std-tfilter docutils literal"><span class="pre">default</span></tt></a> filter if you want to fallback for empty strings.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">default_if_none</span><span class="s2">:"nothing"</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="xref docutils literal"><span class="pre">None</span></tt>, the output will be the string <tt class="docutils literal"><span class="pre">"nothing"</span></tt>.</p>
</div>
<div class="section" id="s-dictsort">
<span id="s-std:templatefilter-dictsort"></span><span id="dictsort"></span><span id="std:templatefilter-dictsort"></span><h3>dictsort<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#dictsort" title="Permalink to this headline">¶</a></h3>
<p>Takes a list of dictionaries and returns that list sorted by the key given in
the argument.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">dictsort</span><span class="s2">:"name"</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="p">[</span>
    <span class="p">{</span><span class="s">'name'</span><span class="p">:</span> <span class="s">'zed'</span><span class="p">,</span> <span class="s">'age'</span><span class="p">:</span> <span class="mi">19</span><span class="p">},</span>
    <span class="p">{</span><span class="s">'name'</span><span class="p">:</span> <span class="s">'amy'</span><span class="p">,</span> <span class="s">'age'</span><span class="p">:</span> <span class="mi">22</span><span class="p">},</span>
    <span class="p">{</span><span class="s">'name'</span><span class="p">:</span> <span class="s">'joe'</span><span class="p">,</span> <span class="s">'age'</span><span class="p">:</span> <span class="mi">31</span><span class="p">},</span>
<span class="p">]</span>
</pre></div>
</div>
<p>then the output would be:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="p">[</span>
    <span class="p">{</span><span class="s">'name'</span><span class="p">:</span> <span class="s">'amy'</span><span class="p">,</span> <span class="s">'age'</span><span class="p">:</span> <span class="mi">22</span><span class="p">},</span>
    <span class="p">{</span><span class="s">'name'</span><span class="p">:</span> <span class="s">'joe'</span><span class="p">,</span> <span class="s">'age'</span><span class="p">:</span> <span class="mi">31</span><span class="p">},</span>
    <span class="p">{</span><span class="s">'name'</span><span class="p">:</span> <span class="s">'zed'</span><span class="p">,</span> <span class="s">'age'</span><span class="p">:</span> <span class="mi">19</span><span class="p">},</span>
<span class="p">]</span>
</pre></div>
</div>
</div>
<div class="section" id="s-dictsortreversed">
<span id="s-std:templatefilter-dictsortreversed"></span><span id="dictsortreversed"></span><span id="std:templatefilter-dictsortreversed"></span><h3>dictsortreversed<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#dictsortreversed" title="Permalink to this headline">¶</a></h3>
<p>Takes a list of dictionaries and returns that list sorted in reverse order by
the key given in the argument. This works exactly the same as the above filter,
but the returned value will be in reverse order.</p>
</div>
<div class="section" id="s-divisibleby">
<span id="s-std:templatefilter-divisibleby"></span><span id="divisibleby"></span><span id="std:templatefilter-divisibleby"></span><h3>divisibleby<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#divisibleby" title="Permalink to this headline">¶</a></h3>
<p>Returns <tt class="xref docutils literal"><span class="pre">True</span></tt> if the value is divisible by the argument.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">divisibleby</span><span class="s2">:"3"</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">21</span></tt>, the output would be <tt class="xref docutils literal"><span class="pre">True</span></tt>.</p>
</div>
<div class="section" id="s-escape">
<span id="s-std:templatefilter-escape"></span><span id="escape"></span><span id="std:templatefilter-escape"></span><h3>escape<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#escape" title="Permalink to this headline">¶</a></h3>
<p>Escapes a string's HTML. Specifically, it makes these replacements:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">&lt;</span></tt> is converted to <tt class="docutils literal"><span class="pre">&amp;lt;</span></tt></li>
<li><tt class="docutils literal"><span class="pre">&gt;</span></tt> is converted to <tt class="docutils literal"><span class="pre">&amp;gt;</span></tt></li>
<li><tt class="docutils literal"><span class="pre">'</span></tt> (single quote) is converted to <tt class="docutils literal"><span class="pre">&amp;#39;</span></tt></li>
<li><tt class="docutils literal"><span class="pre">"</span></tt> (double quote) is converted to <tt class="docutils literal"><span class="pre">&amp;quot;</span></tt></li>
<li><tt class="docutils literal"><span class="pre">&amp;</span></tt> is converted to <tt class="docutils literal"><span class="pre">&amp;amp;</span></tt></li>
</ul>
<p>The escaping is only applied when the string is output, so it does not matter
where in a chained sequence of filters you put <tt class="docutils literal"><span class="pre">escape</span></tt>: it will always be
applied as though it were the last filter. If you want escaping to be applied
immediately, use the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatefilter-force_escape"><tt class="xref std std-tfilter docutils literal"><span class="pre">force_escape</span></tt></a> filter.</p>
<p>Applying <tt class="docutils literal"><span class="pre">escape</span></tt> to a variable that would normally have auto-escaping
applied to the result will only result in one round of escaping being done. So
it is safe to use this function even in auto-escaping environments. If you want
multiple escaping passes to be applied, use the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatefilter-force_escape"><tt class="xref std std-tfilter docutils literal"><span class="pre">force_escape</span></tt></a> filter.</p>
</div>
<div class="section" id="s-escapejs">
<span id="s-std:templatefilter-escapejs"></span><span id="escapejs"></span><span id="std:templatefilter-escapejs"></span><h3>escapejs<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#escapejs" title="Permalink to this headline">¶</a></h3>
<p>Escapes characters for use in JavaScript strings. This does <em>not</em> make the
string safe for use in HTML, but does protect you from syntax errors when using
templates to generate JavaScript/JSON.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">escapejs</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">"testing\r\njavascript</span> <span class="pre">\'string"</span> <span class="pre">&lt;b&gt;escaping&lt;/b&gt;"</span></tt>,
the output will be <tt class="docutils literal"><span class="pre">"testing\\u000D\\u000Ajavascript</span> <span class="pre">\\u0027string\\u0022</span> <span class="pre">\\u003Cb\\u003Eescaping\\u003C/b\\u003E"</span></tt>.</p>
</div>
<div class="section" id="s-filesizeformat">
<span id="s-std:templatefilter-filesizeformat"></span><span id="filesizeformat"></span><span id="std:templatefilter-filesizeformat"></span><h3>filesizeformat<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#filesizeformat" title="Permalink to this headline">¶</a></h3>
<p>Formats the value like a 'human-readable' file size (i.e. <tt class="docutils literal"><span class="pre">'13</span> <span class="pre">KB'</span></tt>,
<tt class="docutils literal"><span class="pre">'4.1</span> <span class="pre">MB'</span></tt>, <tt class="docutils literal"><span class="pre">'102</span> <span class="pre">bytes'</span></tt>, etc).</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">filesizeformat</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is 123456789, the output would be <tt class="docutils literal"><span class="pre">117.7</span> <span class="pre">MB</span></tt>.</p>
</div>
<div class="section" id="s-first">
<span id="s-std:templatefilter-first"></span><span id="first"></span><span id="std:templatefilter-first"></span><h3>first<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#first" title="Permalink to this headline">¶</a></h3>
<p>Returns the first item in a list.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">first</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is the list <tt class="docutils literal"><span class="pre">['a',</span> <span class="pre">'b',</span> <span class="pre">'c']</span></tt>, the output will be <tt class="docutils literal"><span class="pre">'a'</span></tt>.</p>
</div>
<div class="section" id="s-fix-ampersands">
<span id="s-std:templatefilter-fix_ampersands"></span><span id="fix-ampersands"></span><span id="std:templatefilter-fix_ampersands"></span><h3>fix_ampersands<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#fix-ampersands" title="Permalink to this headline">¶</a></h3>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">This is rarely useful as ampersands are automatically escaped. See
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatefilter-escape"><tt class="xref std std-tfilter docutils literal"><span class="pre">escape</span></tt></a> for more information.</p>
</div>
<p>Replaces ampersands with <tt class="docutils literal"><span class="pre">&amp;amp;</span></tt> entities.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">fix_ampersands</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">Tom</span> <span class="pre">&amp;</span> <span class="pre">Jerry</span></tt>, the output will be <tt class="docutils literal"><span class="pre">Tom</span> <span class="pre">&amp;amp;</span> <span class="pre">Jerry</span></tt>.</p>
<p>However, ampersands used in named entities and numeric character references
will not be replaced. For example, if <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">Caf&amp;eacute;</span></tt>, the output
will <em>not</em> be <tt class="docutils literal"><span class="pre">Caf&amp;amp;eacute;</span></tt> but remain <tt class="docutils literal"><span class="pre">Caf&amp;eacute;</span></tt>. This means that
in some edge cases, such as acronyms followed by semicolons, this filter will
not replace ampersands that need replacing. For example, if <tt class="docutils literal"><span class="pre">value</span></tt> is
<tt class="docutils literal"><span class="pre">Contact</span> <span class="pre">the</span> <span class="pre">R&amp;D;</span></tt>, the output will remain unchanged because <tt class="docutils literal"><span class="pre">&amp;D;</span></tt>
resembles a named entity.</p>
</div>
<div class="section" id="s-floatformat">
<span id="s-std:templatefilter-floatformat"></span><span id="floatformat"></span><span id="std:templatefilter-floatformat"></span><h3>floatformat<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#floatformat" title="Permalink to this headline">¶</a></h3>
<p>When used without an argument, rounds a floating-point number to one decimal
place -- but only if there's a decimal part to be displayed. For example:</p>
<table class="docutils">
<colgroup>
<col width="26%">
<col width="57%">
<col width="17%">
</colgroup>
<thead valign="bottom">
<tr><th class="head"><tt class="docutils literal"><span class="pre">value</span></tt></th>
<th class="head">Template</th>
<th class="head">Output</th>
</tr>
</thead>
<tbody valign="top">
<tr><td><tt class="docutils literal"><span class="pre">34.23234</span></tt></td>
<td><tt class="docutils literal"><span class="pre">{{</span> <span class="pre">value|floatformat</span> <span class="pre">}}</span></tt></td>
<td><tt class="docutils literal"><span class="pre">34.2</span></tt></td>
</tr>
<tr><td><tt class="docutils literal"><span class="pre">34.00000</span></tt></td>
<td><tt class="docutils literal"><span class="pre">{{</span> <span class="pre">value|floatformat</span> <span class="pre">}}</span></tt></td>
<td><tt class="docutils literal"><span class="pre">34</span></tt></td>
</tr>
<tr><td><tt class="docutils literal"><span class="pre">34.26000</span></tt></td>
<td><tt class="docutils literal"><span class="pre">{{</span> <span class="pre">value|floatformat</span> <span class="pre">}}</span></tt></td>
<td><tt class="docutils literal"><span class="pre">34.3</span></tt></td>
</tr>
</tbody>
</table>
<p>If used with a numeric integer argument, <tt class="docutils literal"><span class="pre">floatformat</span></tt> rounds a number to
that many decimal places. For example:</p>
<table class="docutils">
<colgroup>
<col width="24%">
<col width="57%">
<col width="20%">
</colgroup>
<thead valign="bottom">
<tr><th class="head"><tt class="docutils literal"><span class="pre">value</span></tt></th>
<th class="head">Template</th>
<th class="head">Output</th>
</tr>
</thead>
<tbody valign="top">
<tr><td><tt class="docutils literal"><span class="pre">34.23234</span></tt></td>
<td><tt class="docutils literal"><span class="pre">{{</span> <span class="pre">value|floatformat:3</span> <span class="pre">}}</span></tt></td>
<td><tt class="docutils literal"><span class="pre">34.232</span></tt></td>
</tr>
<tr><td><tt class="docutils literal"><span class="pre">34.00000</span></tt></td>
<td><tt class="docutils literal"><span class="pre">{{</span> <span class="pre">value|floatformat:3</span> <span class="pre">}}</span></tt></td>
<td><tt class="docutils literal"><span class="pre">34.000</span></tt></td>
</tr>
<tr><td><tt class="docutils literal"><span class="pre">34.26000</span></tt></td>
<td><tt class="docutils literal"><span class="pre">{{</span> <span class="pre">value|floatformat:3</span> <span class="pre">}}</span></tt></td>
<td><tt class="docutils literal"><span class="pre">34.260</span></tt></td>
</tr>
</tbody>
</table>
<p>If the argument passed to <tt class="docutils literal"><span class="pre">floatformat</span></tt> is negative, it will round a number
to that many decimal places -- but only if there's a decimal part to be
displayed. For example:</p>
<table class="docutils">
<colgroup>
<col width="22%">
<col width="59%">
<col width="19%">
</colgroup>
<thead valign="bottom">
<tr><th class="head"><tt class="docutils literal"><span class="pre">value</span></tt></th>
<th class="head">Template</th>
<th class="head">Output</th>
</tr>
</thead>
<tbody valign="top">
<tr><td><tt class="docutils literal"><span class="pre">34.23234</span></tt></td>
<td><tt class="docutils literal"><span class="pre">{{</span> <span class="pre">value|floatformat:"-3"</span> <span class="pre">}}</span></tt></td>
<td><tt class="docutils literal"><span class="pre">34.232</span></tt></td>
</tr>
<tr><td><tt class="docutils literal"><span class="pre">34.00000</span></tt></td>
<td><tt class="docutils literal"><span class="pre">{{</span> <span class="pre">value|floatformat:"-3"</span> <span class="pre">}}</span></tt></td>
<td><tt class="docutils literal"><span class="pre">34</span></tt></td>
</tr>
<tr><td><tt class="docutils literal"><span class="pre">34.26000</span></tt></td>
<td><tt class="docutils literal"><span class="pre">{{</span> <span class="pre">value|floatformat:"-3"</span> <span class="pre">}}</span></tt></td>
<td><tt class="docutils literal"><span class="pre">34.260</span></tt></td>
</tr>
</tbody>
</table>
<p>Using <tt class="docutils literal"><span class="pre">floatformat</span></tt> with no argument is equivalent to using <tt class="docutils literal"><span class="pre">floatformat</span></tt>
with an argument of <tt class="docutils literal"><span class="pre">-1</span></tt>.</p>
</div>
<div class="section" id="s-force-escape">
<span id="s-std:templatefilter-force_escape"></span><span id="force-escape"></span><span id="std:templatefilter-force_escape"></span><h3>force_escape<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#force-escape" title="Permalink to this headline">¶</a></h3>
<p>Applies HTML escaping to a string (see the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatefilter-escape"><tt class="xref std std-tfilter docutils literal"><span class="pre">escape</span></tt></a> filter for
details). This filter is applied <em>immediately</em> and returns a new, escaped
string. This is useful in the rare cases where you need multiple escaping or
want to apply other filters to the escaped results. Normally, you want to use
the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatefilter-escape"><tt class="xref std std-tfilter docutils literal"><span class="pre">escape</span></tt></a> filter.</p>
</div>
<div class="section" id="s-get-digit">
<span id="s-std:templatefilter-get_digit"></span><span id="get-digit"></span><span id="std:templatefilter-get_digit"></span><h3>get_digit<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#get-digit" title="Permalink to this headline">¶</a></h3>
<p>Given a whole number, returns the requested digit, where 1 is the right-most
digit, 2 is the second-right-most digit, etc. Returns the original value for
invalid input (if input or argument is not an integer, or if argument is less
than 1). Otherwise, output is always an integer.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">get_digit</span><span class="s2">:"2"</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">123456789</span></tt>, the output will be <tt class="docutils literal"><span class="pre">8</span></tt>.</p>
</div>
<div class="section" id="s-iriencode">
<span id="s-std:templatefilter-iriencode"></span><span id="iriencode"></span><span id="std:templatefilter-iriencode"></span><h3>iriencode<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#iriencode" title="Permalink to this headline">¶</a></h3>
<p>Converts an IRI (Internationalized Resource Identifier) to a string that is
suitable for including in a URL. This is necessary if you're trying to use
strings containing non-ASCII characters in a URL.</p>
<p>It's safe to use this filter on a string that has already gone through the
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatefilter-urlencode"><tt class="xref std std-tfilter docutils literal"><span class="pre">urlencode</span></tt></a> filter.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">iriencode</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">"?test=1&amp;me=2"</span></tt>, the output will be <tt class="docutils literal"><span class="pre">"?test=1&amp;amp;me=2"</span></tt>.</p>
</div>
<div class="section" id="s-join">
<span id="s-std:templatefilter-join"></span><span id="join"></span><span id="std:templatefilter-join"></span><h3>join<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#join" title="Permalink to this headline">¶</a></h3>
<p>Joins a list with a string, like Python's <tt class="docutils literal"><span class="pre">str.join(list)</span></tt></p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">join</span><span class="s2">:" // "</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is the list <tt class="docutils literal"><span class="pre">['a',</span> <span class="pre">'b',</span> <span class="pre">'c']</span></tt>, the output will be the string
<tt class="docutils literal"><span class="pre">"a</span> <span class="pre">//</span> <span class="pre">b</span> <span class="pre">//</span> <span class="pre">c"</span></tt>.</p>
</div>
<div class="section" id="s-last">
<span id="s-std:templatefilter-last"></span><span id="last"></span><span id="std:templatefilter-last"></span><h3>last<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#last" title="Permalink to this headline">¶</a></h3>
<p>Returns the last item in a list.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">last</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is the list <tt class="docutils literal"><span class="pre">['a',</span> <span class="pre">'b',</span> <span class="pre">'c',</span> <span class="pre">'d']</span></tt>, the output will be the
string <tt class="docutils literal"><span class="pre">"d"</span></tt>.</p>
</div>
<div class="section" id="s-length">
<span id="s-std:templatefilter-length"></span><span id="length"></span><span id="std:templatefilter-length"></span><h3>length<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#length" title="Permalink to this headline">¶</a></h3>
<p>Returns the length of the value. This works for both strings and lists.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">length</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">['a',</span> <span class="pre">'b',</span> <span class="pre">'c',</span> <span class="pre">'d']</span></tt>, the output will be <tt class="docutils literal"><span class="pre">4</span></tt>.</p>
</div>
<div class="section" id="s-length-is">
<span id="s-std:templatefilter-length_is"></span><span id="length-is"></span><span id="std:templatefilter-length_is"></span><h3>length_is<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#length-is" title="Permalink to this headline">¶</a></h3>
<p>Returns <tt class="xref docutils literal"><span class="pre">True</span></tt> if the value's length is the argument, or <tt class="xref docutils literal"><span class="pre">False</span></tt> otherwise.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">length_is</span><span class="s2">:"4"</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">['a',</span> <span class="pre">'b',</span> <span class="pre">'c',</span> <span class="pre">'d']</span></tt>, the output will be <tt class="xref docutils literal"><span class="pre">True</span></tt>.</p>
</div>
<div class="section" id="s-linebreaks">
<span id="s-std:templatefilter-linebreaks"></span><span id="linebreaks"></span><span id="std:templatefilter-linebreaks"></span><h3>linebreaks<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#linebreaks" title="Permalink to this headline">¶</a></h3>
<p>Replaces line breaks in plain text with appropriate HTML; a single
newline becomes an HTML line break (<tt class="docutils literal"><span class="pre">&lt;br</span> <span class="pre">/&gt;</span></tt>) and a new line
followed by a blank line becomes a paragraph break (<tt class="docutils literal"><span class="pre">&lt;/p&gt;</span></tt>).</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">linebreaks</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">Joel\nis</span> <span class="pre">a</span> <span class="pre">slug</span></tt>, the output will be <tt class="docutils literal"><span class="pre">&lt;p&gt;Joel&lt;br</span> <span class="pre">/&gt;is</span> <span class="pre">a</span>
<span class="pre">slug&lt;/p&gt;</span></tt>.</p>
</div>
<div class="section" id="s-linebreaksbr">
<span id="s-std:templatefilter-linebreaksbr"></span><span id="linebreaksbr"></span><span id="std:templatefilter-linebreaksbr"></span><h3>linebreaksbr<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#linebreaksbr" title="Permalink to this headline">¶</a></h3>
<p>Converts all newlines in a piece of plain text to HTML line breaks
(<tt class="docutils literal"><span class="pre">&lt;br</span> <span class="pre">/&gt;</span></tt>).</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">linebreaksbr</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">Joel\nis</span> <span class="pre">a</span> <span class="pre">slug</span></tt>, the output will be <tt class="docutils literal"><span class="pre">Joel&lt;br</span> <span class="pre">/&gt;is</span> <span class="pre">a</span>
<span class="pre">slug</span></tt>.</p>
</div>
<div class="section" id="s-linenumbers">
<span id="s-std:templatefilter-linenumbers"></span><span id="linenumbers"></span><span id="std:templatefilter-linenumbers"></span><h3>linenumbers<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#linenumbers" title="Permalink to this headline">¶</a></h3>
<p>Displays text with line numbers.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">linenumbers</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is:</p>
<div class="highlight-html+django"><div class="highlight"><pre>one
two
three
</pre></div>
</div>
<p>the output will be:</p>
<div class="highlight-html+django"><div class="highlight"><pre>1. one
2. two
3. three
</pre></div>
</div>
</div>
<div class="section" id="s-ljust">
<span id="s-std:templatefilter-ljust"></span><span id="ljust"></span><span id="std:templatefilter-ljust"></span><h3>ljust<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#ljust" title="Permalink to this headline">¶</a></h3>
<p>Left-aligns the value in a field of a given width.</p>
<p><strong>Argument:</strong> field size</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre>"<span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">ljust</span><span class="s2">:"10"</span> <span class="cp">}}</span>"
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">Django</span></tt>, the output will be <tt class="docutils literal"><span class="pre">"Django</span>&nbsp;&nbsp;&nbsp; <span class="pre">"</span></tt>.</p>
</div>
<div class="section" id="s-lower">
<span id="s-std:templatefilter-lower"></span><span id="lower"></span><span id="std:templatefilter-lower"></span><h3>lower<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#lower" title="Permalink to this headline">¶</a></h3>
<p>Converts a string into all lowercase.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">lower</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">Still</span> <span class="pre">MAD</span> <span class="pre">At</span> <span class="pre">Yoko</span></tt>, the output will be
<tt class="docutils literal"><span class="pre">still</span> <span class="pre">mad</span> <span class="pre">at</span> <span class="pre">yoko</span></tt>.</p>
</div>
<div class="section" id="s-make-list">
<span id="s-std:templatefilter-make_list"></span><span id="make-list"></span><span id="std:templatefilter-make_list"></span><h3>make_list<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#make-list" title="Permalink to this headline">¶</a></h3>
<p>Returns the value turned into a list. For a string, it's a list of characters.
For an integer, the argument is cast into an unicode string before creating a
list.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">make_list</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is the string <tt class="docutils literal"><span class="pre">"Joel"</span></tt>, the output would be the list
<tt class="docutils literal"><span class="pre">[u'J',</span> <span class="pre">u'o',</span> <span class="pre">u'e',</span> <span class="pre">u'l']</span></tt>. If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">123</span></tt>, the output will be the
list <tt class="docutils literal"><span class="pre">[u'1',</span> <span class="pre">u'2',</span> <span class="pre">u'3']</span></tt>.</p>
</div>
<div class="section" id="s-phone2numeric">
<span id="s-std:templatefilter-phone2numeric"></span><span id="phone2numeric"></span><span id="std:templatefilter-phone2numeric"></span><h3>phone2numeric<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#phone2numeric" title="Permalink to this headline">¶</a></h3>
<p>Converts a phone number (possibly containing letters) to its numerical
equivalent.</p>
<p>The input doesn't have to be a valid phone number. This will happily convert
any string.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">phone2numeric</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">800-COLLECT</span></tt>, the output will be <tt class="docutils literal"><span class="pre">800-2655328</span></tt>.</p>
</div>
<div class="section" id="s-pluralize">
<span id="s-std:templatefilter-pluralize"></span><span id="pluralize"></span><span id="std:templatefilter-pluralize"></span><h3>pluralize<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#pluralize" title="Permalink to this headline">¶</a></h3>
<p>Returns a plural suffix if the value is not 1. By default, this suffix is
<tt class="docutils literal"><span class="pre">'s'</span></tt>.</p>
<p>Example:</p>
<div class="highlight-html+django"><div class="highlight"><pre>You have <span class="cp">{{</span> <span class="nv">num_messages</span> <span class="cp">}}</span> message<span class="cp">{{</span> <span class="nv">num_messages</span><span class="o">|</span><span class="nf">pluralize</span> <span class="cp">}}</span>.
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">num_messages</span></tt> is <tt class="docutils literal"><span class="pre">1</span></tt>, the output will be <tt class="docutils literal"><span class="pre">You</span> <span class="pre">have</span> <span class="pre">1</span> <span class="pre">message.</span></tt>
If <tt class="docutils literal"><span class="pre">num_messages</span></tt> is <tt class="docutils literal"><span class="pre">2</span></tt>  the output will be <tt class="docutils literal"><span class="pre">You</span> <span class="pre">have</span> <span class="pre">2</span> <span class="pre">messages.</span></tt></p>
<p>For words that require a suffix other than <tt class="docutils literal"><span class="pre">'s'</span></tt>, you can provide an alternate
suffix as a parameter to the filter.</p>
<p>Example:</p>
<div class="highlight-html+django"><div class="highlight"><pre>You have <span class="cp">{{</span> <span class="nv">num_walruses</span> <span class="cp">}}</span> walrus<span class="cp">{{</span> <span class="nv">num_walruses</span><span class="o">|</span><span class="nf">pluralize</span><span class="s2">:"es"</span> <span class="cp">}}</span>.
</pre></div>
</div>
<p>For words that don't pluralize by simple suffix, you can specify both a
singular and plural suffix, separated by a comma.</p>
<p>Example:</p>
<div class="highlight-html+django"><div class="highlight"><pre>You have <span class="cp">{{</span> <span class="nv">num_cherries</span> <span class="cp">}}</span> cherr<span class="cp">{{</span> <span class="nv">num_cherries</span><span class="o">|</span><span class="nf">pluralize</span><span class="s2">:"y,ies"</span> <span class="cp">}}</span>.
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Use <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/i18n/translation/#std:templatetag-blocktrans"><tt class="xref std std-ttag docutils literal"><span class="pre">blocktrans</span></tt></a> to pluralize translated strings.</p>
</div>
</div>
<div class="section" id="s-pprint">
<span id="s-std:templatefilter-pprint"></span><span id="pprint"></span><span id="std:templatefilter-pprint"></span><h3>pprint<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#pprint" title="Permalink to this headline">¶</a></h3>
<p>A wrapper around <a class="reference external" href="http://docs.python.org/2.7/library/pprint.html#pprint.pprint" title="(in Python v2.7)" wrc_done="true"><tt class="xref py py-func docutils literal"><span class="pre">pprint.pprint()</span></tt></a>&nbsp;<span class="wrc_icon wrc11" rating="{&quot;icon&quot;:&quot;green1-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:1,&quot;flags&quot;:{&quot;it&quot;:1}}"></span> -- for debugging, really.</p>
</div>
<div class="section" id="s-random">
<span id="s-std:templatefilter-random"></span><span id="random"></span><span id="std:templatefilter-random"></span><h3>random<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#random" title="Permalink to this headline">¶</a></h3>
<p>Returns a random item from the given list.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">random</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is the list <tt class="docutils literal"><span class="pre">['a',</span> <span class="pre">'b',</span> <span class="pre">'c',</span> <span class="pre">'d']</span></tt>, the output could be <tt class="docutils literal"><span class="pre">"b"</span></tt>.</p>
</div>
<div class="section" id="s-removetags">
<span id="s-std:templatefilter-removetags"></span><span id="removetags"></span><span id="std:templatefilter-removetags"></span><h3>removetags<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#removetags" title="Permalink to this headline">¶</a></h3>
<p>Removes a space-separated list of [X]HTML tags from the output.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">removetags</span><span class="s2">:"b span"</span><span class="o">|</span><span class="nf">safe</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">"&lt;b&gt;Joel&lt;/b&gt;</span> <span class="pre">&lt;button&gt;is&lt;/button&gt;</span> <span class="pre">a</span> <span class="pre">&lt;span&gt;slug&lt;/span&gt;"</span></tt> the
output will be <tt class="docutils literal"><span class="pre">"Joel</span> <span class="pre">&lt;button&gt;is&lt;/button&gt;</span> <span class="pre">a</span> <span class="pre">slug"</span></tt>.</p>
<p>Note that this filter is case-sensitive.</p>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">"&lt;B&gt;Joel&lt;/B&gt;</span> <span class="pre">&lt;button&gt;is&lt;/button&gt;</span> <span class="pre">a</span> <span class="pre">&lt;span&gt;slug&lt;/span&gt;"</span></tt> the
output will be <tt class="docutils literal"><span class="pre">"&lt;B&gt;Joel&lt;/B&gt;</span> <span class="pre">&lt;button&gt;is&lt;/button&gt;</span> <span class="pre">a</span> <span class="pre">slug"</span></tt>.</p>
</div>
<div class="section" id="s-rjust">
<span id="s-std:templatefilter-rjust"></span><span id="rjust"></span><span id="std:templatefilter-rjust"></span><h3>rjust<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#rjust" title="Permalink to this headline">¶</a></h3>
<p>Right-aligns the value in a field of a given width.</p>
<p><strong>Argument:</strong> field size</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre>"<span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">rjust</span><span class="s2">:"10"</span> <span class="cp">}}</span>"
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">Django</span></tt>, the output will be <tt class="docutils literal"><span class="pre">"</span>&nbsp;&nbsp;&nbsp; <span class="pre">Django"</span></tt>.</p>
</div>
<div class="section" id="s-safe">
<span id="s-std:templatefilter-safe"></span><span id="safe"></span><span id="std:templatefilter-safe"></span><h3>safe<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#safe" title="Permalink to this headline">¶</a></h3>
<p>Marks a string as not requiring further HTML escaping prior to output. When
autoescaping is off, this filter has no effect.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p>If you are chaining filters, a filter applied after <tt class="docutils literal"><span class="pre">safe</span></tt> can
make the contents unsafe again. For example, the following code
prints the variable as is, unescaped:</p>
<div class="last highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">var</span><span class="o">|</span><span class="nf">safe</span><span class="o">|</span><span class="nf">escape</span> <span class="cp">}}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="s-safeseq">
<span id="s-std:templatefilter-safeseq"></span><span id="safeseq"></span><span id="std:templatefilter-safeseq"></span><h3>safeseq<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#safeseq" title="Permalink to this headline">¶</a></h3>
<p>Applies the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatefilter-safe"><tt class="xref std std-tfilter docutils literal"><span class="pre">safe</span></tt></a> filter to each element of a sequence.  Useful in
conjunction with other filters that operate on sequences, such as
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatefilter-join"><tt class="xref std std-tfilter docutils literal"><span class="pre">join</span></tt></a>.  For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">some_list</span><span class="o">|</span><span class="nf">safeseq</span><span class="o">|</span><span class="nf">join</span><span class="s2">:", "</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>You couldn't use the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatefilter-safe"><tt class="xref std std-tfilter docutils literal"><span class="pre">safe</span></tt></a> filter directly in this case, as it would
first convert the variable into a string, rather than working with the
individual elements of the sequence.</p>
</div>
<div class="section" id="s-slice">
<span id="s-std:templatefilter-slice"></span><span id="slice"></span><span id="std:templatefilter-slice"></span><h3>slice<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#slice" title="Permalink to this headline">¶</a></h3>
<p>Returns a slice of the list.</p>
<p>Uses the same syntax as Python's list slicing. See
<a class="reference external" href="http://diveintopython.net/native_data_types/lists.html#odbchelper.list.slice" wrc_done="true">http://diveintopython.net/native_data_types/lists.html#odbchelper.list.slice</a>&nbsp;<span class="wrc_icon wrc0" rating="{&quot;icon&quot;:&quot;grey0-16.png&quot;,&quot;rating&quot;:0,&quot;weight&quot;:0,&quot;flags&quot;:{&quot;shopping&quot;:null,&quot;social&quot;:null,&quot;news&quot;:null,&quot;it&quot;:null,&quot;corporate&quot;:null,&quot;pornography&quot;:null,&quot;violence&quot;:null,&quot;gambling&quot;:null,&quot;drugs&quot;:null,&quot;illegal&quot;:null}}"></span>
for an introduction.</p>
<p>Example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">some_list</span><span class="o">|</span><span class="nf">slice</span><span class="s2">:":2"</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">some_list</span></tt> is <tt class="docutils literal"><span class="pre">['a',</span> <span class="pre">'b',</span> <span class="pre">'c']</span></tt>, the output will be <tt class="docutils literal"><span class="pre">['a',</span> <span class="pre">'b']</span></tt>.</p>
</div>
<div class="section" id="s-slugify">
<span id="s-std:templatefilter-slugify"></span><span id="slugify"></span><span id="std:templatefilter-slugify"></span><h3>slugify<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#slugify" title="Permalink to this headline">¶</a></h3>
<p>Converts to lowercase, removes non-word characters (alphanumerics and
underscores) and converts spaces to hyphens. Also strips leading and trailing
whitespace.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">slugify</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">"Joel</span> <span class="pre">is</span> <span class="pre">a</span> <span class="pre">slug"</span></tt>, the output will be <tt class="docutils literal"><span class="pre">"joel-is-a-slug"</span></tt>.</p>
</div>
<div class="section" id="s-stringformat">
<span id="s-std:templatefilter-stringformat"></span><span id="stringformat"></span><span id="std:templatefilter-stringformat"></span><h3>stringformat<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#stringformat" title="Permalink to this headline">¶</a></h3>
<p>Formats the variable according to the argument, a string formatting specifier.
This specifier uses Python string formatting syntax, with the exception that
the leading "%" is dropped.</p>
<p>See <a class="reference external" href="http://docs.python.org/library/stdtypes.html#string-formatting-operations" wrc_done="true">http://docs.python.org/library/stdtypes.html#string-formatting-operations</a>&nbsp;<span class="wrc_icon wrc11" rating="{&quot;icon&quot;:&quot;green1-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:1,&quot;flags&quot;:{&quot;it&quot;:1}}"></span>
for documentation of Python string formatting</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">stringformat</span><span class="s2">:"s"</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">"Joel</span> <span class="pre">is</span> <span class="pre">a</span> <span class="pre">slug"</span></tt>, the output will be <tt class="docutils literal"><span class="pre">"Joel</span> <span class="pre">is</span> <span class="pre">a</span> <span class="pre">slug"</span></tt>.</p>
</div>
<div class="section" id="s-striptags">
<span id="s-std:templatefilter-striptags"></span><span id="striptags"></span><span id="std:templatefilter-striptags"></span><h3>striptags<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#striptags" title="Permalink to this headline">¶</a></h3>
<p>Strips all [X]HTML tags.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">striptags</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">"&lt;b&gt;Joel&lt;/b&gt;</span> <span class="pre">&lt;button&gt;is&lt;/button&gt;</span> <span class="pre">a</span> <span class="pre">&lt;span&gt;slug&lt;/span&gt;"</span></tt>, the
output will be <tt class="docutils literal"><span class="pre">"Joel</span> <span class="pre">is</span> <span class="pre">a</span> <span class="pre">slug"</span></tt>.</p>
</div>
<div class="section" id="s-time">
<span id="s-std:templatefilter-time"></span><span id="time"></span><span id="std:templatefilter-time"></span><h3>time<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#time" title="Permalink to this headline">¶</a></h3>
<p>Formats a time according to the given format.</p>
<p>Given format can be the predefined one <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-TIME_FORMAT"><tt class="xref std std-setting docutils literal"><span class="pre">TIME_FORMAT</span></tt></a>, or a custom
format, same as the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatefilter-date"><tt class="xref std std-tfilter docutils literal"><span class="pre">date</span></tt></a> filter. Note that the predefined format
is locale-dependant.</p>
<p>The time filter will only accept parameters in the format string that relate
to the time of day, not the date (for obvious reasons). If you need to
format a date, use the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatefilter-date"><tt class="xref std std-tfilter docutils literal"><span class="pre">date</span></tt></a> filter.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">time</span><span class="s2">:"H:i"</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is equivalent to <tt class="docutils literal"><span class="pre">datetime.datetime.now()</span></tt>, the output will be
the string <tt class="docutils literal"><span class="pre">"01:23"</span></tt>.</p>
<p>Another example:</p>
<p>Assuming that <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-USE_L10N"><tt class="xref std std-setting docutils literal"><span class="pre">USE_L10N</span></tt></a> is <tt class="xref docutils literal"><span class="pre">True</span></tt> and <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-LANGUAGE_CODE"><tt class="xref std std-setting docutils literal"><span class="pre">LANGUAGE_CODE</span></tt></a> is,
for example, <tt class="docutils literal"><span class="pre">"de"</span></tt>, then for:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">time</span><span class="s2">:"TIME_FORMAT"</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>the output will be the string <tt class="docutils literal"><span class="pre">"01:23:00"</span></tt> (The <tt class="docutils literal"><span class="pre">"TIME_FORMAT"</span></tt> format
specifier for the <tt class="docutils literal"><span class="pre">de</span></tt> locale as shipped with Django is <tt class="docutils literal"><span class="pre">"H:i:s"</span></tt>).</p>
<p>When used without a format string:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">time</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>...the formatting string defined in the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-TIME_FORMAT"><tt class="xref std std-setting docutils literal"><span class="pre">TIME_FORMAT</span></tt></a> setting will be
used, without applying any localization.</p>
<div class="versionchanged">
<span class="title">Changed in Django 1.2:</span> Predefined formats can now be influenced by the current locale.</div>
</div>
<div class="section" id="s-timesince">
<span id="s-std:templatefilter-timesince"></span><span id="timesince"></span><span id="std:templatefilter-timesince"></span><h3>timesince<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#timesince" title="Permalink to this headline">¶</a></h3>
<p>Formats a date as the time since that date (e.g., "4 days, 6 hours").</p>
<p>Takes an optional argument that is a variable containing the date to use as
the comparison point (without the argument, the comparison point is <em>now</em>).
For example, if <tt class="docutils literal"><span class="pre">blog_date</span></tt> is a date instance representing midnight on 1
June 2006, and <tt class="docutils literal"><span class="pre">comment_date</span></tt> is a date instance for 08:00 on 1 June 2006,
then <tt class="docutils literal"><span class="pre">{{</span> <span class="pre">blog_date|timesince:comment_date</span> <span class="pre">}}</span></tt> would return "8 hours".</p>
<p>Comparing offset-naive and offset-aware datetimes will return an empty string.</p>
<p>Minutes is the smallest unit used, and "0 minutes" will be returned for any
date that is in the future relative to the comparison point.</p>
</div>
<div class="section" id="s-timeuntil">
<span id="s-std:templatefilter-timeuntil"></span><span id="timeuntil"></span><span id="std:templatefilter-timeuntil"></span><h3>timeuntil<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#timeuntil" title="Permalink to this headline">¶</a></h3>
<p>Similar to <tt class="docutils literal"><span class="pre">timesince</span></tt>, except that it measures the time from now until the
given date or datetime. For example, if today is 1 June 2006 and
<tt class="docutils literal"><span class="pre">conference_date</span></tt> is a date instance holding 29 June 2006, then
<tt class="docutils literal"><span class="pre">{{</span> <span class="pre">conference_date|timeuntil</span> <span class="pre">}}</span></tt> will return "4 weeks".</p>
<p>Takes an optional argument that is a variable containing the date to use as
the comparison point (instead of <em>now</em>). If <tt class="docutils literal"><span class="pre">from_date</span></tt> contains 22 June
2006, then <tt class="docutils literal"><span class="pre">{{</span> <span class="pre">conference_date|timeuntil:from_date</span> <span class="pre">}}</span></tt> will return "1 week".</p>
<p>Comparing offset-naive and offset-aware datetimes will return an empty string.</p>
<p>Minutes is the smallest unit used, and "0 minutes" will be returned for any
date that is in the past relative to the comparison point.</p>
</div>
<div class="section" id="s-title">
<span id="s-std:templatefilter-title"></span><span id="title"></span><span id="std:templatefilter-title"></span><h3>title<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#title" title="Permalink to this headline">¶</a></h3>
<p>Converts a string into titlecase.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">title</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">"my</span> <span class="pre">first</span> <span class="pre">post"</span></tt>, the output will be <tt class="docutils literal"><span class="pre">"My</span> <span class="pre">First</span> <span class="pre">Post"</span></tt>.</p>
</div>
<div class="section" id="s-truncatechars">
<span id="s-std:templatefilter-truncatechars"></span><span id="truncatechars"></span><span id="std:templatefilter-truncatechars"></span><h3>truncatechars<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#truncatechars" title="Permalink to this headline">¶</a></h3>
<div class="versionadded">
<span class="title">New in Django 1.4:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.4/"><em>Please see the release notes</em></a></div>
<p>Truncates a string if it is longer than the specified number of characters.
Truncated strings will end with a translatable ellipsis sequence ("...").</p>
<p><strong>Argument:</strong> Number of characters to truncate to</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">truncatechars</span><span class="o">:</span><span class="m">9</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">"Joel</span> <span class="pre">is</span> <span class="pre">a</span> <span class="pre">slug"</span></tt>, the output will be <tt class="docutils literal"><span class="pre">"Joel</span> <span class="pre">i..."</span></tt>.</p>
</div>
<div class="section" id="s-truncatewords">
<span id="s-std:templatefilter-truncatewords"></span><span id="truncatewords"></span><span id="std:templatefilter-truncatewords"></span><h3>truncatewords<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#truncatewords" title="Permalink to this headline">¶</a></h3>
<p>Truncates a string after a certain number of words.</p>
<p><strong>Argument:</strong> Number of words to truncate after</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">truncatewords</span><span class="o">:</span><span class="m">2</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">"Joel</span> <span class="pre">is</span> <span class="pre">a</span> <span class="pre">slug"</span></tt>, the output will be <tt class="docutils literal"><span class="pre">"Joel</span> <span class="pre">is</span> <span class="pre">..."</span></tt>.</p>
<p>Newlines within the string will be removed.</p>
</div>
<div class="section" id="s-truncatewords-html">
<span id="s-std:templatefilter-truncatewords_html"></span><span id="truncatewords-html"></span><span id="std:templatefilter-truncatewords_html"></span><h3>truncatewords_html<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#truncatewords-html" title="Permalink to this headline">¶</a></h3>
<p>Similar to <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatefilter-truncatewords"><tt class="xref std std-tfilter docutils literal"><span class="pre">truncatewords</span></tt></a>, except that it is aware of HTML tags. Any
tags that are opened in the string and not closed before the truncation point,
are closed immediately after the truncation.</p>
<p>This is less efficient than <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatefilter-truncatewords"><tt class="xref std std-tfilter docutils literal"><span class="pre">truncatewords</span></tt></a>, so should only be used
when it is being passed HTML text.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">truncatewords_html</span><span class="o">:</span><span class="m">2</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">"&lt;p&gt;Joel</span> <span class="pre">is</span> <span class="pre">a</span> <span class="pre">slug&lt;/p&gt;"</span></tt>, the output will be
<tt class="docutils literal"><span class="pre">"&lt;p&gt;Joel</span> <span class="pre">is</span> <span class="pre">...&lt;/p&gt;"</span></tt>.</p>
<p>Newlines in the HTML content will be preserved.</p>
</div>
<div class="section" id="s-unordered-list">
<span id="s-std:templatefilter-unordered_list"></span><span id="unordered-list"></span><span id="std:templatefilter-unordered_list"></span><h3>unordered_list<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#unordered-list" title="Permalink to this headline">¶</a></h3>
<p>Recursively takes a self-nested list and returns an HTML unordered list --
WITHOUT opening and closing &lt;ul&gt; tags.</p>
<p>The list is assumed to be in the proper format. For example, if <tt class="docutils literal"><span class="pre">var</span></tt>
contains <tt class="docutils literal"><span class="pre">['States',</span> <span class="pre">['Kansas',</span> <span class="pre">['Lawrence',</span> <span class="pre">'Topeka'],</span> <span class="pre">'Illinois']]</span></tt>, then
<tt class="docutils literal"><span class="pre">{{</span> <span class="pre">var|unordered_list</span> <span class="pre">}}</span></tt> would return:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="nt">&lt;li&gt;</span>States
<span class="nt">&lt;ul&gt;</span>
        <span class="nt">&lt;li&gt;</span>Kansas
        <span class="nt">&lt;ul&gt;</span>
                <span class="nt">&lt;li&gt;</span>Lawrence<span class="nt">&lt;/li&gt;</span>
                <span class="nt">&lt;li&gt;</span>Topeka<span class="nt">&lt;/li&gt;</span>
        <span class="nt">&lt;/ul&gt;</span>
        <span class="nt">&lt;/li&gt;</span>
        <span class="nt">&lt;li&gt;</span>Illinois<span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/li&gt;</span>
</pre></div>
</div>
<p>Note: An older, more restrictive and verbose input format is also supported:
<tt class="docutils literal"><span class="pre">['States',</span> <span class="pre">[['Kansas',</span> <span class="pre">[['Lawrence',</span> <span class="pre">[]],</span> <span class="pre">['Topeka',</span> <span class="pre">[]]]],</span> <span class="pre">['Illinois',</span> <span class="pre">[]]]]</span></tt>,</p>
</div>
<div class="section" id="s-upper">
<span id="s-std:templatefilter-upper"></span><span id="upper"></span><span id="std:templatefilter-upper"></span><h3>upper<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#upper" title="Permalink to this headline">¶</a></h3>
<p>Converts a string into all uppercase.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">upper</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">"Joel</span> <span class="pre">is</span> <span class="pre">a</span> <span class="pre">slug"</span></tt>, the output will be <tt class="docutils literal"><span class="pre">"JOEL</span> <span class="pre">IS</span> <span class="pre">A</span> <span class="pre">SLUG"</span></tt>.</p>
</div>
<div class="section" id="s-urlencode">
<span id="s-std:templatefilter-urlencode"></span><span id="urlencode"></span><span id="std:templatefilter-urlencode"></span><h3>urlencode<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#urlencode" title="Permalink to this headline">¶</a></h3>
<p>Escapes a value for use in a URL.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">urlencode</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">"http://www.example.org/foo?a=b&amp;c=d"</span></tt>, the output will be
<tt class="docutils literal"><span class="pre">"http%3A//www.example.org/foo%3Fa%3Db%26c%3Dd"</span></tt>.</p>
<div class="versionadded">
<span class="title">New in Django 1.3:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.3/"><em>Please see the release notes</em></a></div>
<p>An optional argument containing the characters which should not be escaped can
be provided.</p>
<p>If not provided, the '/' character is assumed safe. An empty string can be
provided when <em>all</em> characters should be escaped. For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">urlencode</span><span class="s2">:""</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">"http://www.example.org/"</span></tt>, the output will be
<tt class="docutils literal"><span class="pre">"http%3A%2F%2Fwww.example.org%2F"</span></tt>.</p>
</div>
<div class="section" id="s-urlize">
<span id="s-std:templatefilter-urlize"></span><span id="urlize"></span><span id="std:templatefilter-urlize"></span><h3>urlize<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#urlize" title="Permalink to this headline">¶</a></h3>
<p>Converts URLs in text into clickable links.</p>
<p>This template tag works on links prefixed with <tt class="docutils literal"><span class="pre">http://</span></tt>, <tt class="docutils literal"><span class="pre">https://</span></tt>, or
<tt class="docutils literal"><span class="pre">www.</span></tt>. For example, <tt class="docutils literal"><span class="pre">http://goo.gl/aia1t</span></tt> will get converted but
<tt class="docutils literal"><span class="pre">goo.gl/aia1t</span></tt> won't.</p>
<p>It also supports domain-only links ending in one of the original top level
domains (<tt class="docutils literal"><span class="pre">.com</span></tt>, <tt class="docutils literal"><span class="pre">.edu</span></tt>, <tt class="docutils literal"><span class="pre">.gov</span></tt>, <tt class="docutils literal"><span class="pre">.int</span></tt>, <tt class="docutils literal"><span class="pre">.mil</span></tt>, <tt class="docutils literal"><span class="pre">.net</span></tt>, and
<tt class="docutils literal"><span class="pre">.org</span></tt>). For example, <tt class="docutils literal"><span class="pre">djangoproject.com</span></tt> gets converted.</p>
<div class="versionchanged">
<span class="title">Changed in Django 1.4:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.4/"><em>Please see the release notes</em></a></div>
<p>Until Django 1.4, only the <tt class="docutils literal"><span class="pre">.com</span></tt>, <tt class="docutils literal"><span class="pre">.net</span></tt> and <tt class="docutils literal"><span class="pre">.org</span></tt> suffixes were
supported for domain-only links.</p>
<p>Links can have trailing punctuation (periods, commas, close-parens) and leading
punctuation (opening parens), and <tt class="docutils literal"><span class="pre">urlize</span></tt> will still do the right thing.</p>
<p>Links generated by <tt class="docutils literal"><span class="pre">urlize</span></tt> have a <tt class="docutils literal"><span class="pre">rel="nofollow"</span></tt> attribute added
to them.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">urlize</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">"Check</span> <span class="pre">out</span> <span class="pre">www.djangoproject.com"</span></tt>, the output will be
<tt class="docutils literal"><span class="pre">"Check</span> <span class="pre">out</span> <span class="pre">&lt;a</span> <span class="pre">href="http://www.djangoproject.com"</span>
<span class="pre">rel="nofollow"&gt;www.djangoproject.com&lt;/a&gt;"</span></tt>.</p>
<p>The <tt class="docutils literal"><span class="pre">urlize</span></tt> filter also takes an optional parameter <tt class="docutils literal"><span class="pre">autoescape</span></tt>. If
<tt class="docutils literal"><span class="pre">autoescape</span></tt> is <tt class="xref docutils literal"><span class="pre">True</span></tt>, the link text and URLs will be escaped using
Django's built-in <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatefilter-escape"><tt class="xref std std-tfilter docutils literal"><span class="pre">escape</span></tt></a> filter. The default value for
<tt class="docutils literal"><span class="pre">autoescape</span></tt> is <tt class="xref docutils literal"><span class="pre">True</span></tt>.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">If <tt class="docutils literal"><span class="pre">urlize</span></tt> is applied to text that already contains HTML markup,
things won't work as expected. Apply this filter only to plain text.</p>
</div>
</div>
<div class="section" id="s-urlizetrunc">
<span id="s-std:templatefilter-urlizetrunc"></span><span id="urlizetrunc"></span><span id="std:templatefilter-urlizetrunc"></span><h3>urlizetrunc<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#urlizetrunc" title="Permalink to this headline">¶</a></h3>
<p>Converts URLs into clickable links just like <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#urlize">urlize</a>, but truncates URLs
longer than the given character limit.</p>
<p><strong>Argument:</strong> Number of characters that link text should be truncated to,
including the ellipsis that's added if truncation is necessary.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">urlizetrunc</span><span class="o">:</span><span class="m">15</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">"Check</span> <span class="pre">out</span> <span class="pre">www.djangoproject.com"</span></tt>, the output would be
<tt class="docutils literal"><span class="pre">'Check</span> <span class="pre">out</span> <span class="pre">&lt;a</span> <span class="pre">href="http://www.djangoproject.com"</span>
<span class="pre">rel="nofollow"&gt;www.djangopr...&lt;/a&gt;'</span></tt>.</p>
<p>As with <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#urlize">urlize</a>, this filter should only be applied to plain text.</p>
</div>
<div class="section" id="s-wordcount">
<span id="s-std:templatefilter-wordcount"></span><span id="wordcount"></span><span id="std:templatefilter-wordcount"></span><h3>wordcount<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#wordcount" title="Permalink to this headline">¶</a></h3>
<p>Returns the number of words.</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">wordcount</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">"Joel</span> <span class="pre">is</span> <span class="pre">a</span> <span class="pre">slug"</span></tt>, the output will be <tt class="docutils literal"><span class="pre">4</span></tt>.</p>
</div>
<div class="section" id="s-wordwrap">
<span id="s-std:templatefilter-wordwrap"></span><span id="wordwrap"></span><span id="std:templatefilter-wordwrap"></span><h3>wordwrap<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#wordwrap" title="Permalink to this headline">¶</a></h3>
<p>Wraps words at specified line length.</p>
<p><strong>Argument:</strong> number of characters at which to wrap the text</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">wordwrap</span><span class="o">:</span><span class="m">5</span> <span class="cp">}}</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">value</span></tt> is <tt class="docutils literal"><span class="pre">Joel</span> <span class="pre">is</span> <span class="pre">a</span> <span class="pre">slug</span></tt>, the output would be:</p>
<div class="highlight-html+django"><div class="highlight"><pre>Joel
is a
slug
</pre></div>
</div>
</div>
<div class="section" id="s-yesno">
<span id="s-std:templatefilter-yesno"></span><span id="yesno"></span><span id="std:templatefilter-yesno"></span><h3>yesno<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#yesno" title="Permalink to this headline">¶</a></h3>
<p>Maps values for true, false and (optionally) None, to the strings "yes", "no",
"maybe", or a custom mapping passed as a comma-separated list, and
returns one of those strings according to the value:</p>
<p>For example:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{{</span> <span class="nv">value</span><span class="o">|</span><span class="nf">yesno</span><span class="s2">:"yeah,no,maybe"</span> <span class="cp">}}</span>
</pre></div>
</div>
<table class="docutils">
<colgroup>
<col width="15%">
<col width="33%">
<col width="52%">
</colgroup>
<thead valign="bottom">
<tr><th class="head">Value</th>
<th class="head">Argument</th>
<th class="head">Outputs</th>
</tr>
</thead>
<tbody valign="top">
<tr><td><tt class="xref docutils literal"><span class="pre">True</span></tt></td>
<td>&nbsp;</td>
<td><tt class="docutils literal"><span class="pre">yes</span></tt></td>
</tr>
<tr><td><tt class="xref docutils literal"><span class="pre">True</span></tt></td>
<td><tt class="docutils literal"><span class="pre">"yeah,no,maybe"</span></tt></td>
<td><tt class="docutils literal"><span class="pre">yeah</span></tt></td>
</tr>
<tr><td><tt class="xref docutils literal"><span class="pre">False</span></tt></td>
<td><tt class="docutils literal"><span class="pre">"yeah,no,maybe"</span></tt></td>
<td><tt class="docutils literal"><span class="pre">no</span></tt></td>
</tr>
<tr><td><tt class="xref docutils literal"><span class="pre">None</span></tt></td>
<td><tt class="docutils literal"><span class="pre">"yeah,no,maybe"</span></tt></td>
<td><tt class="docutils literal"><span class="pre">maybe</span></tt></td>
</tr>
<tr><td><tt class="xref docutils literal"><span class="pre">None</span></tt></td>
<td><tt class="docutils literal"><span class="pre">"yeah,no"</span></tt></td>
<td><tt class="docutils literal"><span class="pre">"no"</span></tt> (converts None to False
if no mapping for None is given)</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="section" id="s-internationalization-tags-and-filters">
<span id="internationalization-tags-and-filters"></span><h2>Internationalization tags and filters<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#internationalization-tags-and-filters" title="Permalink to this headline">¶</a></h2>
<p>Django provides template tags and filters to control each aspect of
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/i18n/"><em>internationalization</em></a> in templates. They allow for
granular control of translations, formatting, and time zone conversions.</p>
<div class="section" id="s-i18n">
<span id="i18n"></span><h3>i18n<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#i18n" title="Permalink to this headline">¶</a></h3>
<p>This library allows specifying translatable text in templates.
To enable it, set <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-USE_I18N"><tt class="xref std std-setting docutils literal"><span class="pre">USE_I18N</span></tt></a> to <tt class="xref docutils literal"><span class="pre">True</span></tt>, then load it with
<tt class="docutils literal"><span class="pre">{%</span> <span class="pre">load</span> <span class="pre">i18n</span> <span class="pre">%}</span></tt>.</p>
<p>See <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/i18n/translation/#specifying-translation-strings-in-template-code"><em>Internationalization: in template code</em></a>.</p>
</div>
<div class="section" id="s-l10n">
<span id="l10n"></span><h3>l10n<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#l10n" title="Permalink to this headline">¶</a></h3>
<p>This library provides control over the localization of values in templates.
You only need to load the library using <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">load</span> <span class="pre">l10n</span> <span class="pre">%}</span></tt>, but you'll often
set <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-USE_L10N"><tt class="xref std std-setting docutils literal"><span class="pre">USE_L10N</span></tt></a> to <tt class="xref docutils literal"><span class="pre">True</span></tt> so that localization is active by default.</p>
<p>See <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/i18n/formatting/#topic-l10n-templates"><em>Controlling localization in templates</em></a>.</p>
</div>
<div class="section" id="s-tz">
<span id="tz"></span><h3>tz<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#tz" title="Permalink to this headline">¶</a></h3>
<div class="versionadded">
<span class="title">New in Django 1.4:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.4/"><em>Please see the release notes</em></a></div>
<p>This library provides control over time zone conversions in templates.
Like <tt class="docutils literal"><span class="pre">l10n</span></tt>, you only need to load the library using <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">load</span> <span class="pre">tz</span> <span class="pre">%}</span></tt>,
but you'll usually also set <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-USE_TZ"><tt class="xref std std-setting docutils literal"><span class="pre">USE_TZ</span></tt></a> to <tt class="xref docutils literal"><span class="pre">True</span></tt> so that conversion
to local time happens by default.</p>
<p>See <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/i18n/timezones/#time-zones-in-templates"><em>Time zone aware output in templates</em></a>.</p>
</div>
</div>
<div class="section" id="s-other-tags-and-filters-libraries">
<span id="other-tags-and-filters-libraries"></span><h2>Other tags and filters libraries<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#other-tags-and-filters-libraries" title="Permalink to this headline">¶</a></h2>
<p>Django comes with a couple of other template-tag libraries that you have to
enable explicitly in your <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-INSTALLED_APPS"><tt class="xref std std-setting docutils literal"><span class="pre">INSTALLED_APPS</span></tt></a> setting and enable in your
template with the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-load"><tt class="xref std std-ttag docutils literal"><span class="pre">{%</span> <span class="pre">load</span> <span class="pre">%}</span></tt></a> tag.</p>
<div class="section" id="s-django-contrib-humanize">
<span id="django-contrib-humanize"></span><h3>django.contrib.humanize<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#django-contrib-humanize" title="Permalink to this headline">¶</a></h3>
<p>A set of Django template filters useful for adding a "human touch" to data. See
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/contrib/humanize/"><em>django.contrib.humanize</em></a>.</p>
</div>
<div class="section" id="s-django-contrib-markup">
<span id="django-contrib-markup"></span><h3>django.contrib.markup<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#django-contrib-markup" title="Permalink to this headline">¶</a></h3>
<p>A collection of template filters that implement these common markup languages:</p>
<ul class="simple">
<li>Textile</li>
<li>Markdown</li>
<li>reST (reStructuredText)</li>
</ul>
<p>See the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/contrib/markup/"><em>markup documentation</em></a>.</p>
</div>
<div class="section" id="s-django-contrib-webdesign">
<span id="django-contrib-webdesign"></span><h3>django.contrib.webdesign<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#django-contrib-webdesign" title="Permalink to this headline">¶</a></h3>
<p>A collection of template tags that can be useful while designing a Web site,
such as a generator of Lorem Ipsum text. See <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/contrib/webdesign/"><em>django.contrib.webdesign</em></a>.</p>
</div>
<div class="section" id="s-static">
<span id="static"></span><h3>static<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#static" title="Permalink to this headline">¶</a></h3>
<div class="section" id="s-std:templatetag-static">
<span id="s-id6"></span><span id="std:templatetag-static"></span><span id="id6"></span><h4>static<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-static" title="Permalink to this headline">¶</a></h4>
<p>To link to static files that are saved in <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-STATIC_ROOT"><tt class="xref std std-setting docutils literal"><span class="pre">STATIC_ROOT</span></tt></a> Django ships
with a <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-static"><tt class="xref std std-ttag docutils literal"><span class="pre">static</span></tt></a> template tag. You can use this regardless if you're
using <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/api/#django.template.RequestContext" title="django.template.RequestContext"><tt class="xref py py-class docutils literal"><span class="pre">RequestContext</span></tt></a> or not.</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">load</span> <span class="nv">static</span> <span class="cp">%}</span>
<span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"</span><span class="cp">{%</span> <span class="k">static</span> <span class="s2">"images/hi.jpg"</span> <span class="cp">%}</span><span class="s">"</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
<p>It is also able to consume standard context variables, e.g. assuming a
<tt class="docutils literal"><span class="pre">user_stylesheet</span></tt> variable is passed to the template:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">load</span> <span class="nv">static</span> <span class="cp">%}</span>
<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"</span><span class="cp">{%</span> <span class="k">static</span> <span class="nv">user_stylesheet</span> <span class="cp">%}</span><span class="s">"</span> <span class="na">type=</span><span class="s">"text/css"</span> <span class="na">media=</span><span class="s">"screen"</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p>The <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#module-django.contrib.staticfiles" title="django.contrib.staticfiles: An app for handling static files."><tt class="xref py py-mod docutils literal"><span class="pre">staticfiles</span></tt></a> contrib app also ships
with a <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#std:templatetag-staticfiles-static"><tt class="xref std std-ttag docutils literal"><span class="pre">static</span> <span class="pre">template</span> <span class="pre">tag</span></tt></a> which uses
<tt class="docutils literal"><span class="pre">staticfiles'</span></tt> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#std:setting-STATICFILES_STORAGE"><tt class="xref std std-setting docutils literal"><span class="pre">STATICFILES_STORAGE</span></tt></a> to build the URL of the
given path. Use that instead if you have an advanced use case such as
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/howto/static-files/#staticfiles-from-cdn"><em>using a cloud service to serve static files</em></a>:</p>
<div class="last highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">load</span> <span class="nv">static</span> <span class="nv">from</span> <span class="nv">staticfiles</span> <span class="cp">%}</span>
<span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"</span><span class="cp">{%</span> <span class="k">static</span> <span class="s2">"images/hi.jpg"</span> <span class="cp">%}</span><span class="s">"</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="s-get-static-prefix">
<span id="s-std:templatetag-get_static_prefix"></span><span id="get-static-prefix"></span><span id="std:templatetag-get_static_prefix"></span><h4>get_static_prefix<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#get-static-prefix" title="Permalink to this headline">¶</a></h4>
<p>If you're not using <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/api/#django.template.RequestContext" title="django.template.RequestContext"><tt class="xref py py-class docutils literal"><span class="pre">RequestContext</span></tt></a>, or if you need
more control over exactly where and how <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-STATIC_URL"><tt class="xref std std-setting docutils literal"><span class="pre">STATIC_URL</span></tt></a> is injected
into the template, you can use the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-get_static_prefix"><tt class="xref std std-ttag docutils literal"><span class="pre">get_static_prefix</span></tt></a> template tag
instead:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">load</span> <span class="nv">static</span> <span class="cp">%}</span>
<span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"</span><span class="cp">{%</span> <span class="k">get_static_prefix</span> <span class="cp">%}</span><span class="s">images/hi.jpg"</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
<p>There's also a second form you can use to avoid extra processing if you need
the value multiple times:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">load</span> <span class="nv">static</span> <span class="cp">%}</span>
<span class="cp">{%</span> <span class="k">get_static_prefix</span> <span class="k">as</span> <span class="nv">STATIC_PREFIX</span> <span class="cp">%}</span>

<span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"</span><span class="cp">{{</span> <span class="nv">STATIC_PREFIX</span> <span class="cp">}}</span><span class="s">images/hi.jpg"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"</span><span class="cp">{{</span> <span class="nv">STATIC_PREFIX</span> <span class="cp">}}</span><span class="s">images/hi2.jpg"</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</div>
<div class="section" id="s-get-media-prefix">
<span id="s-std:templatetag-get_media_prefix"></span><span id="get-media-prefix"></span><span id="std:templatetag-get_media_prefix"></span><h4>get_media_prefix<a class="headerlink" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#get-media-prefix" title="Permalink to this headline">¶</a></h4>
<p>Similar to the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-get_static_prefix"><tt class="xref std std-ttag docutils literal"><span class="pre">get_static_prefix</span></tt></a>, <tt class="docutils literal"><span class="pre">get_media_prefix</span></tt> populates a
template variable with the media prefix <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-MEDIA_URL"><tt class="xref std std-setting docutils literal"><span class="pre">MEDIA_URL</span></tt></a>, e.g.:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">&gt;</span>
<span class="kd">var</span> <span class="nx">media_path</span> <span class="o">=</span> <span class="s1">'</span><span class="cp">{%</span> <span class="k">get_media_prefix</span> <span class="cp">%}</span><span class="s1">'</span><span class="p">;</span>
<span class="nt">&lt;/script&gt;</span>
</pre></div>
</div>
</div>
</div>
</div>
</div>



<div id="content-secondary">
  <h2 id="comments">Questions/Feedback</h2>
  <p>Having trouble? We'd like to help!</p>
  <ul>
    <li>
      Try the <a href="https://docs.djangoproject.com/en/dev/faq/">FAQ</a>
      — it's got answers to many common questions.
    </li>
    <li>
      Search for information in the <a href="http://groups.google.com/group/django-users/" wrc_done="true">archives of the
      django-users mailing list</a>&nbsp;<span class="wrc_icon wrc13" rating="{&quot;icon&quot;:&quot;green3-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:3,&quot;flags&quot;:{}}"></span>, or <a href="http://groups.google.com/group/django-users/" wrc_done="true">post a question</a>&nbsp;<span class="wrc_icon wrc13" rating="{&quot;icon&quot;:&quot;green3-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:3,&quot;flags&quot;:{}}"></span>.
    </li>
    <li>
      Ask a question in the <a href="irc://irc.freenode.net/">#django IRC
      channel</a>, or search the <a href="http://django-irc-logs.com/" wrc_done="true">IRC
      logs</a>&nbsp;<span class="wrc_icon wrc0" rating="{&quot;icon&quot;:&quot;grey0-16.png&quot;,&quot;rating&quot;:0,&quot;weight&quot;:0,&quot;flags&quot;:{&quot;shopping&quot;:null,&quot;social&quot;:null,&quot;news&quot;:null,&quot;it&quot;:null,&quot;corporate&quot;:null,&quot;pornography&quot;:null,&quot;violence&quot;:null,&quot;gambling&quot;:null,&quot;drugs&quot;:null,&quot;illegal&quot;:null}}"></span> to see if it has been asked before.
    </li>
    <li>
      If you notice errors with this documentation, please <a href="https://code.djangoproject.com/newticket?component=Documentation" wrc_done="true">
      open a ticket</a>&nbsp;<span class="wrc_icon wrc11" rating="{&quot;icon&quot;:&quot;green1-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:1,&quot;flags&quot;:{}}"></span> and let us know! Please only use the ticket tracker for
      criticisms and improvements on the docs. For tech support, use the
      resources above.
    </li>
  </ul>
</div>

		</div>
		<!-- END #content-main -->
		<div id="content-related" class="sidebar">
		
  
    <h2>Search</h2>
    
    <form action="https://docs.djangoproject.com/search/" id="sidebar_search" class="search">
  <div>
    <p>
      <input type="search" name="q" id="id_sidebar_search_q">
    </p>
    <p>
      <label for="id_sidebar_search_release">Version:</label>
      <select name="release" id="id_sidebar_search_release">
<option value="2">Django 1.0</option>
<option value="3">Django 1.1</option>
<option value="4">Django 1.2</option>
<option value="5">Django 1.3</option>
<option value="6" selected="selected">Django 1.4</option>
<option value="1">Development trunk</option>
</select>
    </p>
    <p>
      <input type="submit" class="submit" value="Search">
    </p>
  </div>
</form>
  

  
    <h2>Contents</h2>
    
      <ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#">Built-in template tags and filters</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#built-in-tag-reference">Built-in tag reference</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#autoescape">autoescape</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#block">block</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#comment">comment</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#csrf-token">csrf_token</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#cycle">cycle</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#debug">debug</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#extends">extends</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#filter">filter</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#firstof">firstof</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#for">for</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#for-empty">for ... empty</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#if">if</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#boolean-operators">Boolean operators</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#operator"><tt class="docutils literal"><span class="pre">==</span></tt> operator</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#id1"><tt class="docutils literal"><span class="pre">!=</span></tt> operator</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#id2"><tt class="docutils literal"><span class="pre">&lt;</span></tt> operator</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#id3"><tt class="docutils literal"><span class="pre">&gt;</span></tt> operator</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#id4"><tt class="docutils literal"><span class="pre">&lt;=</span></tt> operator</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#id5"><tt class="docutils literal"><span class="pre">&gt;=</span></tt> operator</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#in-operator"><tt class="docutils literal"><span class="pre">in</span></tt> operator</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#not-in-operator"><tt class="docutils literal"><span class="pre">not</span> <span class="pre">in</span></tt> operator</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#filters">Filters</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#complex-expressions">Complex expressions</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#ifchanged">ifchanged</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#ifequal">ifequal</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#ifnotequal">ifnotequal</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#include">include</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#load">load</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#now">now</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#regroup">regroup</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#grouping-on-other-properties">Grouping on other properties</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#spaceless">spaceless</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#ssi">ssi</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#templatetag">templatetag</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#url">url</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#widthratio">widthratio</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#with">with</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#built-in-filter-reference">Built-in filter reference</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#add">add</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#addslashes">addslashes</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#capfirst">capfirst</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#center">center</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#cut">cut</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#date">date</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#default">default</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#default-if-none">default_if_none</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#dictsort">dictsort</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#dictsortreversed">dictsortreversed</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#divisibleby">divisibleby</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#escape">escape</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#escapejs">escapejs</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#filesizeformat">filesizeformat</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#first">first</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#fix-ampersands">fix_ampersands</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#floatformat">floatformat</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#force-escape">force_escape</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#get-digit">get_digit</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#iriencode">iriencode</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#join">join</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#last">last</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#length">length</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#length-is">length_is</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#linebreaks">linebreaks</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#linebreaksbr">linebreaksbr</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#linenumbers">linenumbers</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#ljust">ljust</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#lower">lower</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#make-list">make_list</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#phone2numeric">phone2numeric</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#pluralize">pluralize</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#pprint">pprint</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#random">random</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#removetags">removetags</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#rjust">rjust</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#safe">safe</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#safeseq">safeseq</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#slice">slice</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#slugify">slugify</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#stringformat">stringformat</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#striptags">striptags</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#time">time</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#timesince">timesince</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#timeuntil">timeuntil</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#title">title</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#truncatechars">truncatechars</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#truncatewords">truncatewords</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#truncatewords-html">truncatewords_html</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#unordered-list">unordered_list</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#upper">upper</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#urlencode">urlencode</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#urlize">urlize</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#urlizetrunc">urlizetrunc</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#wordcount">wordcount</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#wordwrap">wordwrap</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#yesno">yesno</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#internationalization-tags-and-filters">Internationalization tags and filters</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#i18n">i18n</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#l10n">l10n</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#tz">tz</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#other-tags-and-filters-libraries">Other tags and filters libraries</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#django-contrib-humanize">django.contrib.humanize</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#django-contrib-markup">django.contrib.markup</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#django-contrib-webdesign">django.contrib.webdesign</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#static">static</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#std:templatetag-static">static</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#get-static-prefix">get_static_prefix</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#get-media-prefix">get_media_prefix</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>

    
  
  
    <h2>Browse</h2>
    <ul>
      
        
          <li>Prev: <a href="https://docs.djangoproject.com/en/dev/ref/templates/">Templates</a></li>
        
        
          <li>Next: <a href="https://docs.djangoproject.com/en/dev/ref/templates/api/">The Django template language: For Python programmers</a></li>
        
        <li><a href="https://docs.djangoproject.com/en/dev/contents/">Table of contents</a></li>
        
          <li><a href="https://docs.djangoproject.com/en/dev/genindex/">General Index</a></li>
        
          <li><a href="https://docs.djangoproject.com/en/dev/py-modindex/">Python Module Index</a></li>
        
      
    </ul>
  

  
    <h2>You are here:</h2>
    <ul>
      
        <li>
          <a href="https://docs.djangoproject.com/en/dev/">Django dev documentation</a>
          
            <ul><li><a href="https://docs.djangoproject.com/en/dev/ref/">API Reference</a>
          
            <ul><li><a href="https://docs.djangoproject.com/en/dev/ref/templates/">Templates</a>
          
          <ul><li>Built-in template tags and filters</li></ul>
          </li></ul></li></ul>
        </li>
      
    </ul>

    
      <h2>Download:</h2>
      <p>
      
        Offline (development version):
        <a href="https://www.djangoproject.com/m/docs/django-docs-dev-en.zip" wrc_done="true">HTML</a>&nbsp;<span class="wrc_icon wrc11" rating="{&quot;icon&quot;:&quot;green1-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:1,&quot;flags&quot;:{}}"></span> |
        <a href="http://media.readthedocs.org/pdf/django/latest/django.pdf" wrc_done="true">PDF</a>&nbsp;<span class="wrc_icon wrc0" rating="{&quot;icon&quot;:&quot;grey0-16.png&quot;,&quot;rating&quot;:0,&quot;weight&quot;:0,&quot;flags&quot;:{&quot;shopping&quot;:null,&quot;social&quot;:null,&quot;news&quot;:null,&quot;it&quot;:null,&quot;corporate&quot;:null,&quot;pornography&quot;:null,&quot;violence&quot;:null,&quot;gambling&quot;:null,&quot;drugs&quot;:null,&quot;illegal&quot;:null}}"></span> |
        <a href="http://media.readthedocs.org/epub/django/latest/django.epub" wrc_done="true">ePub</a>&nbsp;<span class="wrc_icon wrc0" rating="{&quot;icon&quot;:&quot;grey0-16.png&quot;,&quot;rating&quot;:0,&quot;weight&quot;:0,&quot;flags&quot;:{&quot;shopping&quot;:null,&quot;social&quot;:null,&quot;news&quot;:null,&quot;it&quot;:null,&quot;corporate&quot;:null,&quot;pornography&quot;:null,&quot;violence&quot;:null,&quot;gambling&quot;:null,&quot;drugs&quot;:null,&quot;illegal&quot;:null}}"></span>
      
      <br>
      <span class="quiet">Provided by <a href="http://readthedocs.org/" wrc_done="true">Read the Docs</a>&nbsp;<span class="wrc_icon wrc0" rating="{&quot;icon&quot;:&quot;grey0-16.png&quot;,&quot;rating&quot;:0,&quot;weight&quot;:0,&quot;flags&quot;:{&quot;shopping&quot;:null,&quot;social&quot;:null,&quot;news&quot;:null,&quot;it&quot;:null,&quot;corporate&quot;:null,&quot;pornography&quot;:null,&quot;violence&quot;:null,&quot;gambling&quot;:null,&quot;drugs&quot;:null,&quot;illegal&quot;:null}}"></span>.
      </span></p>
    
  

		</div>
		<!-- END #content-related -->

    </div>
    <!-- END #content -->
    <div id="footer">
      <p>© 2005-2012 <a href="https://www.djangoproject.com/foundation/" wrc_done="true">Django Software Foundation</a>&nbsp;<span class="wrc_icon wrc11" rating="{&quot;icon&quot;:&quot;green1-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:1,&quot;flags&quot;:{}}"></span> unless otherwise noted. Django is a registered trademark of the Django Software Foundation.
      <a href="http://mediatemple.net/" wrc_done="true">Linux Web hosting</a>&nbsp;<span class="wrc_icon wrc11" rating="{&quot;icon&quot;:&quot;green1-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:1,&quot;flags&quot;:{}}"></span> graciously provided by Media Temple.
      </p>
    </div>
    <!-- END #footer -->
  </div>
  <!-- END #container -->
  


<div id="mixpanel" style="visibility: hidden; "></div><div id="wrchoverdiv"><div id="wrccontainer"><div id="wrcheader"><div id="wrctitle"> WebRep</div></div><div class="wrchorizontal"></div><div id="wrccurrentvote">Évaluation globale</div><div class="wrchorizontal"></div><div id="wrcrating"></div><div id="wrcratingtext">Ce site n'a pas été évalué</div><div id="wrcweighttext">(pas assez de votes)</div><div id="wrcflags"><div id="wrcicon_shopping" class="wrcicon"></div><div id="wrcicon_social" class="wrcicon"></div><div id="wrcicon_news" class="wrcicon"></div><div id="wrcicon_it" class="wrcicon"></div><div id="wrcicon_corporate" class="wrcicon"></div><div id="wrcicon_pornography" class="wrcicon"></div><div id="wrcicon_violence" class="wrcicon"></div><div id="wrcicon_gambling" class="wrcicon"></div><div id="wrcicon_drugs" class="wrcicon"></div><div id="wrcicon_illegal" class="wrcicon"></div></div><div class="wrchorizontal"></div></div></div></body><link rel="stylesheet" type="text/css" href="data:text/css,"></html>