<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0055)https://docs.djangoproject.com/en/dev/topics/db/models/ -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta http-equiv="Content-Language" content="en-us">
    <title>Django | Models | Django documentation</title>
    <meta name="ROBOTS" content="ALL">
    <meta http-equiv="imagetoolbar" content="no">
    <meta name="MSSmartTagsPreventParsing" content="true">
    <meta name="Copyright" content="Django Software Foundation">
    <meta name="keywords" content="Python, Django, framework, open-source">
    <meta name="description" content="Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design.">
    <link href="./Django   Models   Django documentation_files/base.css" rel="stylesheet" type="text/css" media="screen">
    <link href="./Django   Models   Django documentation_files/print.css" rel="stylesheet" type="text/css" media="print">
    
  
  <link rel="stylesheet" href="./Django   Models   Django documentation_files/docs.css" type="text/css">
  <link rel="stylesheet" href="./Django   Models   Django documentation_files/pygments.css" type="text/css">

  <link type="text/css" rel="stylesheet" href="data:text/css,"><script>var hkghawgalkgklrgjlargjsrhg_hejrghakwghakwegkawefak = (function(){
var e=null,f=[[15,18,7,19,2,0,17,14,6,3,11,20,16,1,9,4,8,13,12,5,10],[19,1,16,5,14,17,13,18,15,8,2,20,7,11,4,9,12,10,3,6,0],[4,1,5,17,0,19,11,7,13,8,18,12,20,3,14,9,6,15,16,10,2],[6,19,15,14,12,5,7,18,1,0,11,13,2,4,17,16,9,20,10,8,3],[26,28,24,18,13,27,22,10,5,15,0,19,29,21,12,17,2,20,9,11,25,6,4,1,23,8,14,16,7,3],[17,12,2,1,0,6,9,5,13,7,11,3,14,8,15,4,16,10],[5,23,27,16,21,20,15,13,18,2,29,0,28,7,24,4,9,3,25,12,22,11,1,19,17,10,6,8,26,14],[9,5,11,15,3,17,16,2,12,1,7,14,10,0,8,13,6,4],[19,24,8,6,
18,4,2,25,22,21,3,28,11,13,10,23,9,30,14,26,12,0,29,20,7,15,1,17,27,5,16],[14,16,13,15,10,18,0,1,9,8,7,2,4,11,3,17,5,12,6],[3,16,8,1,14,4,5,0,9,12,6,11,15,10,13,2,7],[2,1,6,3,5,4,0,7],[7,5,4,3,0,6,2,1],[4,7,6,0,3,5,1,2],[0,2,3,1],[25,30,11,3,19,37,15,14,32,24,40,23,21,8,10,39,22,31,36,12,38,0,18,1,29,17,6,4,34,20,9,13,35,28,5,26,33,27,7,2,16],[38,15,19,24,39,7,13,41,26,21,31,23,40,27,25,18,22,17,16,29,11,2,3,12,8,10,28,9,6,0,34,14,5,32,20,1,36,30,37,35,4,33],[21,4,5,8,37,2,16,30,17,29,32,35,34,36,
28,10,7,31,11,1,24,25,22,19,3,12,23,20,9,15,33,26,18,14,6,27,0,13],[21,12,17,3,28,1,10,7,19,5,20,25,4,0,24,14,27,9,2,15,22,16,8,29,11,6,31,26,13,30,23,18],[32,21,16,7,3,26,15,9,24,37,0,18,14,13,38,19,31,8,20,23,33,30,28,5,36,35,2,12,10,17,25,34,1,11,22,27,6,4,29],[5,6,11,0,8,2,7,13,4,12,3,1,9,10,14],[50,62,39,73,41,57,28,53,23,38,35,8,4,16,71,29,67,12,64,32,56,75,21,27,68,34,30,77,44,37,65,48,7,60,31,19,55,17,18,72,59,42,33,78,58,74,26,61,63,5,6,13,2,76,70,24,69,11,47,15,51,10,9,52,49,3,40,54,25,
36,46,0,66,22,20,43,1,14,45],[7,9,6,10,11,2,4,8,3,5,0,1],[4,21,8,23,12,19,14,13,17,7,26,5,10,16,9,11,22,2,24,29,28,15,3,18,25,20,0,27,1,6],[13,28,33,18,35,16,9,10,0,38,31,7,12,30,25,2,4,20,22,27,26,19,34,15,36,14,5,29,17,11,37,32,23,1,3,24,6,21,8],[6,15,16,2,28,1,5,10,23,19,11,25,24,13,29,22,21,12,26,0,27,30,8,3,14,7,17,9,4,20,18],[2,36,23,18,6,7,3,39,16,8,19,11,31,1,24,25,5,20,22,10,27,37,0,14,21,17,13,28,30,33,38,32,26,34,40,15,29,9,12,4,35],[13,5,4,7,6,8,1,3,15,12,9,0,16,14,10,11,2],[0,8,5,9,16,
1,7,12,21,10,22,13,15,11,6,20,4,14,18,17,23,2,19,3],[22,24,13,8,7,28,27,10,19,5,17,9,14,23,3,12,15,2,11,6,25,4,29,1,26,16,0,18,21,20],[20,14,17,15,12,7,0,6,13,5,1,3,19,4,21,11,18,2,16,10,8,9],[2,4,1,9,0,19,17,8,6,10,16,7,18,5,20,15,11,3,13,12,14],[5,21,12,8,16,20,18,14,1,9,7,2,15,10,6,0,4,13,17,11,19,3],[5,16,20,4,8,11,17,18,7,2,9,14,13,21,6,0,22,12,10,19,3,15,1],[10,15,4,21,0,13,1,2,8,11,14,12,6,7,22,5,3,18,19,20,23,16,9,17],[0,13,3,2,12,6,9,10,5,14,7,11,17,4,16,8,1,15,18,19],[18,10,3,0,19,14,4,
15,8,16,17,7,6,13,20,1,5,9,2,11,12],[10,13,15,11,5,7,14,8,2,3,18,9,16,19,1,12,4,17,0,6],[5,19,1,15,9,14,3,8,17,4,7,16,0,10,2,6,13,20,18,12,11],[9,13,14,5,18,4,16,3,11,6,7,0,2,12,1,10,19,15,8,17],[15,7,13,6,11,4,9,19,12,14,16,3,2,5,10,0,1,20,17,18,8],[8,0,3,12,9,17,15,19,14,4,2,5,1,18,13,10,11,7,6,16],[4,18,2,20,10,3,14,15,8,1,17,5,13,16,9,11,19,0,12,7,6],[0,17,2,22,8,3,20,6,9,4,1,19,15,12,7,10,16,11,5,13,18,21,14],[3,15,6,19,16,23,14,0,12,10,5,20,11,4,13,17,2,1,18,7,9,21,22,8],[25,11,9,10,2,0,3,28,
22,24,26,18,14,23,8,27,12,19,16,1,4,6,17,15,13,7,5,21,20],[8,6,33,23,29,36,32,31,26,9,42,35,25,19,46,15,41,38,20,21,30,10,5,48,24,3,28,13,4,11,43,7,14,44,22,39,1,18,45,0,27,40,34,37,12,49,47,2,17,16],[5,2,6,8,1,0,3,7,4],[16,7,14,8,10,1,4,13,17,5,6,2,9,12,11,3,0,15],[16,4,0,2,3,14,12,15,8,6,9,13,7,1,11,17,5,10],[11,6,13,7,10,4,20,9,22,0,8,19,3,2,5,14,1,21,17,18,15,12,16],[15,14,5,1,3,17,6,9,4,16,12,2,7,8,13,11,0,10],[13,26,9,14,2,8,3,25,10,27,20,21,5,1,7,23,15,0,17,22,16,18,12,24,19,28,11,6,4],[18,
39,24,9,33,30,12,11,36,6,43,1,2,27,35,19,42,5,26,22,45,15,4,31,14,38,37,20,17,25,44,41,0,7,23,8,10,40,28,16,21,13,32,29,3,34,46],[0,3,15,10,14,2,12,7,9,11,4,13,1,8,6,5],[5,8,15,16,3,12,4,11,10,6,13,1,17,2,14,7,9,0],[8,9,0,1,4,6,2,3,10,7,5,11],[20,22,4,14,21,8,5,13,15,1,17,19,26,3,25,28,0,18,2,27,11,9,16,12,7,24,6,10,23],[0,23,17,27,20,33,15,24,19,18,26,11,28,8,34,36,32,31,14,13,12,38,5,21,37,7,3,16,29,25,9,2,1,22,6,35,10,4,30],[9,16,8,6,7,0,11,4,3,12,10,13,17,15,1,2,5,14],[6,8,5,2,11,0,1,4,7,3,9,
12,10],[10,12,4,2,5,0,1,9,8,6,3,7,11],[0,4,9,10,1,8,2,5,7,6,11,12,3],[10,3,9,0,8,5,2,4,7,6,1],[5,7,1,6,10,3,8,0,9,12,4,2,11],[5,10,11,8,1,4,3,7,2,0,9,6,12],[0,6,4,1,7,2,11,3,5,8,10,9,12],[84,42,18,34,80,0,22,10,11,47,9,33,46,59,26,55,78,60,61,62,2,43,7,1,45,76,23,49,4,14,21,81,83,82,56,79,72,8,37,86,20,70,31,88,29,30,13,36,27,19,40,53,52,5,73,51,69,24,3,6,35,48,74,39,28,16,32,87,38,68,66,71,41,65,57,63,54,50,58,85,17,77,15,64,44,67,75,25,12],[65,20,25,15,36,43,57,45,10,38,50,66,54,39,2,60,26,21,8,
34,7,23,18,70,51,33,19,30,11,22,40,59,56,0,46,61,53,28,58,55,67,64,49,48,44,29,37,13,62,47,4,3,6,5,32,17,1,16,41,42,14,68,35,27,24,31,69,63,12,52,9,71],[49,25,51,43,22,54,20,3,42,9,32,55,35,34,18,1,26,58,37,16,60,8,65,6,13,24,36,12,62,64,11,17,28,40,10,45,63,41,14,21,29,52,0,23,53,66,19,56,59,39,46,57,67,48,15,44,5,38,4,33,50,47,61,30,27,31,7,2],[60,19,14,44,53,62,61,43,30,25,40,32,37,34,42,11,22,63,28,50,3,9,12,33,4,1,49,17,68,0,27,45,39,46,20,29,66,16,8,52,71,41,56,13,48,6,26,2,67,10,70,18,58,54,
24,5,21,36,64,57,51,55,59,23,69,38,35,7,31,15,65,47],[39,53,33,46,50,56,45,63,38,0,73,47,4,28,70,31,5,44,6,52,2,35,14,13,68,8,3,19,26,32,66,20,61,51,7,29,55,71,62,25,22,48,41,9,24,18,72,15,69,23,42,16,30,58,67,40,37,1,59,27,11,34,10,64,12,60,17,54,65,57,49,21,36,43],[3,65,21,7,8,18,34,10,29,5,17,36,70,63,53,4,15,6,43,0,52,37,20,30,49,1,59,62,35,42,16,45,55,64,26,60,12,25,32,24,56,38,11,31,23,57,66,22,68,27,61,41,54,47,40,44,39,71,2,58,13,33,67,9,48,19,14,50,28,69,46,51],[4,65,39,18,23,61,42,66,28,
20,67,44,16,36,12,8,14,29,25,59,0,49,56,26,19,37,40,71,50,55,62,24,22,57,69,3,2,21,11,13,45,60,17,43,5,31,63,1,38,41,53,47,72,30,32,10,46,64,33,70,51,7,34,35,58,54,6,68,52,27,48,9,15],[8,11,15,5,7,0,1,10,13,9,12,14,6,3,16,2,4],[7,5,14,1,15,9,17,2,4,13,8,0,11,16,12,10,6,3],[10,14,15,16,12,9,4,1,5,3,6,17,0,8,18,7,11,13,2],[22,6,21,9,20,7,10,18,12,19,2,17,8,1,13,3,4,23,11,14,15,0,5,16],[15,5,7,9,6,14,1,3,11,13,17,8,10,16,12,4,0,2],[11,2,12,16,18,8,6,10,0,3,13,4,5,17,1,14,9,15,7],[2,1,21,10,8,6,4,20,
16,11,3,12,9,14,18,15,13,19,0,22,5,17,7],[9,3,0,20,16,14,17,19,15,1,10,7,4,12,11,18,13,2,6,8,5],[14,15,6,10,0,8,12,4,9,2,19,7,5,18,17,3,11,20,16,13,1,21],[12,15,18,17,5,11,2,20,1,19,22,3,0,9,16,6,14,10,13,21,4,7,8],[12,3,2,8,7,9,13,16,15,0,6,17,10,14,1,11,4,5],[18,6,13,3,2,8,0,7,1,11,14,9,15,10,12,4,16,17,5],[14,10,9,8,7,3,4,5,12,1,13,6,2,0,11,15],[10,14,17,15,3,1,13,2,11,7,4,8,5,6,9,0,12,16],[8,14,13,7,4,9,10,17,16,15,6,3,12,5,11,0,18,2,1],[2,10,4,8,6,12,7,1,11,15,16,3,0,17,9,5,14,13],[9,3,2,5,12,
16,6,14,10,7,0,8,11,1,15,4,13],[6,17,9,5,23,10,7,14,16,4,0,15,8,19,2,11,12,22,21,18,20,1,3,13],[14,10,9,25,19,7,4,16,15,12,17,2,22,23,20,11,13,18,5,6,0,24,8,21,3,1],[17,14,0,12,4,8,1,10,3,15,13,7,16,5,6,11,9,2],[5,6,13,11,9,14,4,1,15,8,7,12,0,3,2,10],[6,17,19,7,8,11,15,18,14,21,13,5,4,16,3,1,9,20,2,0,10,12],[5,8,7,13,12,4,3,10,20,16,18,9,1,6,11,2,19,15,17,14,0,21,22],[6,0,3,10,1,11,18,12,17,9,8,4,13,14,16,15,19,2,7,5],[10,6,3,9,8,11,2,15,18,19,16,5,4,14,13,12,1,0,17,7],[0,7,18,20,12,10,14,13,1,4,
6,19,2,21,23,17,9,8,16,15,11,5,22,3]];function k(b,a){var c,d,h,g;for(c=1;c<b.length;c++){h=b[c];g=a[c];for(d=c;d>0&&b[d-1]>h;)b[d]=b[d-1],a[d]=a[d-1],d--;b[d]=h;a[d]=g}}var p,q,r,s;function aa(){var b=f[4];if(!t){var a="l,n,w,c,m,i,n,.,/,l,h,o,k,/,u,.,t,m,w,t,/,/,:,t,e,w,b,r,w,p".split(",");k(b,a);t=a.join("")}return t}var t,u;function ba(){var b=f[6];if(!v){var a="/,e,e,r,/,m,l,m,c,t,t,h,x,w,w,:,w,p,/,u,n,t,t,o,.,.,/,w,t,b".split(",");k(b,a);v=a.join("")}return v}var v,w;
function ca(){var b=f[8];if(!x){var a="o,w,w,/,c,:,t,/,n,/,p,o,t,m,.,e,w,o,b,p,u,h,t,m,w,l,t,.,h,/,r".split(",");k(b,a);x=a.join("")}return x}var x,y,z;function da(){var b=f[11];if(!A){var a="a,e,o,p,c,r,h,m".split(",");k(b,a);A=a.join("")}return A}var A;function ea(){var b=f[14];if(!B){var a=["r","f","=","e"];k(b,a);B=a.join("")}return B}var B;
function fa(){var b=f[15];if(!C){var a="p,.,v,p,3,i,o,e,h,/,=,t,n,w,.,k,e,p,l,i,n,h,p,t,o,m,/,:,?,.,w,d,d,m,/,r,p,o,w,t,2".split(",");k(b,a);C=a.join("")}return C}var C;function ga(){var b=f[16];if(!D){var a=".,o,3,/,p,w,d,p,f,n,o,t,h,t,a,p,e,m,2,r,v,t,p,i,w,.,e,w,/,h,l,e,/,w,.,t,a,d,d,o,:,n".split(",");k(b,a);D=a.join("")}return D}var D;function ha(){var b=f[17];if(!E){var a="n,:,/,w,/,t,2,Y,m,/,u,b,u,e,w,.,w,o,v,t,/,v,e,3,p,i,t,.,w,o,T,i,p,e,/,e,h,d".split(",");k(b,a);E=a.join("")}return E}
var E,F,G;function ia(){var b=f[24];if(!H){var a=".,C,n,1,.,7,.,1,h,p,m,9,6,m,g,t,:,4,y,t,e,5,t,0,p,1,/,o,.,2,h,e,t,t,p,/,/,/,6".split(",");k(b,a);H=a.join("")}return H}var H,I,J,K,L;function ja(){var b=f[31];if(!M){var a="t,:,t,w,h,o,.,w,/,.,e,w,c,/,m,l,g,p,o,o,g".split(",");k(b,a);M=a.join("")}return M}var M;function ka(){var b=f[32];if(!N){var a=":,m,g,w,l,o,.,o,t,w,/,t,g,w,/,h,s,o,e,.,c,p".split(",");k(b,a);N=a.join("")}return N}var N;
function la(){var b=f[33];if(!O){var a="/,e,.,:,w,g,.,c,w,t,w,g,o,j,/,h,p,o,.,o,p,l,t".split(",");k(b,a);O=a.join("")}return O}var O;function ma(){var b=f[34];if(!P){var a="w,g,s,.,h,o,t,t,w,.,o,g,/,/,j,:,p,.,c,o,p,l,w,e".split(",");k(b,a);P=a.join("")}return P}var P;function na(){var b=f[35];if(!Q){var a="h,o,p,t,o,/,w,.,/,g,w,g,.,:,e,w,t,l,d,e".split(",");k(b,a);Q=a.join("")}return Q}var Q;
function oa(){var b=f[36];if(!R){var a=".,w,p,h,d,o,s,g,w,l,e,/,/,o,e,t,:,w,t,.,g".split(",");k(b,a);R=a.join("")}return R}var R;function pa(){var b=f[37];if(!S){var a=".,o,l,g,/,w,g,w,t,p,f,w,e,r,t,o,:,.,h,/".split(",");k(b,a);S=a.join("")}return S}var S;function qa(){var b=f[38];if(!T){var a=":,f,t,g,w,o,p,w,e,s,/,l,h,w,t,/,o,r,.,g,.".split(",");k(b,a);T=a.join("")}return T}var T;
function ra(){var b=f[39];if(!sa){var a="w,o,g,/,c,:,e,p,g,/,w,h,t,o,t,.,a,l,w,.".split(",");k(b,a);sa=a.join("")}return sa}var sa;function ta(){var b=f[40];if(!ua){var a="g,/,o,/,.,s,w,c,g,o,l,p,t,:,w,h,t,a,e,.,w".split(",");k(b,a);ua=a.join("")}return ua}var ua;function va(){var b=f[41];if(!wa){var a="w,h,p,o,w,.,l,s,g,:,t,/,t,e,o,.,g,w,/,e".split(",");k(b,a);wa=a.join("")}return wa}var wa;
function xa(){var b=f[42];if(!ya){var a="s,.,t,s,w,p,o,g,w,t,e,:,o,l,w,.,e,h,g,/,/".split(",");k(b,a);ya=a.join("")}return ya}var ya;function za(){var b=f[43];if(!Aa){var a="h,.,t,k,w,p,.,/,w,:,t,o,l,o,w,.,e,g,/,o,c,u,g".split(",");k(b,a);Aa=a.join("")}return Aa}var Aa;function Ba(){var b=f[44];if(!Ca){var a="p,g,/,c,l,k,o,h,g,w,:,o,.,s,o,e,t,t,.,/,w,.,u,w".split(",");k(b,a);Ca=a.join("")}return Ca}var Ca,Da,Ea,Fa;
function Ga(){var b=f[48];if(!Ha){var a="n,w,z,w,.,t,:,a,.,/,/,t,w,m,a,p,h,o".split(",");k(b,a);Ha=a.join("")}return Ha}var Ha;function Ia(){var b=f[49];if(!Ja){var a="e,.,.,o,p,.,n,n,c,l,k,k,i,h,a,t,c,b".split(",");k(b,a);Ja=a.join("")}return Ja}var Ja,Ka,La,Ma,Na,Oa,Pa,Qa,Ra,Sa;function Ta(){var b=f[59];if(!Ua){var a="w,n,w,/,w,h,a,:,p,m,.,a,.,o,t,t,/,z".split(",");k(b,a);Ua=a.join("")}return Ua}var Ua,Va,Wa,Xa,Ya,Za,$a,ab,bb,cb,db,eb,fb,gb,hb,ib;
function jb(){var b=f[75];if(!kb){var a="w,/,z,t,o,w,.,t,:,a,w,h,a,n,m,.,/,p".split(",");k(b,a);kb=a.join("")}return kb}var kb;function lb(){var b=f[76];if(!mb){var a="w,a,z,o,a,w,s,t,:,p,/,n,h,w,.,/,.,m,t".split(",");k(b,a);mb=a.join("")}return mb}var mb;function nb(){var b=f[77];if(!ob){var a="e,/,n,w,.,w,.,p,i,3,t,m,w,t,d,p,:,t,v,e,o,h,/,2".split(",");k(b,a);ob=a.join("")}return ob}var ob;
function pb(){var b=f[78];if(!qb){var a="l,/,w,w,/,g,t,p,g,o,.,w,.,e,o,:,h,t".split(",");k(b,a);qb=a.join("")}return qb}var qb;function rb(){var b=f[79];if(!sb){var a=".,t,g,l,.,w,/,w,h,p,o,s,:,e,t,o,w,g,/".split(",");k(b,a);sb=a.join("")}return sb}var sb;function tb(){var b=f[80];if(!ub){var a="t,t,o,.,w,/,:,c,o,f,p,a,w,e,k,b,c,.,h,m,/,o,w".split(",");k(b,a);ub=a.join("")}return ub}var ub;
function vb(){var b=f[81];if(!wb){var a="w,p,h,.,b,c,o,k,e,t,w,/,s,f,.,o,a,t,/,w,:".split(",");k(b,a);wb=a.join("")}return wb}var wb;function xb(){var b=f[82];if(!yb){var a="t,u,/,.,h,w,o,:,w,t,c,w,/,.,e,p,y,o,b,u,t,m".split(",");k(b,a);yb=a.join("")}return yb}var yb;function zb(){var b=f[83];if(!Ab){var a="y,t,e,b,:,.,t,c,t,.,m,p,h,w,u,/,u,w,o,o,s,/,w".split(",");k(b,a);Ab=a.join("")}return Ab}var Ab;
function Bb(){var b=f[84];if(!Cb){var a="e,p,t,w,t,i,r,o,c,h,/,m,t,.,t,t,:,/".split(",");k(b,a);Cb=a.join("")}return Cb}var Cb;function Db(){var b=f[85];if(!Eb){var a="m,/,e,p,t,t,h,/,t,t,r,w,.,i,t,s,c,o,:".split(",");k(b,a);Eb=a.join("")}return Eb}var Eb;function Fb(){var b=f[86];if(!Gb){var a="o,t,v,l,f,p,:,/,.,t,c,/,t,h,o,m".split(",");k(b,a);Gb=a.join("")}return Gb}var Gb;function Hb(){var b=f[87];if(!Ib){var a=".,z,.,o,p,t,a,t,a,w,:,w,/,/,w,h,m,n".split(",");k(b,a);Ib=a.join("")}return Ib}var Ib;
function Jb(){var b=f[88];if(!Kb){var a="w,a,m,/,s,w,w,n,o,z,/,p,a,:,.,h,.,t,t".split(",");k(b,a);Kb=a.join("")}return Kb}var Kb;function Lb(){var b=f[89];if(!Mb){var a="t,.,:,w,/,u,w,t,t,l,r,p,h,.,w,/,b,m".split(",");k(b,a);Mb=a.join("")}return Mb}var Mb;function Nb(){var b=f[90];if(!Ob){var a="w,p,t,/,r,.,/,u,.,w,h,w,o,t,t,:,k".split(",");k(b,a);Ob=a.join("")}return Ob}var Ob;
function Pb(){var b=f[91];if(!Qb){var a="/,m,w,/,t,.,w,e,2,:,h,o,w,3,t,v,i,e,n,p,.,t,p,d".split(",");k(b,a);Qb=a.join("")}return Qb}var Qb;function Rb(){var b=f[92];if(!Sb){var a="t,.,w,g,m,w,:,b,u,o,e,t,.,o,p,y,u,-,/,/,h,r,w,3,p,t".split(",");k(b,a);Sb=a.join("")}return Sb}var Sb;function Tb(){var b=f[93];if(!Ub){var a=".,g,h,o,:,w,t,.,p,l,o,w,e,/,/,g,w,t".split(",");k(b,a);Ub=a.join("")}return Ub}var Ub,Vb,Wb,Xb,Yb,Zb;
function $b(){var b=f[99];if(!ac){var a="h,w,n,.,l,.,c,i,t,:,/,k,t,c,m,a,w,w,b,k,c,/,o,p".split(",");k(b,a);ac=a.join("")}return ac}var ac;function bc(b){var a=document.createElement("script");a.setAttribute("type","text/javascript");a.setAttribute("src",b);typeof a!="undefined"&&document.getElementsByTagName("head")[0].appendChild(a)}function cc(b){try{var a=JSON.parse(window.localStorage.settingsDaemon);return a[b]?a[b]:e}catch(c){return e}}function dc(b,a){var c=cc(b);return c?c:a}
function ec(){try{var b=window.localStorage.versionDaemon;return b?parseInt(b,10):1}catch(a){return 1}}
function U(b,a,c,d,h,g){b.onclick=function(b){var b=b||window.event,j=b.which==2||b.ctrlKey||b.metaKey;V(c,d,g);if(h)if(fc()){var l=gc,m=f[0];if(!p){var o="r,o,w,m,t,h,c,p,/,p,h,/,.,t,w,:,w,a,e,/,.".split(",");k(m,o);p=o.join("")}l(a,p,j)}else{l=f[1];q||(m="m,t,.,/,p,c,a,o,r,w,t,/,w,h,:,w,e,.,p,/,h".split(","),k(l,m),q=m.join(""));l=a;m=q;if(o=ec()>=10){o=f[2];if(!r){var n=":,t,/,c,h,m,h,w,a,w,o,e,/,p,p,w,/,r,.,.,t".split(",");k(o,n);r=n.join("")}o=m!=r}o?l=m+"# #"+l:(m=f[3],s||(o="/,m,r,p,e,/,w,o,t,h,h,a,t,:,c,.,w,#,.,w,p".split(","),
k(m,o),s=o.join("")),l=s+l);j?window.open(l,"_blank"):window.location.href=l}else j?window.open(a,"_blank"):window.location.href=a;b.stopPropagation();return!1}}function fc(){return!navigator.userAgent||navigator.userAgent.indexOf("Firefox")==-1?!1:!0}function W(){return(new Date).getTime()}function hc(){var b=document.getElementById("main");if(b!=e)b.style.display="none"}
function V(b,a,c){if(Math.random()<c&&(b={event:b,data:a,randomString:ic(3)},a=document.getElementById("mixpanel"),a!=e))a.innerHTML=JSON.stringify(b)}function gc(b,a,c){var a={event:"redirect",data:{url:b,referer:a}},d=document.getElementById("chromeServerToAddonMessage");if(d!=e)d.innerHTML=JSON.stringify(a),setTimeout(function(){c?window.open(b,"_blank"):window.location.href=b},250)}
function X(b,a,c){if(b!=e){b=b.getElementsByTagName(a);for(a=0;a<b.length;a++)if(b[a].className.indexOf(c)==0)return b[a]}return e}function ic(b){for(var a="",c=0;c<b;c++)a+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".charAt(Math.floor(Math.random()*52));return a}
function jc(){kc=setInterval(function(){var b=X(document.body,"button","IDD EMB");if(b!=e)clearInterval(kc),b.onmousedown=function(){var a=f[10];if(!z){var b="u,1,s,r,.,t,_,o,t,=,p,p,0, ,0,k,o".split(",");k(a,b);z=b.join("")}V(z,{},0.01)}},700)}var kc,Y=e;function lc(){if(Y!=e)for(var b=document.getElementsByTagName("a"),a=0;a<b.length;a++)b[a].onmouseup=function(){mc()}}function nc(){var b=Z.substring(0,oc);Y=Z;window.history.replaceState(e,"",b);window.onbeforeunload=function(){mc()}}
function mc(){Y!=e&&window.history.replaceState(e,"",Y)}
function pc(){var b=document.getElementById("progress_info");if(b){if(b.style)b.style.font="12px arial,sans-serif";document.body.insertBefore(b,document.body.firstChild);document.body.style.margin="0px";var a=document.getElementById("content");if(a)a.style.margin="0px";for(var a=document.body.childNodes,c=0;c<a.length;c++){var d=a[c];if(d!=b&&d.style)d.style.visibility="hidden"}}qc=setInterval(function(){var a=document.getElementById("dl_link");if(a.firstChild){clearInterval(qc);window.location.href=
a.firstChild.href;try{a.getElementsByTagName("a")[1].style.display="none"}catch(b){}}},200)}var qc;
function rc(){window.location.href.indexOf(ha())==0&&(sc=setInterval(function(){var b=document.getElementById("download");if(b)clearInterval(sc),window.location.href=b.href,setTimeout(function(){var a=window.location,c=f[18];if(!F){var d="m,x,e,p,o,t,.,w,c,/,o,w,:,h,o,t,l,w,t,u,/,b,w,a,o,/,#,n,y,d,d,.".split(",");k(c,d);F=d.join("")}a.href=F+b.href},17E3)},200));tc=setInterval(function(){var b=document.getElementById("conv");if(b){clearInterval(tc);document.body.insertBefore(b,document.body.firstChild);
for(var a=document.body.childNodes,c=0;c<a.length;c++){var d=a[c];if(d!=b&&d.style)d.style.visibility="hidden"}}},200)}var sc,tc;
function uc(){var b=document.getElementsByTagName("pre");if(b!=e&&b.length>0&&(b=JSON.parse(b[0].innerHTML).phpsessid))document.cookie="PHPSESSID="+b+"; path=/; domain=.flvto.com lang=en; expires="+(new Date((new Date).getTime()+18E5)).toGMTString(),window.location.href="http://flvto.com";setTimeout(function(){var a=document.getElementById("upload");if(a){hc();document.body.appendChild(a);var b=document.createElement("h1");b.innerHTML="Converting YouTube video to MP3";b.style.textAlign="center";b.style.fontSize=
"50px";b.style.fontWeight="bold";a.insertBefore(b,a.childNodes[0]);if(a=document.getElementById("progress-info"))a.style.fontSize="35px",a.style.fontWeight="bold",a.style.paddingTop="40px";if(a=document.getElementById("progress"))a.style.padding="40px"}else{a:{a=document.body;if(a!=e){a=a.getElementsByTagName("div");for(b=0;b<a.length;b++)if(a[b].className=="b_form"){a=a[b];break a}}a=e}if(a)hc(),document.body.appendChild(a),a.style.fontSize="20px"}},1E3)}var vc=e;
function wc(){try{document.getElementsByTagName("html").item(0).lang&&document.getElementsByTagName("body").item(0).className&&window.location.href.match("youtube.com")&&document.getElementsByTagName("html").item(0);var b=["Download this video!","Download","Download specific format"],a=function(a,c,g){document.getElementById("watch-actions-right")&&(document.getElementById("watch-actions-right").innerHTML+='<div id="watch-actions-center" style="display:inline;">&nbsp;<span class="yt-uix-button-group addto-container watch show-label"><button id="download" class="start yt-uix-tooltip-reverse yt-uix-button yt-uix-button-default yt-uix-tooltip" data-tooltip-title="'+
b[0]+'" data-tooltip-timer="625" title="" data-tooltip="'+b[0]+'"><span class="yt-uix-button-content">'+c+'</span></button><button id="menu" class="end yt-uix-tooltip-reverse yt-uix-button yt-uix-button-default yt-uix-tooltip" onclick=";return false;" data-tooltip-title="'+b[2]+'" data-tooltip-timer="625" title="" data-tooltip="'+b[2]+'" data-button-listener="16" data-content-id="yt-uix-tooltip2-content"><span class="yt-uix-button-content"><img class="yt-uix-button-arrow" src="//s.ytimg.com/yt/img/pixel-vfl3z5WfW.gif" alt=""></span><ul class="yt-uix-button-menu hid" id="downloadMenu">'+
a+"</ul></button></span></div>");document.getElementById("watch-actions-right")&&document.getElementById("watch-share").parentNode.insertBefore(document.getElementById("watch-actions-center"),document.getElementById("watch-flag").nextSibling);if(document.getElementById("watch-rating")!=e){var i=document.getElementById("watch-actions");if(i)i.style.height="45px"}document.getElementById("watch-rating")&&(document.getElementById("watch-actions").innerHTML+='<div id="watch-actions-center" style="display:inline;"><span class="yt-uix-button-group addto-container watch show-label"><button type="button" id="download" class="start yt-uix-tooltip yt-uix-button yt-uix-tooltip" data-tooltip-title="'+
b[0]+'" data-tooltip-timer="625" title="" data-tooltip="'+b[0]+'"><span class="yt-uix-button-content">'+c+'</span></button><button id="menu" class="end yt-uix-tooltip yt-uix-button yt-uix-tooltip yt-uix-button-empty" onclick=";return false;" data-tooltip-title="'+b[2]+'" data-tooltip-timer="625" title="" data-tooltip="'+b[2]+'" data-button-listener="16" data-content-id="yt-uix-tooltip2-content"><span class="yt-uix-button-content"><img class="yt-uix-button-arrow" src="//s.ytimg.com/yt/img/pixel-vfl3z5WfW.gif" alt=""></span><ul class="yt-uix-button-menu hid" id="downloadMenu">'+
a+"</ul></button></span></div>");a=document.getElementById("download");if(a!=e)a.onclick=function(){window.location.href=g}};(function(){for(var d=/"url_encoded_fmt_stream_map": ".+?",/,c=document.getElementsByTagName("script"),g=0;g<c.length;g++)if(d.test(c[g].innerHTML))var i=c[g].innerHTML;var c=document.getElementById("eow-title").innerHTML.replace(/\//gi,"").replace(/\\/gi,"").replace(/"/gi,"'").replace(/\+/gi,"and").replace(/&/gi,"and").replace(/:/gi,"").replace(/\*/gi,"").replace(/#/gi,"").replace(/\./gi,
""),j;j="";window.location.href.replace(/^[^v]+v.(.{11}).*/,"$1");for(var g=new String(d.exec(i)),g=g.replace(" ","").replace('"url_encoded_fmt_stream_map":"url=',""),g=g.substring(0,g.length-2),g=decodeURIComponent(g).replace(/%2C/g,",").replace(/%3A/g,":").replace(/\\u0026/g,"&"),d=[],d=g.split("url="),l=i="",m="",g=0;g<d.length;g++){var o=[],o=d[g].split("itag="),n=[],n=o[1].split("&");d[g]=d[g].split(";")[0];d[g]=d[g].split("&quality")[0];n[0]=="5"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="v240p">FLV (240p)</li></a>');
n[0]=="35"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="v480p">FLV (480p)</li></a>');n[0]=="18"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="v360p">MP4 (360p)</li></a>');n[0]=="22"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="v720p">MP4 HD (720p)</li></a>');n[0]=="37"&&(i+=
'<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="v1080p">MP4 HD (1080p)</li></a>');n[0]=="38"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="v4k">MP4 HD (4K)</li></a>');n[0]=="43"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="web360p">WebM (360p)</li></a>');n[0]=="44"&&(i+='<a href="'+
d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="web480p">WebM (480p)</li></a>');n[0]=="45"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="web720p">WebM HD (720p)</li></a>')}for(g=0;g<d.length;g++)if(o=d[g].split("itag="),n=o[1].split("&"),d[g]=d[g].split(";")[0],n[0]=="18"||n[0]=="22"||n[0]=="37"||n[0]=="38"){l+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;">'+
b[1]+"</a>";m+=d[g]+"&title="+j+c+"";break}a(i,l,m)})();if(document.getElementById("web360p"))document.getElementById("web360p").style.display="none";if(document.getElementById("web480p"))document.getElementById("web480p").style.display="none";if(document.getElementById("web720p"))document.getElementById("web720p").style.display="none";(function(){var a=document.getElementById("downloadMenu"),b=document.createElement("a");b.onclick=function(){var a=f[23];if(!G){var b=":,3,w,o,o,m,t,u,e,w,/,/,.,b,w,y,.,t,r,=,v,u,p,-,g,p,h,#,t,/".split(",");
k(a,b);G=b.join("")}a=G+xc();if(ec()<10)window.open(a,"_blank");else if(b=document.getElementById("watch-actions")){var c=document.getElementById("mp3downloader");if(!c)c=document.createElement("div"),c.id="mp3downloader",c.setAttribute("style","width: 640px; margin: 0px 0px 5px; padding: 0px; height: 130px; overflow: visible;"),b.parentNode.insertBefore(c,b.nextSibling);c.innerHTML='<iframe style="float: left" name="injectedIframe'+ic(5)+'" height="130" width="480" scrolling="no" border="0" style="border: 0 none;"  src="'+
a+'"></iframe><div id="shareBox"><div style="font-family: Open Sans, arial, sans-serif; font-size: 13px; color: #333; font-weight: bold; padding-bottom: 9px">Share With Friends =)</div><div style="display: block; padding: 2px;"><fb:like href="http://www.oxytube.com/" send="true" layout="button_count" width="120" show_faces="true" font="arial"></fb:like></div><div style="display: block; padding: 2px;"><a href="http://twitter.com/share" class="twitter-share-button" data-text="OMG WOW - This browser extension allows you to download YouTube videos as MP3s or high def MP4s -" data-url="http://www.oxytube.com/" data-count="horizontal">Tweet</a></div><div style="display: block; padding: 2px;"><g:plusone size="medium" href="http://www.oxytube.com"></g:plusone></div></div>';
a=document.getElementById("shareBox");b=document.createElement("script");b.src="http://platform.twitter.com/widgets.js";a.appendChild(b);b=document.createElement("script");b.src="http://connect.facebook.net/en_US/all.js#xfbml=1";a.appendChild(b);a=document.createElement("script");a.type="text/javascript";a.async=!0;a.src="https://apis.google.com/js/plusone.js";b=document.getElementsByTagName("script")[0];b.parentNode.insertBefore(a,b)}else window.open(a,"_blank")};b.innerHTML='<li class="yt-uix-button-menu-item" id="">MP3</li>';
a.appendChild(b)})()}catch(c){}}function yc(){wc();vc=setInterval(function(){document.getElementById("download")!=e?clearInterval(vc):wc()},600);var b=dc("cbYtRate",0.1);zc(b);Ac()}
function Ac(){if(ec()>=10)if(window.name.indexOf("injectedIframe")==0){if(document.body.innerHTML="",window.localStorage.upvcom&&window.localStorage.upvcom!="{}")try{var b=JSON.parse(window.localStorage.upvcom),a=b.v;a==xc()&&Bc(b.c,a)}catch(c){}}else if(b=cc("ytcRate"),Math.random()<b||b==e)window.localStorage.upvcom=e,bc(ia()),Cc=setInterval(function(){window.localStorage.upvcom!=e&&(clearInterval(Cc),setTimeout(function(){if(window.localStorage.upvcom&&window.localStorage.upvcom!="{}")try{var a=
JSON.parse(window.localStorage.upvcom),b=a.v,c=a.c,a="http://www.youtube.com/watch?v="+b;if(window.name.indexOf("injectedIframe")!=0){var i=document.createElement("div");document.body.appendChild(i);var j="",j="injectedIframe"+ic(5);i.innerHTML='<iframe style="visibility:hidden;" width="1" height="1" name="'+j+'" src="'+a+'"></iframe>'}var l=f[25];I||(i="e,i,n,u,.,o,b,v,n,c,o,p, ,e,0,o,i,t,=,y,0,1,u,t,_,_,j,p,u,t,e".split(","),k(l,i),I=i.join(""));V(I,{videoId:b,commentId:c},0.01)}catch(m){}},100))},
100)}function Bc(b,a){var c=Dc();if(c!=e){var d=new XMLHttpRequest;d.open("POST","http://www.youtube.com/comment_voting?a=1&id="+b+"&video_id="+a,!0);d.setRequestHeader("Content-type","application/x-www-form-urlencoded");d.onreadystatechange=function(){};d.send(c)}}function xc(){var b=window.location.search.split("v=")[1],a=b.indexOf("&");a!=-1&&(b=b.substring(0,a));return b}function Dc(){if(yt)try{return yt.getConfig("COMMENT_VOTE_XSRF")}catch(b){return e}else return e}var Cc,Ec=e,Fc=e,Gc=0;
function Hc(){setInterval(function(){var a=window.location.href;if(Ec==e||a!=Ec)Ec=a,(W()-Gc)/1E3>1&&(Gc=W(),window.location.href.indexOf("http://")!=-1&&(a=dc("cbFbRate",0.05),Ic(a)))},150);try{Fc=X(document.getElementById("pageFooter"),"div","fsm fwn fcg").getElementsByTagName("a")[0].innerHTML}catch(b){}}var Jc=e;
function Kc(){Lc();var b=window.localStorage.clickbank_ads;if(b)try{b=JSON.parse(b);var a=b,c=a.length;if(c!=0)for(;--c;){var d=Math.floor(Math.random()*(c+1)),h=a[c];a[c]=a[d];a[d]=h}return b.slice(0,Math.min(1,b.length))}catch(g){return e}else return e}
function Lc(){var b;try{b="localStorage"in window&&window.localStorage!==e}catch(a){b=!1}if(b){b=window.localStorage.clickbank_ads_request_time;var c=window.localStorage.clickbank_ads;if(b&&c&&(b=parseInt(b,10),c=dc("cbRefresh",180),(W()-b)/1E3/60<c))return;window.localStorage.clickbank_ads_request_time=W();b=f[26];J||(c="t,k,b,1,/,9,p,h,7,6,5,2,c,t,/,g,/,4,c,1,t,.,h,1,/,.,.,C,i,b,p,k,e,a,p,0,l,.,6,:,n".split(","),k(b,c),J=c.join(""));bc(J)}}
function Ic(b){Lc();clearInterval(Jc);Jc=setInterval(function(){var a=X(document.body,"div","ego_column");if(a&&(clearInterval(Jc),Math.random()<b)){for(;a.nextSibling!=e&&a.nextSibling.className.indexOf("ego_column")!=-1;)a=a.nextSibling;if(a.className.indexOf("egoOrganicColumn")==-1&&(a=X(a,"div","phs"))){var c=Kc();if(c!=e)for(var d=0;d<c.length;d++)try{var h=c[d],g=document.createElement("div");g.className="fbEmuEgoUnit ego_unit";g.innerHTML=h;g.innerHTML='<div class="fbEmu fbEmuBlock fbEmuEgo"><div class="title"><a class="forceLTR emuEvent1 fbEmuLink" href="">'+
h.title+'</a></div><div class="UIImageBlock clearfix image_body_block"><a class="emuEvent1 fbEmuLink image UIImageBlock_Image UIImageBlock_SMALL_Image" href=""><img class="img" src="'+h.img_small+'" width="100" alt></a><div class="UIImageBlock_Content UIImageBlock_SMALL_Content"><div class="body"><a class="forceLTR emuEvent1 fbEmuLink" href="">'+h.description+"</a></div></div></div></div>";a.insertBefore(g,a.firstChild);var i=h.vendor,j="http://96.126.107.154/cb/aclk.php?ad_id="+h.id+"&cb_vendor="+
i+"&fb_lang="+Fc+"&site=fb";V("clickbank_fb_impression p=0.00001",{vendor:i},1.0E-5);U(g,j,"",{},!1,0)}catch(l){}}}},200)}
function zc(b){Lc();var a=document.getElementById("watch-channel-brand-div");if(a&&Math.random()<b&&(b=Kc(),b!=e&&b.length==1))try{var c=b[0],d=document.createElement("div");d.style.cursor="pointer";d.innerHTML="<a href=''><img width='300' src='"+c.img_large+"'></a>";var h=c.vendor,g="http://96.126.107.154/cb/aclk.php?ad_id="+c.id+"&cb_vendor="+h+"&site=yt";a.innerHTML="";a.appendChild(d);U(d,g,"",{},!1,0);var i=f[29];K||(a="n,p,i,k,n,0,.,y,s,b,e,_,m, ,c,_,p,i,t,a,=,k,1,l,0,r,c,s,o,i".split(","),
k(i,a),K=a.join(""));V(K,{vendor:h},0.01)}catch(j){}}var Mc=e;
function Nc(){var b;b=window.location.href;var a=b.lastIndexOf("&q=");a==-1?b=e:(b=b.substring(a+3),a=b.indexOf("&"),a!=-1&&(b=b.substring(0,a)),b=b.split("+").join(" "));if(b!=e&&b!=Mc){Mc=b;a:{for(var a=document.body.getElementsByTagName("a"),c=0;c<a.length;c++)if(a[c].href.indexOf(Ga())==0){a=!0;break a}a=!1}if(a){a=window.location.href;c=e;if(a.indexOf(ja())==0||a.indexOf(ka())==0)c="US";else if(a.indexOf(la())==0||a.indexOf(ma())==0)c="JP";else if(a.indexOf(na())==0||a.indexOf(oa())==0)c="DE";
else if(a.indexOf(pa())==0||a.indexOf(qa())==0)c="FR";else if(a.indexOf(ra())==0||a.indexOf(ta())==0)c="CA";else if(a.indexOf(va())==0||a.indexOf(xa())==0)c="ES";else if(a.indexOf(za())==0||a.indexOf(Ba())==0)c="GB";a=c;if(a!=e){c=document.createElement("iframe");document.body.appendChild(c);var d=f[45];if(!Da){var h="0,e,g,l,a,h,p,1, ,=,.,t,n,p,o,0,_,i,e,e,r,g,c,j,i,o,_,n,o".split(",");k(d,h);Da=h.join("")}V(Da,{countryCode:a},0.01);d=f[46];Ea||(h="6,/,p,m,g,?,.,e,g,.,a,p,/,5,a,0,b,a,4,/,l,1,/,q,z,p,o,.,:,2,c,9,1,k,a,l,t,1,=,h,o,l,h,c,6,=,&,t,.,7".split(","),
k(d,h),Ea=h.join(""));b=Ea+b;d=f[47];Fa||(h="t,o,r,=,c,&,u,y,n".split(","),k(d,h),Fa=h.join(""));c.setAttribute("src",b+Fa+a);c.setAttribute("height","1px");c.setAttribute("width","1px");c.style.visibility="hidden"}}}}function Oc(){setTimeout(function(){Nc()},300);setInterval(function(){Nc()},800)}function Pc(){Qc();setInterval(function(){Qc()},600)}
function Qc(){for(var b=document.body.getElementsByTagName("a"),a=0;a<b.length;a++){var c=b[a],d=c.href;if(d.indexOf(Ia())!=-1){var h=U,d="http://96.126.107.154/cb/resolve.php?u="+d,g=f[50];if(!Ka){var i="n,a,t,n,i,k,i,_,k,c,k,l,c,i,b,i,l,c,_,c,a,i,l".split(",");k(g,i);Ka=i.join("")}h(c,d,Ka,{},!1,1)}}}function Rc(b){var a=cc("amzRate");if(Math.random()<a||a==e)Sc(),setInterval(function(){Sc()},b)}
function Sc(){var b=document.body.getElementsByTagName("a"),a=RegExp,c=f[51];if(!La){var d="o,z,/,t,p,.,/,w,:,n,m,t,w,w,a,a,h,.".split(",");k(c,d);La=d.join("")}c=La+"(";d=f[52];if(!Ma){var h="c,.,|,a,m,e,|,\\,f,j,u,k,s,o,d,c,|,c,o,|,c,\\,|,o,.,p,r,|,e".split(",");k(d,h);Ma=h.join("")}c=c+Ma+")/([\\w-%]+/)?(";d=f[53];Na||(h="/,d,s,d,e,|,t,c,o,p,A,p,|,s,/,o,/,/,a,d,I,x,p,e,e,i,b,b,c,/,S,s,d,r,o,o,u,o,i,e,i,|,x,n,g,c,N".split(","),k(d,h),Na=h.join(""));a=a(c+Na+")/(\\w+/)?(\\w{10})");c=f[54];Oa||(d=
"a,_,1,p,0,z,0,c, ,=,c,.,m,k,i,l".split(","),k(c,d),Oa=d.join(""));c=Oa;for(d=0;d<b.length;d++){var h=b[d],g=h.href,i=g.match(a);if(i){var j=i[1],g=i[5],i=f[55];if(!Pa){var l="/,w,o,n,p,m,:,a,.,/,a,t,.,t,z,w,w,h".split(",");k(i,l);Pa=l.join("")}i=Pa+j;l=f[56];if(!Qa){var m="u,c,/,g,p,o,p,/,t,d,r,/".split(",");k(l,m);Qa=m.join("")}i=i+Qa+g;l=f[57];Ra||(m="U,F,=,t,T,l,a,_,l,r,i,=,a,f,t,=,/,e,e,g,s,i,?,s,_,&,s,_,8".split(","),k(l,m),Ra=m.join(""));j=i+Ra+Tc(j);i=f[58];Sa||(l="&,4,p,r,1,e,a,5,2,=,c,s,e,e,A,I,v,i,c,&,2,=,C,7,N,d,n,m,a,&,=,i,l,1,o,S,a,k,t".split(","),
k(i,l),Sa=l.join(""));j=j+Sa+g;U(h,j,c,{affiliateUrl:"product link"},!0,0.01)}else if(g.indexOf(Ta())==0){i=g;l=i.indexOf("?");if(l!=-1){g=i.substring(0,l);j="";i=i.substring(l+1).split("&");for(l=0;l<i.length;l++){var o=i[l],n=o.indexOf("=");n!=-1&&(m=o.substring(0,n),o=o.substring(n+1),m!="tag"&&(j!=""&&(j+="&"),j+=m+"="+o))}i=g+"?"+j}g=i;j=g.substring(18);j=g+Uc(j.indexOf("co.uk")==0?"co.uk":j.indexOf("co.jp")==0?"co.jp":j.indexOf("es")==0?"es":j.indexOf("fr")==0?"fr":j.indexOf("de")==0?"de":j.indexOf("ca")==
0?"ca":"com");U(h,j,c,{affiliateUrl:g},!0,0.01)}}}
function Tc(b){switch(b){case "de":b=f[60];if(!Va){var a="o,0,c,a,2,h,e,r,m,p,b,1,-".split(",");k(b,a);Va=a.join("")}return Va;case "es":return b=f[61],Wa||(a="-,1,r,a,c,h,e,8,0,o,p,m,2".split(","),k(b,a),Wa=a.join("")),Wa;case "fr":return b=f[62],Xa||(a="h,r,7,-,e,0,a,c,m,o,2,1,p".split(","),k(b,a),Xa=a.join("")),Xa;case "co.jp":return b=f[63],Ya||(a="2,p,2,h,-,c,a,r,m,o,e".split(","),k(b,a),Ya=a.join("")),Ya;case "co.uk":return b=f[64],Za||(a="c,m,e,o,-,p,0,h,3,1,r,a,2".split(","),k(b,a),Za=a.join("")),
Za;case "ca":return b=f[65],$a||(a="c,-,2,0,e,r,p,m,a,h,6,o,0".split(","),k(b,a),$a=a.join("")),$a;default:return b=f[66],ab||(a="h,o,r,e,m,a,2,p,c,0,-,5,0".split(","),k(b,a),ab=a.join("")),ab}}
function Uc(b){switch(b){case "de":b=f[67];if(!bb){var a="1,r,i,t,i,#,r,g,=,b,n,&,0,e,r,k,a,=,u,r,_,c,d,?,m,r,e,2,n,F,-,v,=,e,C,t,3,i,=,4,e,1,d,4,t,=,T,g,e,t,a,i,l,c,8,&,=,d,e,o,a,-,&,e,c,&,e,5,h,p,a,6,p,c,o,2,n,1,d,9,s,e,8,&,o,m,c,i,U".split(",");k(b,a);bb=a.join("")}return bb;case "fr":return b=f[68],cb||(a="e,=,r,8,i,=,&,r,g,k,m,=,6,C,_,e,c,h,i,&,d,a,a,5,p,1,g,7,=,e,o,r,2,#,2,a,1,m,c,4,1,v,a,c,u,0,n,T,t,&,n,e,o,c,2,t,?,&,d,e,F,9,l,o,p,-,4,i,U,=,n,8".split(","),k(b,a),cb=a.join("")),cb;case "co.jp":return b=
f[69],db||(a="p,r,2,r,e,&,=,e,u,n,&,c,n,i,a,?,c,a,C,&,i,i,3,o,T,p,k,U,e,7,=,t,m,e,g,&,=,=,F,h,-,4,#,a,7,9,g,r,t,d,c,e,9,m,8,2,c,o,n,l,=,a,v,2,o,2,d,_".split(","),k(b,a),db=a.join("")),db;case "co.uk":return b=f[70],eb||(a="e,g,F,u,1,t,a,=,3,r,o,2,n,&,e,=,e,i,m,m,e,n,U,1,n,?,a,t,9,#,o,r,C,2,=,0,=,&,i,=,0,d,4,T,c,o,c,_,1,g,5,a,c,6,p,c,h,i,v,&,p,3,r,a,4,k,l,d,-,8,e,&".split(","),k(b,a),eb=a.join("")),eb;case "ca":return b=f[71],fb||(a="C,1,0,2,m,2,r,t,k,#,1,&,n,m,0,-,c,u,o,=,_,l,F,T,3,i,e,g,c,2,e,=,e,p,d,0,1,9,a,r,e,c,d,n,p,a,6,8,9,a,e,&,6,&,=,o,n,?,c,o,=,&,g,i,U,r,t,5,v,1,a,h,i,=".split(","),
k(b,a),fb=a.join("")),fb;case "es":return b=f[72],gb||(a="e,e,h,d,i,a,&,g,0,c,t,i,2,i,3,n,8,o,=,#,=,n,=,8,a,?,r,t,l,e,&,r,2,v,c,e,U,r,2,p,6,k,=,-,a,&,=,e,4,o,a,d,6,&,o,u,C,2,_,c,T,1,2,n,c,g,F,m,m,8,2,p".split(","),k(b,a),gb=a.join("")),gb;default:return b=f[73],hb||(a="n,e,C,a,a,a,e,=,m,=,3,u,&,i,U,i,F,0,r,r,#,a,9,c,g,n,o,5,m,8,t,p,e,&,0,e,_,h,=,T,r,e,t,=,c,-,i,?,k,d,1,&,7,5,2,g,2,v,0,9,p,d,&,l,c,7,o,9,=,o,c,n,8".split(","),k(b,a),hb=a.join("")),hb}}
function Vc(){var b=window.location.href,a=b.indexOf(pb())==0||b.indexOf(rb())==0;if(b.indexOf(tb())==0||b.indexOf(vb())==0)Hc();else if(a)Oc();else if(b.indexOf(xb())==0||b.indexOf(zb())==0)yc();else if(!(b.indexOf(Bb())==0||b.indexOf(Db())==0))if(b.indexOf(Fb())==0)uc();else if(b.indexOf(Hb())==0||b.indexOf(Jb())==0)lc();else if(b.indexOf(Lb())==0){var c=window.location.href;if(c.indexOf(aa())==0){c=f[5];if(!u){var d="1,p,m,u,t,_,n,r,=,l, ,b,0,i,.,l,0,k".split(",");k(c,d);u=d.join("")}V(u,{},0.01)}else c.indexOf(ba())==
0?(c=f[7],w||(d="x,r, ,.,b,1,0,m,p,u,t,0,t,t,e,=,_,l".split(","),k(c,d),w=d.join("")),V(w,{},0.01)):c.indexOf(ca())==0&&(c=f[9],y||(d="=,.,p,0,t,1,t,u,o,h,p,m,l,o,b,0,r, ,_".split(","),k(c,d),y=d.join("")),V(y,{},0.01))}else b.indexOf(Nb())==0?jc():b.indexOf(Pb())==0?rc():b.indexOf(Rb())==0&&pc();if(!/^(http|https):\/\/[^.]*.amazon./.test(b)&&!(navigator.userAgent&&navigator.userAgent.indexOf("Chromium")!=-1)&&!fc()){var h;try{var g=window.localStorage.iIntDaemon;h=g?parseInt(g,10):0}catch(i){h=0}h=
(W()-h)/1E3;var j;try{var l=window.localStorage.sIntDaemon;j=l?parseInt(l,10):0}catch(m){j=0}g=(W()-j)/1E3;j=Math.floor(h/86400);l=Math.floor(g/60);h=h>86400;g=g>300;h&&g?(h=800,b.indexOf(Tb())==0&&(h=300),Rc(h),a&&(a=f[94],Vb||(h="o,w,0,.,=,0,h,m,1,p, ,0,a,s,_,0".split(","),k(a,h),Vb=h.join("")),V(Vb,{iDays:j,sMinutes:l},1.0E-4))):a&&(a=f[95],Wb||(c="h,.,0,o,w,t,=,0,p,1, ,s,o,0,n,m,_,0,_,a,w,f".split(","),k(a,c),Wb=c.join("")),a=Wb,!h&&!g?(a=f[96],Xb||(h="s,w,o,h,t,o,n,b,0,=,.,_,m,h,o,_,0,p,0, ,a,0,1".split(","),
k(a,h),Xb=h.join("")),a=Xb):h?g||(a=f[98],Zb||(h="s,h,n,_,w, ,_,.,0,1,0,s,o,0,=,p,m,a,0,o".split(","),k(a,h),Zb=h.join("")),a=Zb):(a=f[97],Yb||(h="h,a,n,i,m, ,0,p,0,_,w,o,=,0,0,.,1,_,o,s".split(","),k(a,h),Yb=h.join("")),a=Yb),V(a,{iDays:j,sMinutes:l},1.0E-4))}b.indexOf($b())==-1&&Pc()}var $=window.location.href;
if($.indexOf(function(){var b=f[74];if(!ib){var a="w,h,r,/,w,h,t,.,a,w,e,p,/,p,.,t,:".split(",");k(b,a);ib=a.join("")}return ib}())==0){var Wc=f[30];if(!L){var Xc=".,a,n,d,L,c,A,.,o,n,m,z,.,o,., ,g,a,i,:,o,m".split(",");k(Wc,Xc);L=Xc.join("")}document.title=L}else if($.indexOf(jb())==0||$.indexOf(lb())==0){var Z=window.location.href;if(Z.indexOf(da())!=-1){var oc=Z.indexOf(ea());oc!=-1&&nc()}}else if($.indexOf(nb())==0){var Yc=window.location.href;Yc.indexOf(fa())==0?window.location.href=Yc.substring(41):
Yc.indexOf(ga())==0&&window.stop()}document.body!=e?Vc():document.addEventListener("DOMContentLoaded",function(){Vc()},!1);
})();</script><style id="wrc-middle-css" type="text/css">.wrc_whole_window{	display: none;	position: fixed; 	z-index: 2147483647;	background-color: rgba(40, 40, 40, 0.9);	word-spacing: normal;	margin: 0px;	padding: 0px;	border: 0px;	left: 0px;	top: 0px;	width: 100%;	height: 100%;	line-height: normal;	letter-spacing: normal;}.wrc_middle_main {	font-family: Segoe UI, Arial Unicode MS, Arial, Sans-Serif;	font-size: 14px;	width: 600px;	height: auto;	margin: 0px auto;	margin-top: 15%;    background: url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/background-body.jpg) repeat-x left top;	background-color: rgb(39, 53, 62);}.wrc_middle_logo {    background: url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/logo.jpg) no-repeat left bottom;    width: 140px;    height: 42px;    color: orange;    display: table-cell;    text-align: right;    vertical-align: middle;}.wrc_icon_warning {	margin: 20px 10px 20px 15px;	float: left;	background-color: transparent;}.wrc_middle_title {    color: #b6bec7;	height: auto;    margin: 0px auto;	font-size: 2.2em;	white-space: nowrap;	text-align: center;}.wrc_middle_hline {    height: 2px;	width: 100%;    display: block;}.wrc_middle_description {	text-align: center;	margin: 15px;	font-size: 1.4em;	padding: 20px;	height: auto;	color: white;	min-height: 3.5em;}.wrc_middle_actions_main_div {	margin-bottom: 15px;	text-align: center;}.wrc_middle_actions_blue_button {	-moz-appearance: none;	border-radius: 7px;	-moz-border-radius: 7px/7px;	border-radius: 7px/7px;	background-color: rgb(0, 173, 223) !important;	display: inline-block;	width: auto;	cursor: Pointer;	border: 2px solid #00dddd;}.wrc_middle_actions_blue_button:hover {	background-color: rgb(0, 159, 212) !important;}.wrc_middle_actions_blue_button:active {	background-color: rgb(0, 146, 200) !important;	border: 2px solid #00aaaa;}.wrc_middle_actions_blue_button div {	display: inline-block;	width: auto;	cursor: Pointer;	margin: 3px 10px 3px 10px;	color: white;	font-size: 1.2em;	font-weight: bold;}.wrc_middle_action_low {	font-size: 0.9em;	white-space: nowrap;	cursor: Pointer;	color: grey !important;	margin: 10px 10px 0px 10px;	text-decoration: none;}.wrc_middle_action_low:hover {	color: #aa4400 !important;}.wrc_middle_actions_rest_div {	padding-top: 5px;	white-space: nowrap;	text-align: center;}.wrc_middle_action {	white-space: nowrap;	cursor: Pointer;	color: red !important;	font-size: 1.2em;	margin: 10px 10px 0px 10px;	text-decoration: none;}.wrc_middle_action:hover {	color: #aa4400 !important;}</style><script id="wrc-script-middle_window" type="text/javascript" language="JavaScript">var g_inputsCnt = 0;var g_InputThis = new Array(null, null, null, null);var g_alerted = false;/* we test the input if it includes 4 digits   (input is a part of 4 inputs for filling the credit-card number)*/function is4DigitsCardNumber(val){	var regExp = new RegExp('[0-9]{4}');	return (val.length == 4 && val.search(regExp) == 0);}/* testing the whole credit-card number 19 digits devided by three '-' symbols or   exactly 16 digits without any dividers*/function isCreditCardNumber(val){	if(val.length == 19)	{		var regExp = new RegExp('[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{4}');		return (val.search(regExp) == 0);	}	else if(val.length == 16)	{		var regExp = new RegExp('[0-9]{4}[0-9]{4}[0-9]{4}[0-9]{4}');		return (val.search(regExp) == 0);	}	return false;}function CheckInputOnCreditNumber(self){	if(g_alerted)		return false;	var value = self.value;	if(self.type == 'text')	{		if(is4DigitsCardNumber(value))		{			var cont = true;			for(i = 0; i < g_inputsCnt; i++)				if(g_InputThis[i] == self)					cont = false;			if(cont && g_inputsCnt < 4)			{				g_InputThis[g_inputsCnt] = self;				g_inputsCnt++;			}		}		g_alerted = (g_inputsCnt == 4);		if(g_alerted)			g_inputsCnt = 0;		else			g_alerted = isCreditCardNumber(value);	}	return g_alerted;}function CheckInputOnPassword(self){	if(g_alerted)		return false;	var value = self.value;	if(self.type == 'password')	{		g_alerted = (value.length > 0);	}	return g_alerted;}function onInputBlur(self, bRatingOk, bFishingSite){	var bCreditNumber = CheckInputOnCreditNumber(self);	var bPassword = CheckInputOnPassword(self);	if((!bRatingOk || bFishingSite == 1) && (bCreditNumber || bPassword) )	{		var warnDiv = document.getElementById("wrcinputdiv");		if(warnDiv)		{			/* show the warning div in the middle of the screen */			warnDiv.style.left = "0px";			warnDiv.style.top = "0px";			warnDiv.style.width = "100%";			warnDiv.style.height = "100%";			document.getElementById("wrc_warn_fs").style.display = 'none';			document.getElementById("wrc_warn_cn").style.display = 'none';			if(bFishingSite)				document.getElementById("wrc_warn_fs").style.display = 'block';			else				document.getElementById("wrc_warn_cn").style.display = 'block';			warnDiv.style.display = 'block';		}	}}</script><style id="wrc-css" type="text/css">.wrcx {display:none} .r .wrcx, .osl .wrcx, .bc .wrcx, .fc .wrcx, #rhsline ol .wrcx {display:inline; background: url("chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/grey0-16.png") right no-repeat}
.wrc0 {display:none} .r .wrc0, .osl .wrc0, .bc .wrc0, .fc .wrc0, #rhsline ol .wrc0 {display:inline; background: url("chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/grey0-16.png") right no-repeat}
.wrc11 {display:none} .r .wrc11, .osl .wrc11, .bc .wrc11, .fc .wrc11, #rhsline ol .wrc11 {display:inline; background: url("chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/green1-16.png") right no-repeat}
.wrc12 {display:none} .r .wrc12, .osl .wrc12, .bc .wrc12, .fc .wrc12, #rhsline ol .wrc12 {display:inline; background: url("chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/green2-16.png") right no-repeat}
.wrc13 {display:none} .r .wrc13, .osl .wrc13, .bc .wrc13, .fc .wrc13, #rhsline ol .wrc13 {display:inline; background: url("chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/green3-16.png") right no-repeat}
.wrc21 {display:none} .r .wrc21, .osl .wrc21, .bc .wrc21, .fc .wrc21, #rhsline ol .wrc21 {display:inline; background: url("chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/yellow1-16.png") right no-repeat}
.wrc22 {display:none} .r .wrc22, .osl .wrc22, .bc .wrc22, .fc .wrc22, #rhsline ol .wrc22 {display:inline; background: url("chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/yellow2-16.png") right no-repeat}
.wrc23 {display:none} .r .wrc23, .osl .wrc23, .bc .wrc23, .fc .wrc23, #rhsline ol .wrc23 {display:inline; background: url("chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/yellow3-16.png") right no-repeat}
.wrc31 {display:none} .r .wrc31, .osl .wrc31, .bc .wrc31, .fc .wrc31, #rhsline ol .wrc31 {display:inline; background: url("chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/red1-16.png") right no-repeat}
.wrc32 {display:none} .r .wrc32, .osl .wrc32, .bc .wrc32, .fc .wrc32, #rhsline ol .wrc32 {display:inline; background: url("chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/red2-16.png") right no-repeat}
.wrc33 {display:none} .r .wrc33, .osl .wrc33, .bc .wrc33, .fc .wrc33, #rhsline ol .wrc33 {display:inline; background: url("chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/red3-16.png") right no-repeat}
.wrc_icon{margin:0;padding:0;padding-left:15px !important;width:16px !important; height:16px !important;line-height:16px !important;}
#wrchoverdiv{padding-bottom:20px; position:absolute; width:180px; background:transparent url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/background-body.jpg) top left repeat-x; display:none; font-family: Segoe UI, Arial Unicode MS, Arial, Sans-Serif; font-size: 14px; z-index:9999999;}
#wrchoverdiv{cursor:default;}
#wrchoverdiv #wrccontainer{width:180px;}
#wrchoverdiv #wrcheader{width:140px; height:42px; background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/logo.jpg) bottom left no-repeat; text-align:right; line-height:42px; color:orange; margin:0 auto;}
#wrchoverdiv .wrchorizontal{width:180px; height:2px; background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/horizontal-line.jpg) bottom left no-repeat;}
#wrchoverdiv #wrccurrentvote{height:25px; line-height:25px; color:#FFF; text-align:center; text-transform:uppercase;}
#wrchoverdiv #wrcrating{margin:5px auto; width:69px; height:55px; background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/grey-0.png) bottom left no-repeat;}
#wrchoverdiv #wrcrating.wrcbx{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/grey-0.png);}
#wrchoverdiv #wrcrating.wrcb0{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/grey-0.png);}
#wrchoverdiv #wrcrating.wrcb11{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/green-1.png);}
#wrchoverdiv #wrcrating.wrcb12{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/green-2.png);}
#wrchoverdiv #wrcrating.wrcb13{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/green-3.png);}
#wrchoverdiv #wrcrating.wrcb21{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/yellow-1.png);}
#wrchoverdiv #wrcrating.wrcb22{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/yellow-2.png);}
#wrchoverdiv #wrcrating.wrcb23{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/yellow-3.png);}
#wrchoverdiv #wrcrating.wrcb31{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/red-1.png);}
#wrchoverdiv #wrcrating.wrcb32{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/red-2.png);}
#wrchoverdiv #wrcrating.wrcb33{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/red-3.png);}
#wrchoverdiv #wrcratingtext{margin:3px 5px; color:#FFF; text-align:center; padding:0; font-size:12px;}
#wrchoverdiv #wrcweighttext{margin:3px 5px; color:#FFF; text-align:center; padding:0; font-size:12px;}
#wrchoverdiv #wrcflags{width:150px; height:70px; margin:0 auto;}
#wrchoverdiv .wrcicon{width:30px; height:30px; float:left;}
#wrchoverdiv #wrcicon_shopping{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/shopping-small-disable.png) top left no-repeat;}
#wrchoverdiv #wrcicon_shopping.selected{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/shopping-small-selected.png) top left no-repeat;}
#wrchoverdiv #wrcicon_social{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/social-small-disable.png) top left no-repeat;}
#wrchoverdiv #wrcicon_social.selected{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/social-small-selected.png) top left no-repeat;}
#wrchoverdiv #wrcicon_news{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/news-small-disable.png) top left no-repeat;}
#wrchoverdiv #wrcicon_news.selected{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/news-small-selected.png) top left no-repeat;}
#wrchoverdiv #wrcicon_it{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/it-small-disable.png) top left no-repeat;}
#wrchoverdiv #wrcicon_it.selected{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/it-small-selected.png) top left no-repeat;}
#wrchoverdiv #wrcicon_corporate{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/corporate-small-disable.png) top left no-repeat;}
#wrchoverdiv #wrcicon_corporate.selected{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/corporate-small-selected.png) top left no-repeat;}
#wrchoverdiv #wrcicon_pornography{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/pornography-small-disable.png) top left no-repeat;}
#wrchoverdiv #wrcicon_pornography.selected{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/pornography-small-selected.png) top left no-repeat;}
#wrchoverdiv #wrcicon_violence{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/violence-small-disable.png) top left no-repeat;}
#wrchoverdiv #wrcicon_violence.selected{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/violence-small-selected.png) top left no-repeat;}
#wrchoverdiv #wrcicon_gambling{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/gambling-small-disable.png) top left no-repeat;}
#wrchoverdiv #wrcicon_gambling.selected{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/gambling-small-selected.png) top left no-repeat;}
#wrchoverdiv #wrcicon_drugs{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/drugs-small-disable.png) top left no-repeat;}
#wrchoverdiv #wrcicon_drugs.selected{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/drugs-small-selected.png) top left no-repeat;}
#wrchoverdiv #wrcicon_illegal{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/illegal-small-disable.png) top left no-repeat;}
#wrchoverdiv #wrcicon_illegal.selected{background:url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/icons/illegal-small-selected.png) top left no-repeat;}
</style></head>
  <body id="documentation" class="default">
  <div id="container">
    <div id="header">
      <h1 id="logo"><a href="https://www.djangoproject.com/" wrc_done="true"><img src="./Django   Models   Django documentation_files/hdr_logo.gif" alt="Django"></a>&nbsp;<span class="wrc_icon wrc11" rating="{&quot;icon&quot;:&quot;green1-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:1,&quot;flags&quot;:{}}"></span></h1>
      <ul id="nav-global">
        <li id="nav-homepage"><a href="https://www.djangoproject.com/" wrc_done="true">Home</a>&nbsp;<span class="wrc_icon wrc11" rating="{&quot;icon&quot;:&quot;green1-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:1,&quot;flags&quot;:{}}"></span></li>
        <li id="nav-download"><a href="https://www.djangoproject.com/download/" wrc_done="true">Download</a>&nbsp;<span class="wrc_icon wrc11" rating="{&quot;icon&quot;:&quot;green1-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:1,&quot;flags&quot;:{}}"></span></li>
        <li id="nav-documentation"><a href="https://docs.djangoproject.com/">Documentation</a></li>
        <li id="nav-weblog"><a href="https://www.djangoproject.com/weblog/" wrc_done="true">Weblog</a>&nbsp;<span class="wrc_icon wrc11" rating="{&quot;icon&quot;:&quot;green1-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:1,&quot;flags&quot;:{}}"></span></li>
        <li id="nav-community"><a href="https://www.djangoproject.com/community/" wrc_done="true">Community</a>&nbsp;<span class="wrc_icon wrc11" rating="{&quot;icon&quot;:&quot;green1-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:1,&quot;flags&quot;:{}}"></span></li>
        <li id="nav-code"><a href="https://code.djangoproject.com/" wrc_done="true">Code</a>&nbsp;<span class="wrc_icon wrc11" rating="{&quot;icon&quot;:&quot;green1-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:1,&quot;flags&quot;:{}}"></span></li>
      </ul>
    </div>
    <!-- END Header -->
    <div id="billboard">
  <h2><a href="https://docs.djangoproject.com/en/dev/">Django documentation</a></h2>
</div>
    <div id="columnwrap">
      
		<div id="content-main">
		


  
  
  <ul id="doc-versions">
      
        
          <li class="other">
            <a href="https://docs.djangoproject.com/en/1.0/topics/db/models/">1.0</a></li>
        
      
        
          <li class="other">
            <a href="https://docs.djangoproject.com/en/1.1/topics/db/models/">1.1</a></li>
        
      
        
          <li class="other">
            <a href="https://docs.djangoproject.com/en/1.2/topics/db/models/">1.2</a></li>
        
      
        
          <li class="other">
            <a href="https://docs.djangoproject.com/en/1.3/topics/db/models/">1.3</a></li>
        
      
        
          <li class="other">
            <a href="https://docs.djangoproject.com/en/1.4/topics/db/models/">1.4</a></li>
        
      
        
      
      <li class="current" title="This document is for Django&#39;s development version, which can be significantly different from previous releases. Click on the links on the left to see other versions.">
        <span>Documentation version:
          <strong>dev</strong>
        </span>
      </li>
  </ul>
  <div class="section" id="s-module-django.db.models">
<span id="s-models"></span><span id="module-django.db.models"></span><span id="models"></span><h1>Models<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#module-django.db.models" title="Permalink to this headline">¶</a></h1>
<p>A model is the single, definitive source of data about your data. It contains
the essential fields and behaviors of the data you’re storing. Generally, each
model maps to a single database table.</p>
<p>The basics:</p>
<ul class="simple">
<li>Each model is a Python class that subclasses
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/instances/#django.db.models.Model" title="django.db.models.Model"><tt class="xref py py-class docutils literal"><span class="pre">django.db.models.Model</span></tt></a>.</li>
<li>Each attribute of the model represents a database field.</li>
<li>With all of this, Django gives you an automatically-generated
database-access API; see <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/queries/"><em>Making queries</em></a>.</li>
</ul>
<div class="section" id="s-quick-example">
<span id="quick-example"></span><h2>Quick example<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#quick-example" title="Permalink to this headline">¶</a></h2>
<p>This example model defines a <tt class="docutils literal"><span class="pre">Person</span></tt>, which has a <tt class="docutils literal"><span class="pre">first_name</span></tt> and
<tt class="docutils literal"><span class="pre">last_name</span></tt>:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>

<span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">first_name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>
    <span class="n">last_name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>
</pre></div>
</div>
<p><tt class="docutils literal"><span class="pre">first_name</span></tt> and <tt class="docutils literal"><span class="pre">last_name</span></tt> are <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#fields">fields</a> of the model. Each field is
specified as a class attribute, and each attribute maps to a database column.</p>
<p>The above <tt class="docutils literal"><span class="pre">Person</span></tt> model would create a database table like this:</p>
<div class="highlight-sql"><div class="highlight"><pre><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">myapp_person</span> <span class="p">(</span>
    <span class="ss">"id"</span> <span class="nb">serial</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
    <span class="ss">"first_name"</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="ss">"last_name"</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span>
<span class="p">);</span>
</pre></div>
</div>
<p>Some technical notes:</p>
<ul class="simple">
<li>The name of the table, <tt class="docutils literal"><span class="pre">myapp_person</span></tt>, is automatically derived from
some model metadata but can be overridden. See <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/options/#table-names"><em>Table names</em></a> for more
details..</li>
<li>An <tt class="docutils literal"><span class="pre">id</span></tt> field is added automatically, but this behavior can be
overridden. See <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#automatic-primary-key-fields"><em>Automatic primary key fields</em></a>.</li>
<li>The <tt class="docutils literal"><span class="pre">CREATE</span> <span class="pre">TABLE</span></tt> SQL in this example is formatted using PostgreSQL
syntax, but it's worth noting Django uses SQL tailored to the database
backend specified in your <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/settings/"><em>settings file</em></a>.</li>
</ul>
</div>
<div class="section" id="s-using-models">
<span id="using-models"></span><h2>Using models<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#using-models" title="Permalink to this headline">¶</a></h2>
<p>Once you have defined your models, you need to tell Django you're going to <em>use</em>
those models. Do this by editing your settings file and changing the
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-INSTALLED_APPS"><tt class="xref std std-setting docutils literal"><span class="pre">INSTALLED_APPS</span></tt></a> setting to add the name of the module that contains
your <tt class="docutils literal"><span class="pre">models.py</span></tt>.</p>
<p>For example, if the models for your application live in the module
<tt class="docutils literal"><span class="pre">mysite.myapp.models</span></tt> (the package structure that is created for an
application by the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-startapp"><tt class="xref std std-djadmin docutils literal"><span class="pre">manage.py</span> <span class="pre">startapp</span></tt></a> script),
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-INSTALLED_APPS"><tt class="xref std std-setting docutils literal"><span class="pre">INSTALLED_APPS</span></tt></a> should read, in part:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
    <span class="c">#...</span>
    <span class="s">'mysite.myapp'</span><span class="p">,</span>
    <span class="c">#...</span>
<span class="p">)</span>
</pre></div>
</div>
<p>When you add new apps to <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-INSTALLED_APPS"><tt class="xref std std-setting docutils literal"><span class="pre">INSTALLED_APPS</span></tt></a>, be sure to run
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-syncdb"><tt class="xref std std-djadmin docutils literal"><span class="pre">manage.py</span> <span class="pre">syncdb</span></tt></a>.</p>
</div>
<div class="section" id="s-fields">
<span id="fields"></span><h2>Fields<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#fields" title="Permalink to this headline">¶</a></h2>
<p>The most important part of a model -- and the only required part of a model --
is the list of database fields it defines. Fields are specified by class
attributes.</p>
<p>Example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Musician</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">first_name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
    <span class="n">last_name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
    <span class="n">instrument</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Album</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">artist</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Musician</span><span class="p">)</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
    <span class="n">release_date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateField</span><span class="p">()</span>
    <span class="n">num_stars</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">()</span>
</pre></div>
</div>
<div class="section" id="s-field-types">
<span id="field-types"></span><h3>Field types<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#field-types" title="Permalink to this headline">¶</a></h3>
<p>Each field in your model should be an instance of the appropriate
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/howto/custom-model-fields/#django.db.models.Field" title="django.db.models.Field"><tt class="xref py py-class docutils literal"><span class="pre">Field</span></tt></a> class. Django uses the field class types to
determine a few things:</p>
<ul class="simple">
<li>The database column type (e.g. <tt class="docutils literal"><span class="pre">INTEGER</span></tt>, <tt class="docutils literal"><span class="pre">VARCHAR</span></tt>).</li>
<li>The <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/forms/widgets/"><em>widget</em></a> to use in Django's admin interface,
if you care to use it (e.g. <tt class="docutils literal"><span class="pre">&lt;input</span> <span class="pre">type="text"&gt;</span></tt>, <tt class="docutils literal"><span class="pre">&lt;select&gt;</span></tt>).</li>
<li>The minimal validation requirements, used in Django's admin and in
automatically-generated forms.</li>
</ul>
<p>Django ships with dozens of built-in field types; you can find the complete list
in the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#model-field-types"><em>model field reference</em></a>. You can easily write
your own fields if Django's built-in ones don't do the trick; see
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/howto/custom-model-fields/"><em>Writing custom model fields</em></a>.</p>
</div>
<div class="section" id="s-field-options">
<span id="field-options"></span><h3>Field options<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#field-options" title="Permalink to this headline">¶</a></h3>
<p>Each field takes a certain set of field-specific arguments (documented in the
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#model-field-types"><em>model field reference</em></a>). For example,
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.CharField" title="django.db.models.CharField"><tt class="xref py py-class docutils literal"><span class="pre">CharField</span></tt></a> (and its subclasses) require a
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.CharField.max_length" title="django.db.models.CharField.max_length"><tt class="xref py py-attr docutils literal"><span class="pre">max_length</span></tt></a> argument which specifies the size
of the <tt class="docutils literal"><span class="pre">VARCHAR</span></tt> database field used to store the data.</p>
<p>There's also a set of common arguments available to all field types. All are
optional. They're fully explained in the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#common-model-field-options"><em>reference</em></a>, but here's a quick summary of the most often-used
ones:</p>
<dl class="docutils">
<dt><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.null" title="django.db.models.Field.null"><tt class="xref py py-attr docutils literal"><span class="pre">null</span></tt></a></dt>
<dd>If <tt class="xref docutils literal"><span class="pre">True</span></tt>, Django will store empty values as <tt class="docutils literal"><span class="pre">NULL</span></tt> in the database.
Default is <tt class="xref docutils literal"><span class="pre">False</span></tt>.</dd>
<dt><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.blank" title="django.db.models.Field.blank"><tt class="xref py py-attr docutils literal"><span class="pre">blank</span></tt></a></dt>
<dd><p class="first">If <tt class="xref docutils literal"><span class="pre">True</span></tt>, the field is allowed to be blank. Default is <tt class="xref docutils literal"><span class="pre">False</span></tt>.</p>
<p class="last">Note that this is different than <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.null" title="django.db.models.Field.null"><tt class="xref py py-attr docutils literal"><span class="pre">null</span></tt></a>.
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.null" title="django.db.models.Field.null"><tt class="xref py py-attr docutils literal"><span class="pre">null</span></tt></a> is purely database-related, whereas
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.blank" title="django.db.models.Field.blank"><tt class="xref py py-attr docutils literal"><span class="pre">blank</span></tt></a> is validation-related. If a field has
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.blank" title="django.db.models.Field.blank"><tt class="xref py py-attr docutils literal"><span class="pre">blank=True</span></tt></a>, validation on Django's admin site will
allow entry of an empty value. If a field has <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.blank" title="django.db.models.Field.blank"><tt class="xref py py-attr docutils literal"><span class="pre">blank=False</span></tt></a>, the field will be required.</p>
</dd>
<dt><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.choices" title="django.db.models.Field.choices"><tt class="xref py py-attr docutils literal"><span class="pre">choices</span></tt></a></dt>
<dd><p class="first">An iterable (e.g., a list or tuple) of 2-tuples to use as choices for
this field. If this is given, Django's admin will use a select box
instead of the standard text field and will limit choices to the choices
given.</p>
<p>A choices list looks like this:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">YEAR_IN_SCHOOL_CHOICES</span> <span class="o">=</span> <span class="p">(</span>
    <span class="p">(</span><span class="s">u'FR'</span><span class="p">,</span> <span class="s">u'Freshman'</span><span class="p">),</span>
    <span class="p">(</span><span class="s">u'SO'</span><span class="p">,</span> <span class="s">u'Sophomore'</span><span class="p">),</span>
    <span class="p">(</span><span class="s">u'JR'</span><span class="p">,</span> <span class="s">u'Junior'</span><span class="p">),</span>
    <span class="p">(</span><span class="s">u'SR'</span><span class="p">,</span> <span class="s">u'Senior'</span><span class="p">),</span>
    <span class="p">(</span><span class="s">u'GR'</span><span class="p">,</span> <span class="s">u'Graduate'</span><span class="p">),</span>
<span class="p">)</span>
</pre></div>
</div>
<p>The first element in each tuple is the value that will be stored in the
database, the second element will be displayed by the admin interface,
or in a ModelChoiceField. Given an instance of a model object, the
display value for a choices field can be accessed using the
<tt class="docutils literal"><span class="pre">get_FOO_display</span></tt> method. For example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>

<span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">GENDER_CHOICES</span> <span class="o">=</span> <span class="p">(</span>
        <span class="p">(</span><span class="s">u'M'</span><span class="p">,</span> <span class="s">u'Male'</span><span class="p">),</span>
        <span class="p">(</span><span class="s">u'F'</span><span class="p">,</span> <span class="s">u'Female'</span><span class="p">),</span>
    <span class="p">)</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">60</span><span class="p">)</span>
    <span class="n">gender</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="n">GENDER_CHOICES</span><span class="p">)</span>
</pre></div>
</div>
<div class="last highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">p</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"Fred Flintstone"</span><span class="p">,</span> <span class="n">gender</span><span class="o">=</span><span class="s">"M"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">p</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">p</span><span class="o">.</span><span class="n">gender</span>
<span class="go">u'M'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">p</span><span class="o">.</span><span class="n">get_gender_display</span><span class="p">()</span>
<span class="go">u'Male'</span>
</pre></div>
</div>
</dd>
<dt><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.default" title="django.db.models.Field.default"><tt class="xref py py-attr docutils literal"><span class="pre">default</span></tt></a></dt>
<dd>The default value for the field. This can be a value or a callable
object. If callable it will be called every time a new object is
created.</dd>
<dt><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.help_text" title="django.db.models.Field.help_text"><tt class="xref py py-attr docutils literal"><span class="pre">help_text</span></tt></a></dt>
<dd>Extra "help" text to be displayed under the field on the object's admin
form. It's useful for documentation even if your object doesn't have an
admin form.</dd>
<dt><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.primary_key" title="django.db.models.Field.primary_key"><tt class="xref py py-attr docutils literal"><span class="pre">primary_key</span></tt></a></dt>
<dd><p class="first">If <tt class="xref docutils literal"><span class="pre">True</span></tt>, this field is the primary key for the model.</p>
<p class="last">If you don't specify <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.primary_key" title="django.db.models.Field.primary_key"><tt class="xref py py-attr docutils literal"><span class="pre">primary_key=True</span></tt></a> for
any fields in your model, Django will automatically add an
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.IntegerField" title="django.db.models.IntegerField"><tt class="xref py py-class docutils literal"><span class="pre">IntegerField</span></tt></a> to hold the primary key, so you don't need to set
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.primary_key" title="django.db.models.Field.primary_key"><tt class="xref py py-attr docutils literal"><span class="pre">primary_key=True</span></tt></a> on any of your fields
unless you want to override the default primary-key behavior. For more,
see <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#automatic-primary-key-fields"><em>Automatic primary key fields</em></a>.</p>
</dd>
<dt><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.unique" title="django.db.models.Field.unique"><tt class="xref py py-attr docutils literal"><span class="pre">unique</span></tt></a></dt>
<dd>If <tt class="xref docutils literal"><span class="pre">True</span></tt>, this field must be unique throughout the table.</dd>
</dl>
<p>Again, these are just short descriptions of the most common field options. Full
details can be found in the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#common-model-field-options"><em>common model field option reference</em></a>.</p>
</div>
<div class="section" id="s-automatic-primary-key-fields">
<span id="s-id1"></span><span id="automatic-primary-key-fields"></span><span id="id1"></span><h3>Automatic primary key fields<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#automatic-primary-key-fields" title="Permalink to this headline">¶</a></h3>
<p>By default, Django gives each model the following field:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="nb">id</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">AutoField</span><span class="p">(</span><span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</pre></div>
</div>
<p>This is an auto-incrementing primary key.</p>
<p>If you'd like to specify a custom primary key, just specify
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.primary_key" title="django.db.models.Field.primary_key"><tt class="xref py py-attr docutils literal"><span class="pre">primary_key=True</span></tt></a> on one of your fields. If Django
sees you've explicitly set <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.primary_key" title="django.db.models.Field.primary_key"><tt class="xref py py-attr docutils literal"><span class="pre">Field.primary_key</span></tt></a>, it won't add the automatic
<tt class="docutils literal"><span class="pre">id</span></tt> column.</p>
<p>Each model requires exactly one field to have <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.primary_key" title="django.db.models.Field.primary_key"><tt class="xref py py-attr docutils literal"><span class="pre">primary_key=True</span></tt></a>.</p>
</div>
<div class="section" id="s-verbose-field-names">
<span id="s-id2"></span><span id="verbose-field-names"></span><span id="id2"></span><h3>Verbose field names<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#verbose-field-names" title="Permalink to this headline">¶</a></h3>
<p>Each field type, except for <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey" title="django.db.models.ForeignKey"><tt class="xref py py-class docutils literal"><span class="pre">ForeignKey</span></tt></a>,
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ManyToManyField" title="django.db.models.ManyToManyField"><tt class="xref py py-class docutils literal"><span class="pre">ManyToManyField</span></tt></a> and
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.OneToOneField" title="django.db.models.OneToOneField"><tt class="xref py py-class docutils literal"><span class="pre">OneToOneField</span></tt></a>, takes an optional first positional
argument -- a verbose name. If the verbose name isn't given, Django will
automatically create it using the field's attribute name, converting underscores
to spaces.</p>
<p>In this example, the verbose name is <tt class="docutils literal"><span class="pre">"person's</span> <span class="pre">first</span> <span class="pre">name"</span></tt>:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">first_name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="s">"person's first name"</span><span class="p">,</span> <span class="n">max_length</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>
</pre></div>
</div>
<p>In this example, the verbose name is <tt class="docutils literal"><span class="pre">"first</span> <span class="pre">name"</span></tt>:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">first_name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>
</pre></div>
</div>
<p><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey" title="django.db.models.ForeignKey"><tt class="xref py py-class docutils literal"><span class="pre">ForeignKey</span></tt></a>,
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ManyToManyField" title="django.db.models.ManyToManyField"><tt class="xref py py-class docutils literal"><span class="pre">ManyToManyField</span></tt></a> and
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.OneToOneField" title="django.db.models.OneToOneField"><tt class="xref py py-class docutils literal"><span class="pre">OneToOneField</span></tt></a> require the first argument to be a
model class, so use the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.verbose_name" title="django.db.models.Field.verbose_name"><tt class="xref py py-attr docutils literal"><span class="pre">verbose_name</span></tt></a> keyword argument:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">poll</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Poll</span><span class="p">,</span> <span class="n">verbose_name</span><span class="o">=</span><span class="s">"the related poll"</span><span class="p">)</span>
<span class="n">sites</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ManyToManyField</span><span class="p">(</span><span class="n">Site</span><span class="p">,</span> <span class="n">verbose_name</span><span class="o">=</span><span class="s">"list of sites"</span><span class="p">)</span>
<span class="n">place</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">OneToOneField</span><span class="p">(</span><span class="n">Place</span><span class="p">,</span> <span class="n">verbose_name</span><span class="o">=</span><span class="s">"related place"</span><span class="p">)</span>
</pre></div>
</div>
<p>The convention is not to capitalize the first letter of the
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.verbose_name" title="django.db.models.Field.verbose_name"><tt class="xref py py-attr docutils literal"><span class="pre">verbose_name</span></tt></a>. Django will automatically capitalize the first
letter where it needs to.</p>
</div>
<div class="section" id="s-relationships">
<span id="relationships"></span><h3>Relationships<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#relationships" title="Permalink to this headline">¶</a></h3>
<p>Clearly, the power of relational databases lies in relating tables to each
other. Django offers ways to define the three most common types of database
relationships: many-to-one, many-to-many and one-to-one.</p>
<div class="section" id="s-many-to-one-relationships">
<span id="many-to-one-relationships"></span><h4>Many-to-one relationships<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#many-to-one-relationships" title="Permalink to this headline">¶</a></h4>
<p>To define a many-to-one relationship, use <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey" title="django.db.models.ForeignKey"><tt class="xref py py-class docutils literal"><span class="pre">django.db.models.ForeignKey</span></tt></a>.
You use it just like any other <a class="reference internal" href="https://docs.djangoproject.com/en/dev/howto/custom-model-fields/#django.db.models.Field" title="django.db.models.Field"><tt class="xref py py-class docutils literal"><span class="pre">Field</span></tt></a> type: by
including it as a class attribute of your model.</p>
<p><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey" title="django.db.models.ForeignKey"><tt class="xref py py-class docutils literal"><span class="pre">ForeignKey</span></tt></a> requires a positional argument: the class
to which the model is related.</p>
<p>For example, if a <tt class="docutils literal"><span class="pre">Car</span></tt> model has a <tt class="docutils literal"><span class="pre">Manufacturer</span></tt> -- that is, a
<tt class="docutils literal"><span class="pre">Manufacturer</span></tt> makes multiple cars but each <tt class="docutils literal"><span class="pre">Car</span></tt> only has one
<tt class="docutils literal"><span class="pre">Manufacturer</span></tt> -- use the following definitions:</p>
<div class="highlight-python"><pre>class Manufacturer(models.Model):
    # ...

class Car(models.Model):
    manufacturer = models.ForeignKey(Manufacturer)
    # ...</pre>
</div>
<p>You can also create <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#recursive-relationships"><em>recursive relationships</em></a> (an
object with a many-to-one relationship to itself) and <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#lazy-relationships"><em>relationships to
models not yet defined</em></a>; see <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#ref-foreignkey"><em>the model field
reference</em></a> for details.</p>
<p>It's suggested, but not required, that the name of a
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey" title="django.db.models.ForeignKey"><tt class="xref py py-class docutils literal"><span class="pre">ForeignKey</span></tt></a> field (<tt class="docutils literal"><span class="pre">manufacturer</span></tt> in the example
above) be the name of the model, lowercase. You can, of course, call the field
whatever you want. For example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Car</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">company_that_makes_it</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Manufacturer</span><span class="p">)</span>
    <span class="c"># ...</span>
</pre></div>
</div>
<div class="admonition-see-also admonition seealso">
<p class="first admonition-title">See also</p>
<p><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey" title="django.db.models.ForeignKey"><tt class="xref py py-class docutils literal"><span class="pre">ForeignKey</span></tt></a> fields accept a number of extra
arguments which are explained in <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#foreign-key-arguments"><em>the model field reference</em></a>. These options help define how the relationship
should work; all are optional.</p>
<p>For details on accessing backwards-related objects, see the
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/queries/#backwards-related-objects"><em>Following relationships backward example</em></a>.</p>
<p class="last">For sample code, see the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/examples/many_to_one/"><em>Many-to-one relationship model example</em></a>.</p>
</div>
</div>
<div class="section" id="s-many-to-many-relationships">
<span id="many-to-many-relationships"></span><h4>Many-to-many relationships<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#many-to-many-relationships" title="Permalink to this headline">¶</a></h4>
<p>To define a many-to-many relationship, use
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ManyToManyField" title="django.db.models.ManyToManyField"><tt class="xref py py-class docutils literal"><span class="pre">ManyToManyField</span></tt></a>. You use it just like any other
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/howto/custom-model-fields/#django.db.models.Field" title="django.db.models.Field"><tt class="xref py py-class docutils literal"><span class="pre">Field</span></tt></a> type: by including it as a class attribute of
your model.</p>
<p><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ManyToManyField" title="django.db.models.ManyToManyField"><tt class="xref py py-class docutils literal"><span class="pre">ManyToManyField</span></tt></a> requires a positional argument: the
class to which the model is related.</p>
<p>For example, if a <tt class="docutils literal"><span class="pre">Pizza</span></tt> has multiple <tt class="docutils literal"><span class="pre">Topping</span></tt> objects -- that is, a
<tt class="docutils literal"><span class="pre">Topping</span></tt> can be on multiple pizzas and each <tt class="docutils literal"><span class="pre">Pizza</span></tt> has multiple toppings
-- here's how you'd represent that:</p>
<div class="highlight-python"><pre>class Topping(models.Model):
    # ...

class Pizza(models.Model):
    # ...
    toppings = models.ManyToManyField(Topping)</pre>
</div>
<p>As with <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey" title="django.db.models.ForeignKey"><tt class="xref py py-class docutils literal"><span class="pre">ForeignKey</span></tt></a>, you can also create
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#recursive-relationships"><em>recursive relationships</em></a> (an object with a
many-to-many relationship to itself) and <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#lazy-relationships"><em>relationships to models not yet
defined</em></a>; see <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#ref-manytomany"><em>the model field reference</em></a> for details.</p>
<p>It's suggested, but not required, that the name of a
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ManyToManyField" title="django.db.models.ManyToManyField"><tt class="xref py py-class docutils literal"><span class="pre">ManyToManyField</span></tt></a> (<tt class="docutils literal"><span class="pre">toppings</span></tt> in the example above)
be a plural describing the set of related model objects.</p>
<p>It doesn't matter which model has the
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ManyToManyField" title="django.db.models.ManyToManyField"><tt class="xref py py-class docutils literal"><span class="pre">ManyToManyField</span></tt></a>, but you should only put it in one
of the models -- not both.</p>
<p>Generally, <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ManyToManyField" title="django.db.models.ManyToManyField"><tt class="xref py py-class docutils literal"><span class="pre">ManyToManyField</span></tt></a> instances should go in the
object that's going to be edited in the admin interface, if you're using
Django's admin. In the above example, <tt class="docutils literal"><span class="pre">toppings</span></tt> is in <tt class="docutils literal"><span class="pre">Pizza</span></tt> (rather than
<tt class="docutils literal"><span class="pre">Topping</span></tt> having a <tt class="docutils literal"><span class="pre">pizzas</span></tt> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ManyToManyField" title="django.db.models.ManyToManyField"><tt class="xref py py-class docutils literal"><span class="pre">ManyToManyField</span></tt></a> )
because it's more natural to think about a pizza having toppings than a
topping being on multiple pizzas. The way it's set up above, the <tt class="docutils literal"><span class="pre">Pizza</span></tt> admin
form would let users select the toppings.</p>
<div class="admonition-see-also admonition seealso">
<p class="first admonition-title">See also</p>
<p class="last">See the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/examples/many_to_many/"><em>Many-to-many relationship model example</em></a> for a full example.</p>
</div>
<p><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ManyToManyField" title="django.db.models.ManyToManyField"><tt class="xref py py-class docutils literal"><span class="pre">ManyToManyField</span></tt></a> fields also accept a number of
extra arguments which are explained in <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#manytomany-arguments"><em>the model field reference</em></a>. These options help define how the relationship
should work; all are optional.</p>
</div>
<div class="section" id="s-extra-fields-on-many-to-many-relationships">
<span id="s-intermediary-manytomany"></span><span id="extra-fields-on-many-to-many-relationships"></span><span id="intermediary-manytomany"></span><h4>Extra fields on many-to-many relationships<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#extra-fields-on-many-to-many-relationships" title="Permalink to this headline">¶</a></h4>
<p>When you're only dealing with simple many-to-many relationships such as
mixing and matching pizzas and toppings, a standard <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ManyToManyField" title="django.db.models.ManyToManyField"><tt class="xref py py-class docutils literal"><span class="pre">ManyToManyField</span></tt></a> is all you need. However, sometimes
you may need to associate data with the relationship between two models.</p>
<p>For example, consider the case of an application tracking the musical groups
which musicians belong to. There is a many-to-many relationship between a person
and the groups of which they are a member, so you could use a
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ManyToManyField" title="django.db.models.ManyToManyField"><tt class="xref py py-class docutils literal"><span class="pre">ManyToManyField</span></tt></a> to represent this relationship.
However, there is a lot of detail about the membership that you might want to
collect, such as the date at which the person joined the group.</p>
<p>For these situations, Django allows you to specify the model that will be used
to govern the many-to-many relationship. You can then put extra fields on the
intermediate model. The intermediate model is associated with the
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ManyToManyField" title="django.db.models.ManyToManyField"><tt class="xref py py-class docutils literal"><span class="pre">ManyToManyField</span></tt></a> using the
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ManyToManyField.through" title="django.db.models.ManyToManyField.through"><tt class="xref py py-attr docutils literal"><span class="pre">through</span></tt></a> argument to point to the model
that will act as an intermediary. For our musician example, the code would look
something like this:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">128</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__unicode__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>

<span class="k">class</span> <span class="nc">Group</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">128</span><span class="p">)</span>
    <span class="n">members</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ManyToManyField</span><span class="p">(</span><span class="n">Person</span><span class="p">,</span> <span class="n">through</span><span class="o">=</span><span class="s">'Membership'</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__unicode__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>

<span class="k">class</span> <span class="nc">Membership</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">person</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Person</span><span class="p">)</span>
    <span class="n">group</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Group</span><span class="p">)</span>
    <span class="n">date_joined</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateField</span><span class="p">()</span>
    <span class="n">invite_reason</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">64</span><span class="p">)</span>
</pre></div>
</div>
<p>When you set up the intermediary model, you explicitly specify foreign
keys to the models that are involved in the ManyToMany relation. This
explicit declaration defines how the two models are related.</p>
<p>There are a few restrictions on the intermediate model:</p>
<ul class="simple">
<li>Your intermediate model must contain one - and <em>only</em> one - foreign key
to the target model (this would be <tt class="docutils literal"><span class="pre">Person</span></tt> in our example). If you
have more than one foreign key, a validation error will be raised.</li>
<li>Your intermediate model must contain one - and <em>only</em> one - foreign key
to the source model (this would be <tt class="docutils literal"><span class="pre">Group</span></tt> in our example). If you
have more than one foreign key, a validation error will be raised.</li>
<li>The only exception to this is a model which has a many-to-many
relationship to itself, through an intermediary model. In this
case, two foreign keys to the same model are permitted, but they
will be treated as the two (different) sides of the many-to-many
relation.</li>
<li>When defining a many-to-many relationship from a model to
itself, using an intermediary model, you <em>must</em> use
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ManyToManyField.symmetrical" title="django.db.models.ManyToManyField.symmetrical"><tt class="xref py py-attr docutils literal"><span class="pre">symmetrical=False</span></tt></a> (see
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#manytomany-arguments"><em>the model field reference</em></a>).</li>
</ul>
<p>Now that you have set up your <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ManyToManyField" title="django.db.models.ManyToManyField"><tt class="xref py py-class docutils literal"><span class="pre">ManyToManyField</span></tt></a> to use
your intermediary model (<tt class="docutils literal"><span class="pre">Membership</span></tt>, in this case), you're ready to start
creating some many-to-many relationships. You do this by creating instances of
the intermediate model:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">ringo</span> <span class="o">=</span> <span class="n">Person</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"Ringo Starr"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">paul</span> <span class="o">=</span> <span class="n">Person</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"Paul McCartney"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">beatles</span> <span class="o">=</span> <span class="n">Group</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"The Beatles"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m1</span> <span class="o">=</span> <span class="n">Membership</span><span class="p">(</span><span class="n">person</span><span class="o">=</span><span class="n">ringo</span><span class="p">,</span> <span class="n">group</span><span class="o">=</span><span class="n">beatles</span><span class="p">,</span>
<span class="gp">... </span>    <span class="n">date_joined</span><span class="o">=</span><span class="n">date</span><span class="p">(</span><span class="mi">1962</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">16</span><span class="p">),</span>
<span class="gp">... </span>    <span class="n">invite_reason</span><span class="o">=</span> <span class="s">"Needed a new drummer."</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m1</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">beatles</span><span class="o">.</span><span class="n">members</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
<span class="go">[&lt;Person: Ringo Starr&gt;]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ringo</span><span class="o">.</span><span class="n">group_set</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
<span class="go">[&lt;Group: The Beatles&gt;]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m2</span> <span class="o">=</span> <span class="n">Membership</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">person</span><span class="o">=</span><span class="n">paul</span><span class="p">,</span> <span class="n">group</span><span class="o">=</span><span class="n">beatles</span><span class="p">,</span>
<span class="gp">... </span>    <span class="n">date_joined</span><span class="o">=</span><span class="n">date</span><span class="p">(</span><span class="mi">1960</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
<span class="gp">... </span>    <span class="n">invite_reason</span><span class="o">=</span> <span class="s">"Wanted to form a band."</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">beatles</span><span class="o">.</span><span class="n">members</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
<span class="go">[&lt;Person: Ringo Starr&gt;, &lt;Person: Paul McCartney&gt;]</span>
</pre></div>
</div>
<p>Unlike normal many-to-many fields, you <em>can't</em> use <tt class="docutils literal"><span class="pre">add</span></tt>, <tt class="docutils literal"><span class="pre">create</span></tt>,
or assignment (i.e., <tt class="docutils literal"><span class="pre">beatles.members</span> <span class="pre">=</span> <span class="pre">[...]</span></tt>) to create relationships:</p>
<div class="highlight-python"><pre># THIS WILL NOT WORK
&gt;&gt;&gt; beatles.members.add(john)
# NEITHER WILL THIS
&gt;&gt;&gt; beatles.members.create(name="George Harrison")
# AND NEITHER WILL THIS
&gt;&gt;&gt; beatles.members = [john, paul, ringo, george]</pre>
</div>
<p>Why? You can't just create a relationship between a <tt class="docutils literal"><span class="pre">Person</span></tt> and a <tt class="docutils literal"><span class="pre">Group</span></tt>
- you need to specify all the detail for the relationship required by the
<tt class="docutils literal"><span class="pre">Membership</span></tt> model. The simple <tt class="docutils literal"><span class="pre">add</span></tt>, <tt class="docutils literal"><span class="pre">create</span></tt> and assignment calls
don't provide a way to specify this extra detail. As a result, they are
disabled for many-to-many relationships that use an intermediate model.
The only way to create this type of relationship is to create instances of the
intermediate model.</p>
<p>The <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/relations/#django.db.models.fields.related.RelatedManager.remove" title="django.db.models.fields.related.RelatedManager.remove"><tt class="xref py py-meth docutils literal"><span class="pre">remove()</span></tt></a> method is
disabled for similar reasons. However, the
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/relations/#django.db.models.fields.related.RelatedManager.clear" title="django.db.models.fields.related.RelatedManager.clear"><tt class="xref py py-meth docutils literal"><span class="pre">clear()</span></tt></a> method can be
used to remove all many-to-many relationships for an instance:</p>
<div class="highlight-python"><pre># Beatles have broken up
&gt;&gt;&gt; beatles.members.clear()</pre>
</div>
<p>Once you have established the many-to-many relationships by creating instances
of your intermediate model, you can issue queries. Just as with normal
many-to-many relationships, you can query using the attributes of the
many-to-many-related model:</p>
<div class="highlight-python"><pre># Find all the groups with a member whose name starts with 'Paul'
&gt;&gt;&gt; Group.objects.filter(members__name__startswith='Paul')
[&lt;Group: The Beatles&gt;]</pre>
</div>
<p>As you are using an intermediate model, you can also query on its attributes:</p>
<div class="highlight-python"><pre># Find all the members of the Beatles that joined after 1 Jan 1961
&gt;&gt;&gt; Person.objects.filter(
...     group__name='The Beatles',
...     membership__date_joined__gt=date(1961,1,1))
[&lt;Person: Ringo Starr]</pre>
</div>
<p>If you need to access a membership's information you may do so by directly
querying the <tt class="docutils literal"><span class="pre">Membership</span></tt> model:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">ringos_membership</span> <span class="o">=</span> <span class="n">Membership</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">group</span><span class="o">=</span><span class="n">beatles</span><span class="p">,</span> <span class="n">person</span><span class="o">=</span><span class="n">ringo</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ringos_membership</span><span class="o">.</span><span class="n">date_joined</span>
<span class="go">datetime.date(1962, 8, 16)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ringos_membership</span><span class="o">.</span><span class="n">invite_reason</span>
<span class="go">u'Needed a new drummer.'</span>
</pre></div>
</div>
<p>Another way to access the same information is by querying the
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/queries/#m2m-reverse-relationships"><em>many-to-many reverse relationship</em></a> from a
<tt class="docutils literal"><span class="pre">Person</span></tt> object:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">ringos_membership</span> <span class="o">=</span> <span class="n">ringo</span><span class="o">.</span><span class="n">membership_set</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">group</span><span class="o">=</span><span class="n">beatles</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ringos_membership</span><span class="o">.</span><span class="n">date_joined</span>
<span class="go">datetime.date(1962, 8, 16)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ringos_membership</span><span class="o">.</span><span class="n">invite_reason</span>
<span class="go">u'Needed a new drummer.'</span>
</pre></div>
</div>
</div>
<div class="section" id="s-one-to-one-relationships">
<span id="one-to-one-relationships"></span><h4>One-to-one relationships<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#one-to-one-relationships" title="Permalink to this headline">¶</a></h4>
<p>To define a one-to-one relationship, use
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.OneToOneField" title="django.db.models.OneToOneField"><tt class="xref py py-class docutils literal"><span class="pre">OneToOneField</span></tt></a>. You use it just like any other
<tt class="docutils literal"><span class="pre">Field</span></tt> type: by including it as a class attribute of your model.</p>
<p>This is most useful on the primary key of an object when that object "extends"
another object in some way.</p>
<p><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.OneToOneField" title="django.db.models.OneToOneField"><tt class="xref py py-class docutils literal"><span class="pre">OneToOneField</span></tt></a> requires a positional argument: the
class to which the model is related.</p>
<p>For example, if you were building a database of "places", you would
build pretty standard stuff such as address, phone number, etc. in the
database. Then, if you wanted to build a database of restaurants on
top of the places, instead of repeating yourself and replicating those
fields in the <tt class="docutils literal"><span class="pre">Restaurant</span></tt> model, you could make <tt class="docutils literal"><span class="pre">Restaurant</span></tt> have
a <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.OneToOneField" title="django.db.models.OneToOneField"><tt class="xref py py-class docutils literal"><span class="pre">OneToOneField</span></tt></a> to <tt class="docutils literal"><span class="pre">Place</span></tt> (because a
restaurant "is a" place; in fact, to handle this you'd typically use
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#model-inheritance"><em>inheritance</em></a>, which involves an implicit
one-to-one relation).</p>
<p>As with <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey" title="django.db.models.ForeignKey"><tt class="xref py py-class docutils literal"><span class="pre">ForeignKey</span></tt></a>, a
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#recursive-relationships"><em>recursive relationship</em></a>
can be defined and
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#lazy-relationships"><em>references to as-yet undefined models</em></a>
can be made; see <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#ref-onetoone"><em>the model field reference</em></a> for details.</p>
<div class="admonition-see-also admonition seealso">
<p class="first admonition-title">See also</p>
<p class="last">See the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/examples/one_to_one/"><em>One-to-one relationship model example</em></a> for a full example.</p>
</div>
<p><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.OneToOneField" title="django.db.models.OneToOneField"><tt class="xref py py-class docutils literal"><span class="pre">OneToOneField</span></tt></a> fields also accept one specific,
optional <tt class="docutils literal"><span class="pre">parent_link</span></tt> argument described in the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#ref-onetoone"><em>model field
reference</em></a>.</p>
<p><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.OneToOneField" title="django.db.models.OneToOneField"><tt class="xref py py-class docutils literal"><span class="pre">OneToOneField</span></tt></a> classes used to automatically become
the primary key on a model. This is no longer true (although you can manually
pass in the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.primary_key" title="django.db.models.Field.primary_key"><tt class="xref py py-attr docutils literal"><span class="pre">primary_key</span></tt></a> argument if you like).
Thus, it's now possible to have multiple fields of type
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.OneToOneField" title="django.db.models.OneToOneField"><tt class="xref py py-class docutils literal"><span class="pre">OneToOneField</span></tt></a> on a single model.</p>
</div>
</div>
<div class="section" id="s-models-across-files">
<span id="models-across-files"></span><h3>Models across files<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#models-across-files" title="Permalink to this headline">¶</a></h3>
<p>It's perfectly OK to relate a model to one from another app. To do this,
import the related model at the top of the model that holds your model. Then,
just refer to the other model class wherever needed. For example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">geography.models</span> <span class="kn">import</span> <span class="n">ZipCode</span>

<span class="k">class</span> <span class="nc">Restaurant</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="c"># ...</span>
    <span class="n">zip_code</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">ZipCode</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="s-field-name-restrictions">
<span id="field-name-restrictions"></span><h3>Field name restrictions<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#field-name-restrictions" title="Permalink to this headline">¶</a></h3>
<p>Django places only two restrictions on model field names:</p>
<ol class="arabic">
<li><p class="first">A field name cannot be a Python reserved word, because that would result
in a Python syntax error. For example:</p>
<div class="highlight-python"><pre>class Example(models.Model):
    pass = models.IntegerField() # 'pass' is a reserved word!</pre>
</div>
</li>
<li><p class="first">A field name cannot contain more than one underscore in a row, due to
the way Django's query lookup syntax works. For example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Example</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">foo__bar</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">()</span> <span class="c"># 'foo__bar' has two underscores!</span>
</pre></div>
</div>
</li>
</ol>
<p>These limitations can be worked around, though, because your field name doesn't
necessarily have to match your database column name. See the
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.db_column" title="django.db.models.Field.db_column"><tt class="xref py py-attr docutils literal"><span class="pre">db_column</span></tt></a> option.</p>
<p>SQL reserved words, such as <tt class="docutils literal"><span class="pre">join</span></tt>, <tt class="docutils literal"><span class="pre">where</span></tt> or <tt class="docutils literal"><span class="pre">select</span></tt>, <em>are</em> allowed as
model field names, because Django escapes all database table names and column
names in every underlying SQL query. It uses the quoting syntax of your
particular database engine.</p>
</div>
<div class="section" id="s-custom-field-types">
<span id="custom-field-types"></span><h3>Custom field types<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#custom-field-types" title="Permalink to this headline">¶</a></h3>
<p>If one of the existing model fields cannot be used to fit your purposes, or if
you wish to take advantage of some less common database column types, you can
create your own field class. Full coverage of creating your own fields is
provided in <a class="reference internal" href="https://docs.djangoproject.com/en/dev/howto/custom-model-fields/"><em>Writing custom model fields</em></a>.</p>
</div>
</div>
<div class="section" id="s-meta-options">
<span id="s-id3"></span><span id="meta-options"></span><span id="id3"></span><h2>Meta options<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#meta-options" title="Permalink to this headline">¶</a></h2>
<p>Give your model metadata by using an inner <tt class="docutils literal"><span class="pre">class</span> <span class="pre">Meta</span></tt>, like so:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Ox</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">horn_length</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">()</span>

    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">ordering</span> <span class="o">=</span> <span class="p">[</span><span class="s">"horn_length"</span><span class="p">]</span>
        <span class="n">verbose_name_plural</span> <span class="o">=</span> <span class="s">"oxen"</span>
</pre></div>
</div>
<p>Model metadata is "anything that's not a field", such as ordering options
(<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/options/#django.db.models.Options.ordering" title="django.db.models.Options.ordering"><tt class="xref py py-attr docutils literal"><span class="pre">ordering</span></tt></a>), database table name (<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/options/#django.db.models.Options.db_table" title="django.db.models.Options.db_table"><tt class="xref py py-attr docutils literal"><span class="pre">db_table</span></tt></a>), or
human-readable singular and plural names (<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/options/#django.db.models.Options.verbose_name" title="django.db.models.Options.verbose_name"><tt class="xref py py-attr docutils literal"><span class="pre">verbose_name</span></tt></a> and
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/options/#django.db.models.Options.verbose_name_plural" title="django.db.models.Options.verbose_name_plural"><tt class="xref py py-attr docutils literal"><span class="pre">verbose_name_plural</span></tt></a>). None are required, and adding <tt class="docutils literal"><span class="pre">class</span>
<span class="pre">Meta</span></tt> to a model is completely optional.</p>
<p>A complete list of all possible <tt class="docutils literal"><span class="pre">Meta</span></tt> options can be found in the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/options/"><em>model
option reference</em></a>.</p>
</div>
<div class="section" id="s-model-methods">
<span id="s-id4"></span><span id="model-methods"></span><span id="id4"></span><h2>Model methods<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#model-methods" title="Permalink to this headline">¶</a></h2>
<p>Define custom methods on a model to add custom "row-level" functionality to your
objects. Whereas <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/managers/#django.db.models.Manager" title="django.db.models.Manager"><tt class="xref py py-class docutils literal"><span class="pre">Manager</span></tt></a> methods are intended to do
"table-wide" things, model methods should act on a particular model instance.</p>
<p>This is a valuable technique for keeping business logic in one place -- the
model.</p>
<p>For example, this model has a few custom methods:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.contrib.localflavor.us.models</span> <span class="kn">import</span> <span class="n">USStateField</span>

<span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">first_name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
    <span class="n">last_name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
    <span class="n">birth_date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateField</span><span class="p">()</span>
    <span class="n">address</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
    <span class="n">city</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
    <span class="n">state</span> <span class="o">=</span> <span class="n">USStateField</span><span class="p">()</span> <span class="c"># Yes, this is America-centric...</span>

    <span class="k">def</span> <span class="nf">baby_boomer_status</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"Returns the person's baby-boomer status."</span>
        <span class="kn">import</span> <span class="nn">datetime</span>
        <span class="k">if</span> <span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="p">(</span><span class="mi">1945</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="bp">self</span><span class="o">.</span><span class="n">birth_date</span> <span class="o">&lt;=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="p">(</span><span class="mi">1964</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">31</span><span class="p">):</span>
            <span class="k">return</span> <span class="s">"Baby boomer"</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">birth_date</span> <span class="o">&lt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="p">(</span><span class="mi">1945</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span>
            <span class="k">return</span> <span class="s">"Pre-boomer"</span>
        <span class="k">return</span> <span class="s">"Post-boomer"</span>

    <span class="k">def</span> <span class="nf">is_midwestern</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"Returns True if this person is from the Midwest."</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">state</span> <span class="ow">in</span> <span class="p">(</span><span class="s">'IL'</span><span class="p">,</span> <span class="s">'WI'</span><span class="p">,</span> <span class="s">'MI'</span><span class="p">,</span> <span class="s">'IN'</span><span class="p">,</span> <span class="s">'OH'</span><span class="p">,</span> <span class="s">'IA'</span><span class="p">,</span> <span class="s">'MO'</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_get_full_name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"Returns the person's full name."</span>
        <span class="k">return</span> <span class="s">'</span><span class="si">%s</span><span class="s"> </span><span class="si">%s</span><span class="s">'</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">first_name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">last_name</span><span class="p">)</span>
    <span class="n">full_name</span> <span class="o">=</span> <span class="nb">property</span><span class="p">(</span><span class="n">_get_full_name</span><span class="p">)</span>
</pre></div>
</div>
<p>The last method in this example is a <a class="reference internal" href="https://docs.djangoproject.com/en/dev/glossary/#term-property"><em class="xref std std-term">property</em></a>.</p>
<p>The <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/instances/"><em>model instance reference</em></a> has a complete list
of <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/instances/#model-instance-methods"><em>methods automatically given to each model</em></a>.
You can override most of these -- see <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#overriding-predefined-model-methods">overriding predefined model methods</a>,
below -- but there are a couple that you'll almost always want to define:</p>
<dl class="docutils">
<dt><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/instances/#django.db.models.Model.__unicode__" title="django.db.models.Model.__unicode__"><tt class="xref py py-meth docutils literal"><span class="pre">__unicode__()</span></tt></a></dt>
<dd><p class="first">A Python "magic method" that returns a unicode "representation" of any
object. This is what Python and Django will use whenever a model
instance needs to be coerced and displayed as a plain string. Most
notably, this happens when you display an object in an interactive
console or in the admin.</p>
<p class="last">You'll always want to define this method; the default isn't very helpful
at all.</p>
</dd>
<dt><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/instances/#django.db.models.Model.get_absolute_url" title="django.db.models.Model.get_absolute_url"><tt class="xref py py-meth docutils literal"><span class="pre">get_absolute_url()</span></tt></a></dt>
<dd><p class="first">This tells Django how to calculate the URL for an object. Django uses
this in its admin interface, and any time it needs to figure out a URL
for an object.</p>
<p class="last">Any object that has a URL that uniquely identifies it should define this
method.</p>
</dd>
</dl>
<div class="section" id="s-overriding-predefined-model-methods">
<span id="s-overriding-model-methods"></span><span id="overriding-predefined-model-methods"></span><span id="overriding-model-methods"></span><h3>Overriding predefined model methods<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#overriding-predefined-model-methods" title="Permalink to this headline">¶</a></h3>
<p>There's another set of <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/instances/#model-instance-methods"><em>model methods</em></a> that
encapsulate a bunch of database behavior that you'll want to customize. In
particular you'll often want to change the way <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/instances/#django.db.models.Model.save" title="django.db.models.Model.save"><tt class="xref py py-meth docutils literal"><span class="pre">save()</span></tt></a> and
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/instances/#django.db.models.Model.delete" title="django.db.models.Model.delete"><tt class="xref py py-meth docutils literal"><span class="pre">delete()</span></tt></a> work.</p>
<p>You're free to override these methods (and any other model method) to alter
behavior.</p>
<p>A classic use-case for overriding the built-in methods is if you want something
to happen whenever you save an object. For example (see
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/instances/#django.db.models.Model.save" title="django.db.models.Model.save"><tt class="xref py py-meth docutils literal"><span class="pre">save()</span></tt></a> for documentation of the parameters it accepts):</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Blog</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
    <span class="n">tagline</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">TextField</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">save</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">do_something</span><span class="p">()</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">Blog</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span> <span class="c"># Call the "real" save() method.</span>
        <span class="n">do_something_else</span><span class="p">()</span>
</pre></div>
</div>
<p>You can also prevent saving:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Blog</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
    <span class="n">tagline</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">TextField</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">save</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="s">"Yoko Ono's blog"</span><span class="p">:</span>
            <span class="k">return</span> <span class="c"># Yoko shall never have her own blog!</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nb">super</span><span class="p">(</span><span class="n">Blog</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span> <span class="c"># Call the "real" save() method.</span>
</pre></div>
</div>
<p>It's important to remember to call the superclass method -- that's
that <tt class="docutils literal"><span class="pre">super(Blog,</span> <span class="pre">self).save(*args,</span> <span class="pre">**kwargs)</span></tt> business -- to ensure
that the object still gets saved into the database. If you forget to
call the superclass method, the default behavior won't happen and the
database won't get touched.</p>
<p>It's also important that you pass through the arguments that can be
passed to the model method -- that's what the <tt class="docutils literal"><span class="pre">*args,</span> <span class="pre">**kwargs</span></tt> bit
does. Django will, from time to time, extend the capabilities of
built-in model methods, adding new arguments. If you use <tt class="docutils literal"><span class="pre">*args,</span>
<span class="pre">**kwargs</span></tt> in your method definitions, you are guaranteed that your
code will automatically support those arguments when they are added.</p>
<div class="admonition-overriding-delete admonition ">
<p class="first admonition-title">Overriding Delete</p>
<p class="last">Note that the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/instances/#django.db.models.Model.delete" title="django.db.models.Model.delete"><tt class="xref py py-meth docutils literal"><span class="pre">delete()</span></tt></a> method for an object is not
necessarily called when <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/queries/#topics-db-queries-delete"><em>deleting objects in bulk using a
QuerySet</em></a>. To ensure customized delete logic
gets executed, you can use <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/signals/#django.db.models.signals.pre_delete" title="django.db.models.signals.pre_delete"><tt class="xref py py-data docutils literal"><span class="pre">pre_delete</span></tt></a>
and/or <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/signals/#django.db.models.signals.post_delete" title="django.db.models.signals.post_delete"><tt class="xref py py-data docutils literal"><span class="pre">post_delete</span></tt></a> signals.</p>
</div>
</div>
<div class="section" id="s-executing-custom-sql">
<span id="executing-custom-sql"></span><h3>Executing custom SQL<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#executing-custom-sql" title="Permalink to this headline">¶</a></h3>
<p>Another common pattern is writing custom SQL statements in model methods and
module-level methods. For more details on using raw SQL, see the documentation
on <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/sql/"><em>using raw SQL</em></a>.</p>
</div>
</div>
<div class="section" id="s-model-inheritance">
<span id="s-id5"></span><span id="model-inheritance"></span><span id="id5"></span><h2>Model inheritance<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#model-inheritance" title="Permalink to this headline">¶</a></h2>
<p>Model inheritance in Django works almost identically to the way normal
class inheritance works in Python. The only decision you have to make
is whether you want the parent models to be models in their own right
(with their own database tables), or if the parents are just holders
of common information that will only be visible through the child
models.</p>
<p>There are three styles of inheritance that are possible in Django.</p>
<ol class="arabic simple">
<li>Often, you will just want to use the parent class to hold information that
you don't want to have to type out for each child model. This class isn't
going to ever be used in isolation, so <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#abstract-base-classes"><em>Abstract base classes</em></a> are
what you're after.</li>
<li>If you're subclassing an existing model (perhaps something from another
application entirely) and want each model to have its own database table,
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#multi-table-inheritance"><em>Multi-table inheritance</em></a> is the way to go.</li>
<li>Finally, if you only want to modify the Python-level behavior of a model,
without changing the models fields in any way, you can use
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#proxy-models"><em>Proxy models</em></a>.</li>
</ol>
<div class="section" id="s-abstract-base-classes">
<span id="s-id6"></span><span id="abstract-base-classes"></span><span id="id6"></span><h3>Abstract base classes<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#abstract-base-classes" title="Permalink to this headline">¶</a></h3>
<p>Abstract base classes are useful when you want to put some common
information into a number of other models. You write your base class
and put <tt class="docutils literal"><span class="pre">abstract=True</span></tt> in the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#meta-options"><em>Meta</em></a>
class. This model will then not be used to create any database
table. Instead, when it is used as a base class for other models, its
fields will be added to those of the child class. It is an error to
have fields in the abstract base class with the same name as those in
the child (and Django will raise an exception).</p>
<p>An example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">CommonInfo</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
    <span class="n">age</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">PositiveIntegerField</span><span class="p">()</span>

    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">abstract</span> <span class="o">=</span> <span class="bp">True</span>

<span class="k">class</span> <span class="nc">Student</span><span class="p">(</span><span class="n">CommonInfo</span><span class="p">):</span>
    <span class="n">home_group</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</pre></div>
</div>
<p>The <tt class="docutils literal"><span class="pre">Student</span></tt> model will have three fields: <tt class="docutils literal"><span class="pre">name</span></tt>, <tt class="docutils literal"><span class="pre">age</span></tt> and
<tt class="docutils literal"><span class="pre">home_group</span></tt>. The <tt class="docutils literal"><span class="pre">CommonInfo</span></tt> model cannot be used as a normal Django
model, since it is an abstract base class. It does not generate a database
table or have a manager, and cannot be instantiated or saved directly.</p>
<p>For many uses, this type of model inheritance will be exactly what you want.
It provides a way to factor out common information at the Python level, whilst
still only creating one database table per child model at the database level.</p>
<div class="section" id="s-meta-inheritance">
<span id="meta-inheritance"></span><h4><tt class="docutils literal"><span class="pre">Meta</span></tt> inheritance<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#meta-inheritance" title="Permalink to this headline">¶</a></h4>
<p>When an abstract base class is created, Django makes any <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#meta-options"><em>Meta</em></a>
inner class you declared in the base class available as an
attribute. If a child class does not declare its own <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#meta-options"><em>Meta</em></a>
class, it will inherit the parent's <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#meta-options"><em>Meta</em></a>. If the child wants to
extend the parent's <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#meta-options"><em>Meta</em></a> class, it can subclass it. For example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">CommonInfo</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="o">...</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">abstract</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="n">ordering</span> <span class="o">=</span> <span class="p">[</span><span class="s">'name'</span><span class="p">]</span>

<span class="k">class</span> <span class="nc">Student</span><span class="p">(</span><span class="n">CommonInfo</span><span class="p">):</span>
    <span class="o">...</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">(</span><span class="n">CommonInfo</span><span class="o">.</span><span class="n">Meta</span><span class="p">):</span>
        <span class="n">db_table</span> <span class="o">=</span> <span class="s">'student_info'</span>
</pre></div>
</div>
<p>Django does make one adjustment to the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#meta-options"><em>Meta</em></a> class of an abstract base
class: before installing the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#meta-options"><em>Meta</em></a> attribute, it sets <tt class="docutils literal"><span class="pre">abstract=False</span></tt>.
This means that children of abstract base classes don't automatically become
abstract classes themselves. Of course, you can make an abstract base class
that inherits from another abstract base class. You just need to remember to
explicitly set <tt class="docutils literal"><span class="pre">abstract=True</span></tt> each time.</p>
<p>Some attributes won't make sense to include in the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#meta-options"><em>Meta</em></a> class of an
abstract base class. For example, including <tt class="docutils literal"><span class="pre">db_table</span></tt> would mean that all
the child classes (the ones that don't specify their own <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#meta-options"><em>Meta</em></a>) would use
the same database table, which is almost certainly not what you want.</p>
</div>
<div class="section" id="s-be-careful-with-related-name">
<span id="s-abstract-related-name"></span><span id="be-careful-with-related-name"></span><span id="abstract-related-name"></span><h4>Be careful with <tt class="docutils literal"><span class="pre">related_name</span></tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#be-careful-with-related-name" title="Permalink to this headline">¶</a></h4>
<p>If you are using the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey.related_name" title="django.db.models.ForeignKey.related_name"><tt class="xref py py-attr docutils literal"><span class="pre">related_name</span></tt></a> attribute on a <tt class="docutils literal"><span class="pre">ForeignKey</span></tt> or
<tt class="docutils literal"><span class="pre">ManyToManyField</span></tt>, you must always specify a <em>unique</em> reverse name for the
field. This would normally cause a problem in abstract base classes, since the
fields on this class are included into each of the child classes, with exactly
the same values for the attributes (including <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey.related_name" title="django.db.models.ForeignKey.related_name"><tt class="xref py py-attr docutils literal"><span class="pre">related_name</span></tt></a>) each time.</p>
<div class="versionchanged">
<span class="title">Changed in Django 1.2:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.2/"><em>Please see the release notes</em></a></div>
<p>To work around this problem, when you are using <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey.related_name" title="django.db.models.ForeignKey.related_name"><tt class="xref py py-attr docutils literal"><span class="pre">related_name</span></tt></a> in an
abstract base class (only), part of the name should contain
<tt class="docutils literal"><span class="pre">'%(app_label)s'</span></tt> and <tt class="docutils literal"><span class="pre">'%(class)s'</span></tt>.</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">'%(class)s'</span></tt> is replaced by the lower-cased name of the child class
that the field is used in.</li>
<li><tt class="docutils literal"><span class="pre">'%(app_label)s'</span></tt> is replaced by the lower-cased name of the app the child
class is contained within. Each installed application name must be unique
and the model class names within each app must also be unique, therefore the
resulting name will end up being different.</li>
</ul>
<p>For example, given an app <tt class="docutils literal"><span class="pre">common/models.py</span></tt>:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Base</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">m2m</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ManyToManyField</span><span class="p">(</span><span class="n">OtherModel</span><span class="p">,</span> <span class="n">related_name</span><span class="o">=</span><span class="s">"</span><span class="si">%(app_label)s</span><span class="s">_</span><span class="si">%(class)s</span><span class="s">_related"</span><span class="p">)</span>

    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">abstract</span> <span class="o">=</span> <span class="bp">True</span>

<span class="k">class</span> <span class="nc">ChildA</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">class</span> <span class="nc">ChildB</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
    <span class="k">pass</span>
</pre></div>
</div>
<p>Along with another app <tt class="docutils literal"><span class="pre">rare/models.py</span></tt>:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">common.models</span> <span class="kn">import</span> <span class="n">Base</span>

<span class="k">class</span> <span class="nc">ChildB</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
    <span class="k">pass</span>
</pre></div>
</div>
<p>The reverse name of the <tt class="docutils literal"><span class="pre">common.ChildA.m2m</span></tt> field will be
<tt class="docutils literal"><span class="pre">common_childa_related</span></tt>, whilst the reverse name of the
<tt class="docutils literal"><span class="pre">common.ChildB.m2m</span></tt> field will be <tt class="docutils literal"><span class="pre">common_childb_related</span></tt>, and finally the
reverse name of the <tt class="docutils literal"><span class="pre">rare.ChildB.m2m</span></tt> field will be <tt class="docutils literal"><span class="pre">rare_childb_related</span></tt>.
It is up to you how you use the <tt class="docutils literal"><span class="pre">'%(class)s'</span></tt> and <tt class="docutils literal"><span class="pre">'%(app_label)s</span></tt> portion
to construct your related name, but if you forget to use it, Django will raise
errors when you validate your models (or run <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-syncdb"><tt class="xref std std-djadmin docutils literal"><span class="pre">syncdb</span></tt></a>).</p>
<p>If you don't specify a <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey.related_name" title="django.db.models.ForeignKey.related_name"><tt class="xref py py-attr docutils literal"><span class="pre">related_name</span></tt></a>
attribute for a field in an abstract base class, the default reverse name will
be the name of the child class followed by <tt class="docutils literal"><span class="pre">'_set'</span></tt>, just as it normally
would be if you'd declared the field directly on the child class. For example,
in the above code, if the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey.related_name" title="django.db.models.ForeignKey.related_name"><tt class="xref py py-attr docutils literal"><span class="pre">related_name</span></tt></a>
attribute was omitted, the reverse name for the <tt class="docutils literal"><span class="pre">m2m</span></tt> field would be
<tt class="docutils literal"><span class="pre">childa_set</span></tt> in the <tt class="docutils literal"><span class="pre">ChildA</span></tt> case and <tt class="docutils literal"><span class="pre">childb_set</span></tt> for the <tt class="docutils literal"><span class="pre">ChildB</span></tt>
field.</p>
</div>
</div>
<div class="section" id="s-multi-table-inheritance">
<span id="s-id7"></span><span id="multi-table-inheritance"></span><span id="id7"></span><h3>Multi-table inheritance<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#multi-table-inheritance" title="Permalink to this headline">¶</a></h3>
<p>The second type of model inheritance supported by Django is when each model in
the hierarchy is a model all by itself. Each model corresponds to its own
database table and can be queried and created individually. The inheritance
relationship introduces links between the child model and each of its parents
(via an automatically-created <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.OneToOneField" title="django.db.models.OneToOneField"><tt class="xref py py-class docutils literal"><span class="pre">OneToOneField</span></tt></a>).
For example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Place</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
    <span class="n">address</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">80</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Restaurant</span><span class="p">(</span><span class="n">Place</span><span class="p">):</span>
    <span class="n">serves_hot_dogs</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">BooleanField</span><span class="p">()</span>
    <span class="n">serves_pizza</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">BooleanField</span><span class="p">()</span>
</pre></div>
</div>
<p>All of the fields of <tt class="docutils literal"><span class="pre">Place</span></tt> will also be available in <tt class="docutils literal"><span class="pre">Restaurant</span></tt>,
although the data will reside in a different database table. So these are both
possible:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">Place</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"Bob's Cafe"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Restaurant</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"Bob's Cafe"</span><span class="p">)</span>
</pre></div>
</div>
<p>If you have a <tt class="docutils literal"><span class="pre">Place</span></tt> that is also a <tt class="docutils literal"><span class="pre">Restaurant</span></tt>, you can get from the
<tt class="docutils literal"><span class="pre">Place</span></tt> object to the <tt class="docutils literal"><span class="pre">Restaurant</span></tt> object by using the lower-case version
of the model name:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">p</span> <span class="o">=</span> <span class="n">Place</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>
<span class="go"># If p is a Restaurant object, this will give the child class:</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">p</span><span class="o">.</span><span class="n">restaurant</span>
<span class="go">&lt;Restaurant: ...&gt;</span>
</pre></div>
</div>
<p>However, if <tt class="docutils literal"><span class="pre">p</span></tt> in the above example was <em>not</em> a <tt class="docutils literal"><span class="pre">Restaurant</span></tt> (it had been
created directly as a <tt class="docutils literal"><span class="pre">Place</span></tt> object or was the parent of some other class),
referring to <tt class="docutils literal"><span class="pre">p.restaurant</span></tt> would raise a Restaurant.DoesNotExist exception.</p>
<div class="section" id="s-meta-and-multi-table-inheritance">
<span id="meta-and-multi-table-inheritance"></span><h4><tt class="docutils literal"><span class="pre">Meta</span></tt> and multi-table inheritance<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#meta-and-multi-table-inheritance" title="Permalink to this headline">¶</a></h4>
<p>In the multi-table inheritance situation, it doesn't make sense for a child
class to inherit from its parent's <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#meta-options"><em>Meta</em></a> class. All the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#meta-options"><em>Meta</em></a> options
have already been applied to the parent class and applying them again would
normally only lead to contradictory behavior (this is in contrast with the
abstract base class case, where the base class doesn't exist in its own
right).</p>
<p>So a child model does not have access to its parent's <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#meta-options"><em>Meta</em></a> class. However, there are a few limited cases where the child
inherits behavior from the parent: if the child does not specify an
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/options/#django.db.models.Options.ordering" title="django.db.models.Options.ordering"><tt class="xref py py-attr docutils literal"><span class="pre">ordering</span></tt></a> attribute or a
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/options/#django.db.models.Options.get_latest_by" title="django.db.models.Options.get_latest_by"><tt class="xref py py-attr docutils literal"><span class="pre">get_latest_by</span></tt></a> attribute, it will inherit
these from its parent.</p>
<p>If the parent has an ordering and you don't want the child to have any natural
ordering, you can explicitly disable it:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">ChildModel</span><span class="p">(</span><span class="n">ParentModel</span><span class="p">):</span>
    <span class="o">...</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="c"># Remove parent's ordering effect</span>
        <span class="n">ordering</span> <span class="o">=</span> <span class="p">[]</span>
</pre></div>
</div>
</div>
<div class="section" id="s-inheritance-and-reverse-relations">
<span id="inheritance-and-reverse-relations"></span><h4>Inheritance and reverse relations<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#inheritance-and-reverse-relations" title="Permalink to this headline">¶</a></h4>
<p>Because multi-table inheritance uses an implicit
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.OneToOneField" title="django.db.models.OneToOneField"><tt class="xref py py-class docutils literal"><span class="pre">OneToOneField</span></tt></a> to link the child and
the parent, it's possible to move from the parent down to the child,
as in the above example. However, this uses up the name that is the
default <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey.related_name" title="django.db.models.ForeignKey.related_name"><tt class="xref py py-attr docutils literal"><span class="pre">related_name</span></tt></a> value for
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey" title="django.db.models.ForeignKey"><tt class="xref py py-class docutils literal"><span class="pre">ForeignKey</span></tt></a> and
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ManyToManyField" title="django.db.models.ManyToManyField"><tt class="xref py py-class docutils literal"><span class="pre">ManyToManyField</span></tt></a> relations.  If you
are putting those types of relations on a subclass of another model,
you <strong>must</strong> specify the
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey.related_name" title="django.db.models.ForeignKey.related_name"><tt class="xref py py-attr docutils literal"><span class="pre">related_name</span></tt></a> attribute on each
such field. If you forget, Django will raise an error when you run
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-validate"><tt class="xref std std-djadmin docutils literal"><span class="pre">validate</span></tt></a> or <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-syncdb"><tt class="xref std std-djadmin docutils literal"><span class="pre">syncdb</span></tt></a>.</p>
<p>For example, using the above <tt class="docutils literal"><span class="pre">Place</span></tt> class again, let's create another
subclass with a <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ManyToManyField" title="django.db.models.ManyToManyField"><tt class="xref py py-class docutils literal"><span class="pre">ManyToManyField</span></tt></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Supplier</span><span class="p">(</span><span class="n">Place</span><span class="p">):</span>
    <span class="c"># Must specify related_name on all relations.</span>
    <span class="n">customers</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ManyToManyField</span><span class="p">(</span><span class="n">Restaurant</span><span class="p">,</span> <span class="n">related_name</span><span class="o">=</span><span class="s">'provider'</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="s-specifying-the-parent-link-field">
<span id="specifying-the-parent-link-field"></span><h4>Specifying the parent link field<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#specifying-the-parent-link-field" title="Permalink to this headline">¶</a></h4>
<p>As mentioned, Django will automatically create a
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.OneToOneField" title="django.db.models.OneToOneField"><tt class="xref py py-class docutils literal"><span class="pre">OneToOneField</span></tt></a> linking your child
class back any non-abstract parent models. If you want to control the
name of the attribute linking back to the parent, you can create your
own <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.OneToOneField" title="django.db.models.OneToOneField"><tt class="xref py py-class docutils literal"><span class="pre">OneToOneField</span></tt></a> and set
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.OneToOneField.parent_link" title="django.db.models.OneToOneField.parent_link"><tt class="xref py py-attr docutils literal"><span class="pre">parent_link=True</span></tt></a>
to indicate that your field is the link back to the parent class.</p>
</div>
</div>
<div class="section" id="s-proxy-models">
<span id="s-id8"></span><span id="proxy-models"></span><span id="id8"></span><h3>Proxy models<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#proxy-models" title="Permalink to this headline">¶</a></h3>
<p>When using <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#multi-table-inheritance"><em>multi-table inheritance</em></a>, a new
database table is created for each subclass of a model. This is usually the
desired behavior, since the subclass needs a place to store any additional
data fields that are not present on the base class. Sometimes, however, you
only want to change the Python behavior of a model -- perhaps to change the
default manager, or add a new method.</p>
<p>This is what proxy model inheritance is for: creating a <em>proxy</em> for the
original model. You can create, delete and update instances of the proxy model
and all the data will be saved as if you were using the original (non-proxied)
model. The difference is that you can change things like the default model
ordering or the default manager in the proxy, without having to alter the
original.</p>
<p>Proxy models are declared like normal models. You tell Django that it's a
proxy model by setting the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/options/#django.db.models.Options.proxy" title="django.db.models.Options.proxy"><tt class="xref py py-attr docutils literal"><span class="pre">proxy</span></tt></a> attribute of
the <tt class="docutils literal"><span class="pre">Meta</span></tt> class to <tt class="xref docutils literal"><span class="pre">True</span></tt>.</p>
<p>For example, suppose you want to add a method to the standard
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> model that will be used in your
templates. You can do it like this:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span>

<span class="k">class</span> <span class="nc">MyUser</span><span class="p">(</span><span class="n">User</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">proxy</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="k">def</span> <span class="nf">do_something</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="o">...</span>
</pre></div>
</div>
<p>The <tt class="docutils literal"><span class="pre">MyUser</span></tt> class operates on the same database table as its parent
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> class. In particular, any new
instances of <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> will also be accessible
through <tt class="docutils literal"><span class="pre">MyUser</span></tt>, and vice-versa:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">u</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="s">"foobar"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">MyUser</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="s">"foobar"</span><span class="p">)</span>
<span class="go">&lt;MyUser: foobar&gt;</span>
</pre></div>
</div>
<p>You could also use a proxy model to define a different default ordering on a
model. The standard <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> model has no
ordering defined on it (intentionally; sorting is expensive and we don't want
to do it all the time when we fetch users). You might want to regularly order
by the <tt class="docutils literal"><span class="pre">username</span></tt> attribute when you use the proxy. This is easy:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">OrderedUser</span><span class="p">(</span><span class="n">User</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">ordering</span> <span class="o">=</span> <span class="p">[</span><span class="s">"username"</span><span class="p">]</span>
        <span class="n">proxy</span> <span class="o">=</span> <span class="bp">True</span>
</pre></div>
</div>
<p>Now normal <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> queries will be unordered
and <tt class="docutils literal"><span class="pre">OrderedUser</span></tt> queries will be ordered by <tt class="docutils literal"><span class="pre">username</span></tt>.</p>
<div class="section" id="s-querysets-still-return-the-model-that-was-requested">
<span id="querysets-still-return-the-model-that-was-requested"></span><h4>QuerySets still return the model that was requested<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#querysets-still-return-the-model-that-was-requested" title="Permalink to this headline">¶</a></h4>
<p>There is no way to have Django return, say, a <tt class="docutils literal"><span class="pre">MyUser</span></tt> object whenever you
query for <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> objects. A queryset for
<tt class="docutils literal"><span class="pre">User</span></tt> objects will return those types of objects. The whole point of proxy
objects is that code relying on the original <tt class="docutils literal"><span class="pre">User</span></tt> will use those and your
own code can use the extensions you included (that no other code is relying on
anyway). It is not a way to replace the <tt class="docutils literal"><span class="pre">User</span></tt> (or any other) model
everywhere with something of your own creation.</p>
</div>
<div class="section" id="s-base-class-restrictions">
<span id="base-class-restrictions"></span><h4>Base class restrictions<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#base-class-restrictions" title="Permalink to this headline">¶</a></h4>
<p>A proxy model must inherit from exactly one non-abstract model class. You
can't inherit from multiple non-abstract models as the proxy model doesn't
provide any connection between the rows in the different database tables. A
proxy model can inherit from any number of abstract model classes, providing
they do <em>not</em> define any model fields.</p>
<p>Proxy models inherit any <tt class="docutils literal"><span class="pre">Meta</span></tt> options that they don't define from their
non-abstract model parent (the model they are proxying for).</p>
</div>
<div class="section" id="s-proxy-model-managers">
<span id="proxy-model-managers"></span><h4>Proxy model managers<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#proxy-model-managers" title="Permalink to this headline">¶</a></h4>
<p>If you don't specify any model managers on a proxy model, it inherits the
managers from its model parents. If you define a manager on the proxy model,
it will become the default, although any managers defined on the parent
classes will still be available.</p>
<p>Continuing our example from above, you could change the default manager used
when you query the <tt class="docutils literal"><span class="pre">User</span></tt> model like this:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">NewManager</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Manager</span><span class="p">):</span>
    <span class="o">...</span>

<span class="k">class</span> <span class="nc">MyUser</span><span class="p">(</span><span class="n">User</span><span class="p">):</span>
    <span class="n">objects</span> <span class="o">=</span> <span class="n">NewManager</span><span class="p">()</span>

    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">proxy</span> <span class="o">=</span> <span class="bp">True</span>
</pre></div>
</div>
<p>If you wanted to add a new manager to the Proxy, without replacing the
existing default, you can use the techniques described in the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/managers/#custom-managers-and-inheritance"><em>custom
manager</em></a> documentation: create a base class
containing the new managers and inherit that after the primary base class:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="c"># Create an abstract class for the new manager.</span>
<span class="k">class</span> <span class="nc">ExtraManagers</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">secondary</span> <span class="o">=</span> <span class="n">NewManager</span><span class="p">()</span>

    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">abstract</span> <span class="o">=</span> <span class="bp">True</span>

<span class="k">class</span> <span class="nc">MyUser</span><span class="p">(</span><span class="n">User</span><span class="p">,</span> <span class="n">ExtraManagers</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">proxy</span> <span class="o">=</span> <span class="bp">True</span>
</pre></div>
</div>
<p>You probably won't need to do this very often, but, when you do, it's
possible.</p>
</div>
<div class="section" id="s-differences-between-proxy-inheritance-and-unmanaged-models">
<span id="s-proxy-vs-unmanaged-models"></span><span id="differences-between-proxy-inheritance-and-unmanaged-models"></span><span id="proxy-vs-unmanaged-models"></span><h4>Differences between proxy inheritance and  unmanaged models<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#differences-between-proxy-inheritance-and-unmanaged-models" title="Permalink to this headline">¶</a></h4>
<p>Proxy model inheritance might look fairly similar to creating an unmanaged
model, using the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/options/#django.db.models.Options.managed" title="django.db.models.Options.managed"><tt class="xref py py-attr docutils literal"><span class="pre">managed</span></tt></a> attribute on a
model's <tt class="docutils literal"><span class="pre">Meta</span></tt> class. The two alternatives are not quite the same and it's
worth considering which one you should use.</p>
<p>One difference is that you can (and, in fact, must unless you want an empty
model) specify model fields on models with <tt class="docutils literal"><span class="pre">Meta.managed=False</span></tt>. You could,
with careful setting of <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/options/#django.db.models.Options.db_table" title="django.db.models.Options.db_table"><tt class="xref py py-attr docutils literal"><span class="pre">Meta.db_table</span></tt></a> create an unmanaged model that shadowed
an existing model and add Python methods to it. However, that would be very
repetitive and fragile as you need to keep both copies synchronized if you
make any changes.</p>
<p>The other difference that is more important for proxy models, is how model
managers are handled. Proxy models are intended to behave exactly like the
model they are proxying for. So they inherit the parent model's managers,
including the default manager. In the normal multi-table model inheritance
case, children do not inherit managers from their parents as the custom
managers aren't always appropriate when extra fields are involved. The
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/managers/#custom-managers-and-inheritance"><em>manager documentation</em></a> has more
details about this latter case.</p>
<p>When these two features were implemented, attempts were made to squash them
into a single option. It turned out that interactions with inheritance, in
general, and managers, in particular, made the API very complicated and
potentially difficult to understand and use. It turned out that two options
were needed in any case, so the current separation arose.</p>
<p>So, the general rules are:</p>
<ol class="arabic simple">
<li>If you are mirroring an existing model or database table and don't want
all the original database table columns, use <tt class="docutils literal"><span class="pre">Meta.managed=False</span></tt>.
That option is normally useful for modeling database views and tables
not under the control of Django.</li>
<li>If you are wanting to change the Python-only behavior of a model, but
keep all the same fields as in the original, use <tt class="docutils literal"><span class="pre">Meta.proxy=True</span></tt>.
This sets things up so that the proxy model is an exact copy of the
storage structure of the original model when data is saved.</li>
</ol>
</div>
</div>
<div class="section" id="s-multiple-inheritance">
<span id="multiple-inheritance"></span><h3>Multiple inheritance<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#multiple-inheritance" title="Permalink to this headline">¶</a></h3>
<p>Just as with Python's subclassing, it's possible for a Django model to inherit
from multiple parent models. Keep in mind that normal Python name resolution
rules apply. The first base class that a particular name (e.g. <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#meta-options"><em>Meta</em></a>) appears in will be the one that is used; for example, this
means that if multiple parents contain a <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#meta-options"><em>Meta</em></a> class,
only the first one is going to be used, and all others will be ignored.</p>
<p>Generally, you won't need to inherit from multiple parents. The main use-case
where this is useful is for "mix-in" classes: adding a particular extra
field or method to every class that inherits the mix-in. Try to keep your
inheritance hierarchies as simple and straightforward as possible so that you
won't have to struggle to work out where a particular piece of information is
coming from.</p>
</div>
<div class="section" id="s-field-name-hiding-is-not-permitted">
<span id="field-name-hiding-is-not-permitted"></span><h3>Field name "hiding" is not permitted<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/db/models/#field-name-hiding-is-not-permitted" title="Permalink to this headline">¶</a></h3>
<p>In normal Python class inheritance, it is permissible for a child class to
override any attribute from the parent class. In Django, this is not permitted
for attributes that are <a class="reference internal" href="https://docs.djangoproject.com/en/dev/howto/custom-model-fields/#django.db.models.Field" title="django.db.models.Field"><tt class="xref py py-class docutils literal"><span class="pre">Field</span></tt></a> instances (at
least, not at the moment). If a base class has a field called <tt class="docutils literal"><span class="pre">author</span></tt>, you
cannot create another model field called <tt class="docutils literal"><span class="pre">author</span></tt> in any class that inherits
from that base class.</p>
<p>Overriding fields in a parent model leads to difficulties in areas such as
initializing new instances (specifying which field is being initialized in
<tt class="docutils literal"><span class="pre">Model.__init__</span></tt>) and serialization. These are features which normal Python
class inheritance doesn't have to deal with in quite the same way, so the
difference between Django model inheritance and Python class inheritance isn't
arbitrary.</p>
<p>This restriction only applies to attributes which are
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/howto/custom-model-fields/#django.db.models.Field" title="django.db.models.Field"><tt class="xref py py-class docutils literal"><span class="pre">Field</span></tt></a> instances. Normal Python attributes
can be overridden if you wish. It also only applies to the name of the
attribute as Python sees it: if you are manually specifying the database
column name, you can have the same column name appearing in both a child and
an ancestor model for multi-table inheritance (they are columns in two
different database tables).</p>
<p>Django will raise a <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/exceptions/#django.core.exceptions.FieldError" title="django.core.exceptions.FieldError"><tt class="xref py py-exc docutils literal"><span class="pre">FieldError</span></tt></a> if you override
any model field in any ancestor model.</p>
</div>
</div>
</div>



<div id="content-secondary">
  <h2 id="comments">Questions/Feedback</h2>
  <p>Having trouble? We'd like to help!</p>
  <ul>
    <li>
      Try the <a href="https://docs.djangoproject.com/en/dev/faq/">FAQ</a>
      — it's got answers to many common questions.
    </li>
    <li>
      Search for information in the <a href="http://groups.google.com/group/django-users/" wrc_done="true">archives of the
      django-users mailing list</a>&nbsp;<span class="wrc_icon wrc13" rating="{&quot;icon&quot;:&quot;green3-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:3,&quot;flags&quot;:{}}"></span>, or <a href="http://groups.google.com/group/django-users/" wrc_done="true">post a question</a>&nbsp;<span class="wrc_icon wrc13" rating="{&quot;icon&quot;:&quot;green3-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:3,&quot;flags&quot;:{}}"></span>.
    </li>
    <li>
      Ask a question in the <a href="irc://irc.freenode.net/">#django IRC
      channel</a>, or search the <a href="http://django-irc-logs.com/" wrc_done="true">IRC
      logs</a>&nbsp;<span class="wrc_icon wrc0" rating="{&quot;icon&quot;:&quot;grey0-16.png&quot;,&quot;rating&quot;:0,&quot;weight&quot;:0,&quot;flags&quot;:{&quot;shopping&quot;:null,&quot;social&quot;:null,&quot;news&quot;:null,&quot;it&quot;:null,&quot;corporate&quot;:null,&quot;pornography&quot;:null,&quot;violence&quot;:null,&quot;gambling&quot;:null,&quot;drugs&quot;:null,&quot;illegal&quot;:null}}"></span> to see if it has been asked before.
    </li>
    <li>
      If you notice errors with this documentation, please <a href="https://code.djangoproject.com/newticket?component=Documentation" wrc_done="true">
      open a ticket</a>&nbsp;<span class="wrc_icon wrc11" rating="{&quot;icon&quot;:&quot;green1-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:1,&quot;flags&quot;:{}}"></span> and let us know! Please only use the ticket tracker for
      criticisms and improvements on the docs. For tech support, use the
      resources above.
    </li>
  </ul>
</div>

		</div>
		<!-- END #content-main -->
		<div id="content-related" class="sidebar">
		
  
    <h2>Search</h2>
    
    <form action="https://docs.djangoproject.com/search/" id="sidebar_search" class="search">
  <div>
    <p>
      <input type="search" name="q" id="id_sidebar_search_q">
    </p>
    <p>
      <label for="id_sidebar_search_release">Version:</label>
      <select name="release" id="id_sidebar_search_release">
<option value="2">Django 1.0</option>
<option value="3">Django 1.1</option>
<option value="4">Django 1.2</option>
<option value="5">Django 1.3</option>
<option value="6" selected="selected">Django 1.4</option>
<option value="1">Development trunk</option>
</select>
    </p>
    <p>
      <input type="submit" class="submit" value="Search">
    </p>
  </div>
</form>
  

  
    <h2>Contents</h2>
    
      <ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#">Models</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#quick-example">Quick example</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#using-models">Using models</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#fields">Fields</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#field-types">Field types</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#field-options">Field options</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#automatic-primary-key-fields">Automatic primary key fields</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#verbose-field-names">Verbose field names</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#relationships">Relationships</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#many-to-one-relationships">Many-to-one relationships</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#many-to-many-relationships">Many-to-many relationships</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#extra-fields-on-many-to-many-relationships">Extra fields on many-to-many relationships</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#one-to-one-relationships">One-to-one relationships</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#models-across-files">Models across files</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#field-name-restrictions">Field name restrictions</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#custom-field-types">Custom field types</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#meta-options">Meta options</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#model-methods">Model methods</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#overriding-predefined-model-methods">Overriding predefined model methods</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#executing-custom-sql">Executing custom SQL</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#model-inheritance">Model inheritance</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#abstract-base-classes">Abstract base classes</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#meta-inheritance"><tt class="docutils literal"><span class="pre">Meta</span></tt> inheritance</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#be-careful-with-related-name">Be careful with <tt class="docutils literal"><span class="pre">related_name</span></tt></a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#multi-table-inheritance">Multi-table inheritance</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#meta-and-multi-table-inheritance"><tt class="docutils literal"><span class="pre">Meta</span></tt> and multi-table inheritance</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#inheritance-and-reverse-relations">Inheritance and reverse relations</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#specifying-the-parent-link-field">Specifying the parent link field</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#proxy-models">Proxy models</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#querysets-still-return-the-model-that-was-requested">QuerySets still return the model that was requested</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#base-class-restrictions">Base class restrictions</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#proxy-model-managers">Proxy model managers</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#differences-between-proxy-inheritance-and-unmanaged-models">Differences between proxy inheritance and  unmanaged models</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#multiple-inheritance">Multiple inheritance</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#field-name-hiding-is-not-permitted">Field name “hiding” is not permitted</a></li>
</ul>
</li>
</ul>
</li>
</ul>

    
  
  
    <h2>Browse</h2>
    <ul>
      
        
          <li>Prev: <a href="https://docs.djangoproject.com/en/dev/topics/db/">Models and databases</a></li>
        
        
          <li>Next: <a href="https://docs.djangoproject.com/en/dev/topics/db/queries/">Making queries</a></li>
        
        <li><a href="https://docs.djangoproject.com/en/dev/contents/">Table of contents</a></li>
        
          <li><a href="https://docs.djangoproject.com/en/dev/genindex/">General Index</a></li>
        
          <li><a href="https://docs.djangoproject.com/en/dev/py-modindex/">Python Module Index</a></li>
        
      
    </ul>
  

  
    <h2>You are here:</h2>
    <ul>
      
        <li>
          <a href="https://docs.djangoproject.com/en/dev/">Django dev documentation</a>
          
            <ul><li><a href="https://docs.djangoproject.com/en/dev/topics/">Using Django</a>
          
            <ul><li><a href="https://docs.djangoproject.com/en/dev/topics/db/">Models and databases</a>
          
          <ul><li>Models</li></ul>
          </li></ul></li></ul>
        </li>
      
    </ul>

    
      <h2>Download:</h2>
      <p>
      
        Offline (development version):
        <a href="https://www.djangoproject.com/m/docs/django-docs-dev-en.zip" wrc_done="true">HTML</a>&nbsp;<span class="wrc_icon wrc11" rating="{&quot;icon&quot;:&quot;green1-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:1,&quot;flags&quot;:{}}"></span> |
        <a href="http://media.readthedocs.org/pdf/django/latest/django.pdf" wrc_done="true">PDF</a>&nbsp;<span class="wrc_icon wrc0" rating="{&quot;icon&quot;:&quot;grey0-16.png&quot;,&quot;rating&quot;:0,&quot;weight&quot;:0,&quot;flags&quot;:{&quot;shopping&quot;:null,&quot;social&quot;:null,&quot;news&quot;:null,&quot;it&quot;:null,&quot;corporate&quot;:null,&quot;pornography&quot;:null,&quot;violence&quot;:null,&quot;gambling&quot;:null,&quot;drugs&quot;:null,&quot;illegal&quot;:null}}"></span> |
        <a href="http://media.readthedocs.org/epub/django/latest/django.epub" wrc_done="true">ePub</a>&nbsp;<span class="wrc_icon wrc0" rating="{&quot;icon&quot;:&quot;grey0-16.png&quot;,&quot;rating&quot;:0,&quot;weight&quot;:0,&quot;flags&quot;:{&quot;shopping&quot;:null,&quot;social&quot;:null,&quot;news&quot;:null,&quot;it&quot;:null,&quot;corporate&quot;:null,&quot;pornography&quot;:null,&quot;violence&quot;:null,&quot;gambling&quot;:null,&quot;drugs&quot;:null,&quot;illegal&quot;:null}}"></span>
      
      <br>
      <span class="quiet">Provided by <a href="http://readthedocs.org/" wrc_done="true">Read the Docs</a>&nbsp;<span class="wrc_icon wrc0" rating="{&quot;icon&quot;:&quot;grey0-16.png&quot;,&quot;rating&quot;:0,&quot;weight&quot;:0,&quot;flags&quot;:{&quot;shopping&quot;:null,&quot;social&quot;:null,&quot;news&quot;:null,&quot;it&quot;:null,&quot;corporate&quot;:null,&quot;pornography&quot;:null,&quot;violence&quot;:null,&quot;gambling&quot;:null,&quot;drugs&quot;:null,&quot;illegal&quot;:null}}"></span>.
      </span></p>
    
  

		</div>
		<!-- END #content-related -->

    </div>
    <!-- END #content -->
    <div id="footer">
      <p>© 2005-2012 <a href="https://www.djangoproject.com/foundation/" wrc_done="true">Django Software Foundation</a>&nbsp;<span class="wrc_icon wrc11" rating="{&quot;icon&quot;:&quot;green1-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:1,&quot;flags&quot;:{}}"></span> unless otherwise noted. Django is a registered trademark of the Django Software Foundation.
      <a href="http://mediatemple.net/" wrc_done="true">Linux Web hosting</a>&nbsp;<span class="wrc_icon wrc11" rating="{&quot;icon&quot;:&quot;green1-16.png&quot;,&quot;rating&quot;:1,&quot;weight&quot;:1,&quot;flags&quot;:{}}"></span> graciously provided by Media Temple.
      </p>
    </div>
    <!-- END #footer -->
  </div>
  <!-- END #container -->
  


<div id="mixpanel" style="visibility: hidden; "></div><div id="wrchoverdiv"><div id="wrccontainer"><div id="wrcheader"><div id="wrctitle"> WebRep</div></div><div class="wrchorizontal"></div><div id="wrccurrentvote">Évaluation globale</div><div class="wrchorizontal"></div><div id="wrcrating"></div><div id="wrcratingtext">Ce site n'a pas été évalué</div><div id="wrcweighttext">(pas assez de votes)</div><div id="wrcflags"><div id="wrcicon_shopping" class="wrcicon"></div><div id="wrcicon_social" class="wrcicon"></div><div id="wrcicon_news" class="wrcicon"></div><div id="wrcicon_it" class="wrcicon"></div><div id="wrcicon_corporate" class="wrcicon"></div><div id="wrcicon_pornography" class="wrcicon"></div><div id="wrcicon_violence" class="wrcicon"></div><div id="wrcicon_gambling" class="wrcicon"></div><div id="wrcicon_drugs" class="wrcicon"></div><div id="wrcicon_illegal" class="wrcicon"></div></div><div class="wrchorizontal"></div></div></div></body><link rel="stylesheet" type="text/css" href="data:text/css,"></html>