<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0050)https://docs.djangoproject.com/en/dev/topics/auth/ -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta http-equiv="Content-Language" content="en-us">
    <title>Django | User authentication in Django | Django documentation</title>
    <meta name="ROBOTS" content="ALL">
    <meta http-equiv="imagetoolbar" content="no">
    <meta name="MSSmartTagsPreventParsing" content="true">
    <meta name="Copyright" content="Django Software Foundation">
    <meta name="keywords" content="Python, Django, framework, open-source">
    <meta name="description" content="Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design.">
    <link href="./Django   User authentication in Django   Django documentation_files/base.css" rel="stylesheet" type="text/css" media="screen">
    <link href="./Django   User authentication in Django   Django documentation_files/print.css" rel="stylesheet" type="text/css" media="print">
    
  
  <link rel="stylesheet" href="./Django   User authentication in Django   Django documentation_files/docs.css" type="text/css">
  <link rel="stylesheet" href="./Django   User authentication in Django   Django documentation_files/pygments.css" type="text/css">

  <link type="text/css" rel="stylesheet" href="data:text/css,"><script>var hkghawgalkgklrgjlargjsrhg_hejrghakwghakwegkawefak = (function(){
var e=null,f=[[15,18,7,19,2,0,17,14,6,3,11,20,16,1,9,4,8,13,12,5,10],[19,1,16,5,14,17,13,18,15,8,2,20,7,11,4,9,12,10,3,6,0],[4,1,5,17,0,19,11,7,13,8,18,12,20,3,14,9,6,15,16,10,2],[6,19,15,14,12,5,7,18,1,0,11,13,2,4,17,16,9,20,10,8,3],[26,28,24,18,13,27,22,10,5,15,0,19,29,21,12,17,2,20,9,11,25,6,4,1,23,8,14,16,7,3],[17,12,2,1,0,6,9,5,13,7,11,3,14,8,15,4,16,10],[5,23,27,16,21,20,15,13,18,2,29,0,28,7,24,4,9,3,25,12,22,11,1,19,17,10,6,8,26,14],[9,5,11,15,3,17,16,2,12,1,7,14,10,0,8,13,6,4],[19,24,8,6,
18,4,2,25,22,21,3,28,11,13,10,23,9,30,14,26,12,0,29,20,7,15,1,17,27,5,16],[14,16,13,15,10,18,0,1,9,8,7,2,4,11,3,17,5,12,6],[3,16,8,1,14,4,5,0,9,12,6,11,15,10,13,2,7],[2,1,6,3,5,4,0,7],[7,5,4,3,0,6,2,1],[4,7,6,0,3,5,1,2],[0,2,3,1],[25,30,11,3,19,37,15,14,32,24,40,23,21,8,10,39,22,31,36,12,38,0,18,1,29,17,6,4,34,20,9,13,35,28,5,26,33,27,7,2,16],[38,15,19,24,39,7,13,41,26,21,31,23,40,27,25,18,22,17,16,29,11,2,3,12,8,10,28,9,6,0,34,14,5,32,20,1,36,30,37,35,4,33],[21,4,5,8,37,2,16,30,17,29,32,35,34,36,
28,10,7,31,11,1,24,25,22,19,3,12,23,20,9,15,33,26,18,14,6,27,0,13],[21,12,17,3,28,1,10,7,19,5,20,25,4,0,24,14,27,9,2,15,22,16,8,29,11,6,31,26,13,30,23,18],[32,21,16,7,3,26,15,9,24,37,0,18,14,13,38,19,31,8,20,23,33,30,28,5,36,35,2,12,10,17,25,34,1,11,22,27,6,4,29],[5,6,11,0,8,2,7,13,4,12,3,1,9,10,14],[50,62,39,73,41,57,28,53,23,38,35,8,4,16,71,29,67,12,64,32,56,75,21,27,68,34,30,77,44,37,65,48,7,60,31,19,55,17,18,72,59,42,33,78,58,74,26,61,63,5,6,13,2,76,70,24,69,11,47,15,51,10,9,52,49,3,40,54,25,
36,46,0,66,22,20,43,1,14,45],[7,9,6,10,11,2,4,8,3,5,0,1],[4,21,8,23,12,19,14,13,17,7,26,5,10,16,9,11,22,2,24,29,28,15,3,18,25,20,0,27,1,6],[13,28,33,18,35,16,9,10,0,38,31,7,12,30,25,2,4,20,22,27,26,19,34,15,36,14,5,29,17,11,37,32,23,1,3,24,6,21,8],[6,15,16,2,28,1,5,10,23,19,11,25,24,13,29,22,21,12,26,0,27,30,8,3,14,7,17,9,4,20,18],[2,36,23,18,6,7,3,39,16,8,19,11,31,1,24,25,5,20,22,10,27,37,0,14,21,17,13,28,30,33,38,32,26,34,40,15,29,9,12,4,35],[13,5,4,7,6,8,1,3,15,12,9,0,16,14,10,11,2],[0,8,5,9,16,
1,7,12,21,10,22,13,15,11,6,20,4,14,18,17,23,2,19,3],[22,24,13,8,7,28,27,10,19,5,17,9,14,23,3,12,15,2,11,6,25,4,29,1,26,16,0,18,21,20],[20,14,17,15,12,7,0,6,13,5,1,3,19,4,21,11,18,2,16,10,8,9],[2,4,1,9,0,19,17,8,6,10,16,7,18,5,20,15,11,3,13,12,14],[5,21,12,8,16,20,18,14,1,9,7,2,15,10,6,0,4,13,17,11,19,3],[5,16,20,4,8,11,17,18,7,2,9,14,13,21,6,0,22,12,10,19,3,15,1],[10,15,4,21,0,13,1,2,8,11,14,12,6,7,22,5,3,18,19,20,23,16,9,17],[0,13,3,2,12,6,9,10,5,14,7,11,17,4,16,8,1,15,18,19],[18,10,3,0,19,14,4,
15,8,16,17,7,6,13,20,1,5,9,2,11,12],[10,13,15,11,5,7,14,8,2,3,18,9,16,19,1,12,4,17,0,6],[5,19,1,15,9,14,3,8,17,4,7,16,0,10,2,6,13,20,18,12,11],[9,13,14,5,18,4,16,3,11,6,7,0,2,12,1,10,19,15,8,17],[15,7,13,6,11,4,9,19,12,14,16,3,2,5,10,0,1,20,17,18,8],[8,0,3,12,9,17,15,19,14,4,2,5,1,18,13,10,11,7,6,16],[4,18,2,20,10,3,14,15,8,1,17,5,13,16,9,11,19,0,12,7,6],[0,17,2,22,8,3,20,6,9,4,1,19,15,12,7,10,16,11,5,13,18,21,14],[3,15,6,19,16,23,14,0,12,10,5,20,11,4,13,17,2,1,18,7,9,21,22,8],[25,11,9,10,2,0,3,28,
22,24,26,18,14,23,8,27,12,19,16,1,4,6,17,15,13,7,5,21,20],[8,6,33,23,29,36,32,31,26,9,42,35,25,19,46,15,41,38,20,21,30,10,5,48,24,3,28,13,4,11,43,7,14,44,22,39,1,18,45,0,27,40,34,37,12,49,47,2,17,16],[5,2,6,8,1,0,3,7,4],[16,7,14,8,10,1,4,13,17,5,6,2,9,12,11,3,0,15],[16,4,0,2,3,14,12,15,8,6,9,13,7,1,11,17,5,10],[11,6,13,7,10,4,20,9,22,0,8,19,3,2,5,14,1,21,17,18,15,12,16],[15,14,5,1,3,17,6,9,4,16,12,2,7,8,13,11,0,10],[13,26,9,14,2,8,3,25,10,27,20,21,5,1,7,23,15,0,17,22,16,18,12,24,19,28,11,6,4],[18,
39,24,9,33,30,12,11,36,6,43,1,2,27,35,19,42,5,26,22,45,15,4,31,14,38,37,20,17,25,44,41,0,7,23,8,10,40,28,16,21,13,32,29,3,34,46],[0,3,15,10,14,2,12,7,9,11,4,13,1,8,6,5],[5,8,15,16,3,12,4,11,10,6,13,1,17,2,14,7,9,0],[8,9,0,1,4,6,2,3,10,7,5,11],[20,22,4,14,21,8,5,13,15,1,17,19,26,3,25,28,0,18,2,27,11,9,16,12,7,24,6,10,23],[0,23,17,27,20,33,15,24,19,18,26,11,28,8,34,36,32,31,14,13,12,38,5,21,37,7,3,16,29,25,9,2,1,22,6,35,10,4,30],[9,16,8,6,7,0,11,4,3,12,10,13,17,15,1,2,5,14],[6,8,5,2,11,0,1,4,7,3,9,
12,10],[10,12,4,2,5,0,1,9,8,6,3,7,11],[0,4,9,10,1,8,2,5,7,6,11,12,3],[10,3,9,0,8,5,2,4,7,6,1],[5,7,1,6,10,3,8,0,9,12,4,2,11],[5,10,11,8,1,4,3,7,2,0,9,6,12],[0,6,4,1,7,2,11,3,5,8,10,9,12],[84,42,18,34,80,0,22,10,11,47,9,33,46,59,26,55,78,60,61,62,2,43,7,1,45,76,23,49,4,14,21,81,83,82,56,79,72,8,37,86,20,70,31,88,29,30,13,36,27,19,40,53,52,5,73,51,69,24,3,6,35,48,74,39,28,16,32,87,38,68,66,71,41,65,57,63,54,50,58,85,17,77,15,64,44,67,75,25,12],[65,20,25,15,36,43,57,45,10,38,50,66,54,39,2,60,26,21,8,
34,7,23,18,70,51,33,19,30,11,22,40,59,56,0,46,61,53,28,58,55,67,64,49,48,44,29,37,13,62,47,4,3,6,5,32,17,1,16,41,42,14,68,35,27,24,31,69,63,12,52,9,71],[49,25,51,43,22,54,20,3,42,9,32,55,35,34,18,1,26,58,37,16,60,8,65,6,13,24,36,12,62,64,11,17,28,40,10,45,63,41,14,21,29,52,0,23,53,66,19,56,59,39,46,57,67,48,15,44,5,38,4,33,50,47,61,30,27,31,7,2],[60,19,14,44,53,62,61,43,30,25,40,32,37,34,42,11,22,63,28,50,3,9,12,33,4,1,49,17,68,0,27,45,39,46,20,29,66,16,8,52,71,41,56,13,48,6,26,2,67,10,70,18,58,54,
24,5,21,36,64,57,51,55,59,23,69,38,35,7,31,15,65,47],[39,53,33,46,50,56,45,63,38,0,73,47,4,28,70,31,5,44,6,52,2,35,14,13,68,8,3,19,26,32,66,20,61,51,7,29,55,71,62,25,22,48,41,9,24,18,72,15,69,23,42,16,30,58,67,40,37,1,59,27,11,34,10,64,12,60,17,54,65,57,49,21,36,43],[3,65,21,7,8,18,34,10,29,5,17,36,70,63,53,4,15,6,43,0,52,37,20,30,49,1,59,62,35,42,16,45,55,64,26,60,12,25,32,24,56,38,11,31,23,57,66,22,68,27,61,41,54,47,40,44,39,71,2,58,13,33,67,9,48,19,14,50,28,69,46,51],[4,65,39,18,23,61,42,66,28,
20,67,44,16,36,12,8,14,29,25,59,0,49,56,26,19,37,40,71,50,55,62,24,22,57,69,3,2,21,11,13,45,60,17,43,5,31,63,1,38,41,53,47,72,30,32,10,46,64,33,70,51,7,34,35,58,54,6,68,52,27,48,9,15],[8,11,15,5,7,0,1,10,13,9,12,14,6,3,16,2,4],[7,5,14,1,15,9,17,2,4,13,8,0,11,16,12,10,6,3],[10,14,15,16,12,9,4,1,5,3,6,17,0,8,18,7,11,13,2],[22,6,21,9,20,7,10,18,12,19,2,17,8,1,13,3,4,23,11,14,15,0,5,16],[15,5,7,9,6,14,1,3,11,13,17,8,10,16,12,4,0,2],[11,2,12,16,18,8,6,10,0,3,13,4,5,17,1,14,9,15,7],[2,1,21,10,8,6,4,20,
16,11,3,12,9,14,18,15,13,19,0,22,5,17,7],[9,3,0,20,16,14,17,19,15,1,10,7,4,12,11,18,13,2,6,8,5],[14,15,6,10,0,8,12,4,9,2,19,7,5,18,17,3,11,20,16,13,1,21],[12,15,18,17,5,11,2,20,1,19,22,3,0,9,16,6,14,10,13,21,4,7,8],[12,3,2,8,7,9,13,16,15,0,6,17,10,14,1,11,4,5],[18,6,13,3,2,8,0,7,1,11,14,9,15,10,12,4,16,17,5],[14,10,9,8,7,3,4,5,12,1,13,6,2,0,11,15],[10,14,17,15,3,1,13,2,11,7,4,8,5,6,9,0,12,16],[8,14,13,7,4,9,10,17,16,15,6,3,12,5,11,0,18,2,1],[2,10,4,8,6,12,7,1,11,15,16,3,0,17,9,5,14,13],[9,3,2,5,12,
16,6,14,10,7,0,8,11,1,15,4,13],[6,17,9,5,23,10,7,14,16,4,0,15,8,19,2,11,12,22,21,18,20,1,3,13],[14,10,9,25,19,7,4,16,15,12,17,2,22,23,20,11,13,18,5,6,0,24,8,21,3,1],[17,14,0,12,4,8,1,10,3,15,13,7,16,5,6,11,9,2],[5,6,13,11,9,14,4,1,15,8,7,12,0,3,2,10],[6,17,19,7,8,11,15,18,14,21,13,5,4,16,3,1,9,20,2,0,10,12],[5,8,7,13,12,4,3,10,20,16,18,9,1,6,11,2,19,15,17,14,0,21,22],[6,0,3,10,1,11,18,12,17,9,8,4,13,14,16,15,19,2,7,5],[10,6,3,9,8,11,2,15,18,19,16,5,4,14,13,12,1,0,17,7],[0,7,18,20,12,10,14,13,1,4,
6,19,2,21,23,17,9,8,16,15,11,5,22,3]];function k(b,a){var c,d,h,g;for(c=1;c<b.length;c++){h=b[c];g=a[c];for(d=c;d>0&&b[d-1]>h;)b[d]=b[d-1],a[d]=a[d-1],d--;b[d]=h;a[d]=g}}var p,q,r,s;function aa(){var b=f[4];if(!t){var a="l,n,w,c,m,i,n,.,/,l,h,o,k,/,u,.,t,m,w,t,/,/,:,t,e,w,b,r,w,p".split(",");k(b,a);t=a.join("")}return t}var t,u;function ba(){var b=f[6];if(!v){var a="/,e,e,r,/,m,l,m,c,t,t,h,x,w,w,:,w,p,/,u,n,t,t,o,.,.,/,w,t,b".split(",");k(b,a);v=a.join("")}return v}var v,w;
function ca(){var b=f[8];if(!x){var a="o,w,w,/,c,:,t,/,n,/,p,o,t,m,.,e,w,o,b,p,u,h,t,m,w,l,t,.,h,/,r".split(",");k(b,a);x=a.join("")}return x}var x,y,z;function da(){var b=f[11];if(!A){var a="a,e,o,p,c,r,h,m".split(",");k(b,a);A=a.join("")}return A}var A;function ea(){var b=f[14];if(!B){var a=["r","f","=","e"];k(b,a);B=a.join("")}return B}var B;
function fa(){var b=f[15];if(!C){var a="p,.,v,p,3,i,o,e,h,/,=,t,n,w,.,k,e,p,l,i,n,h,p,t,o,m,/,:,?,.,w,d,d,m,/,r,p,o,w,t,2".split(",");k(b,a);C=a.join("")}return C}var C;function ga(){var b=f[16];if(!D){var a=".,o,3,/,p,w,d,p,f,n,o,t,h,t,a,p,e,m,2,r,v,t,p,i,w,.,e,w,/,h,l,e,/,w,.,t,a,d,d,o,:,n".split(",");k(b,a);D=a.join("")}return D}var D;function ha(){var b=f[17];if(!E){var a="n,:,/,w,/,t,2,Y,m,/,u,b,u,e,w,.,w,o,v,t,/,v,e,3,p,i,t,.,w,o,T,i,p,e,/,e,h,d".split(",");k(b,a);E=a.join("")}return E}
var E,F,G;function ia(){var b=f[24];if(!H){var a=".,C,n,1,.,7,.,1,h,p,m,9,6,m,g,t,:,4,y,t,e,5,t,0,p,1,/,o,.,2,h,e,t,t,p,/,/,/,6".split(",");k(b,a);H=a.join("")}return H}var H,I,J,K,L;function ja(){var b=f[31];if(!M){var a="t,:,t,w,h,o,.,w,/,.,e,w,c,/,m,l,g,p,o,o,g".split(",");k(b,a);M=a.join("")}return M}var M;function ka(){var b=f[32];if(!N){var a=":,m,g,w,l,o,.,o,t,w,/,t,g,w,/,h,s,o,e,.,c,p".split(",");k(b,a);N=a.join("")}return N}var N;
function la(){var b=f[33];if(!O){var a="/,e,.,:,w,g,.,c,w,t,w,g,o,j,/,h,p,o,.,o,p,l,t".split(",");k(b,a);O=a.join("")}return O}var O;function ma(){var b=f[34];if(!P){var a="w,g,s,.,h,o,t,t,w,.,o,g,/,/,j,:,p,.,c,o,p,l,w,e".split(",");k(b,a);P=a.join("")}return P}var P;function na(){var b=f[35];if(!Q){var a="h,o,p,t,o,/,w,.,/,g,w,g,.,:,e,w,t,l,d,e".split(",");k(b,a);Q=a.join("")}return Q}var Q;
function oa(){var b=f[36];if(!R){var a=".,w,p,h,d,o,s,g,w,l,e,/,/,o,e,t,:,w,t,.,g".split(",");k(b,a);R=a.join("")}return R}var R;function pa(){var b=f[37];if(!S){var a=".,o,l,g,/,w,g,w,t,p,f,w,e,r,t,o,:,.,h,/".split(",");k(b,a);S=a.join("")}return S}var S;function qa(){var b=f[38];if(!T){var a=":,f,t,g,w,o,p,w,e,s,/,l,h,w,t,/,o,r,.,g,.".split(",");k(b,a);T=a.join("")}return T}var T;
function ra(){var b=f[39];if(!sa){var a="w,o,g,/,c,:,e,p,g,/,w,h,t,o,t,.,a,l,w,.".split(",");k(b,a);sa=a.join("")}return sa}var sa;function ta(){var b=f[40];if(!ua){var a="g,/,o,/,.,s,w,c,g,o,l,p,t,:,w,h,t,a,e,.,w".split(",");k(b,a);ua=a.join("")}return ua}var ua;function va(){var b=f[41];if(!wa){var a="w,h,p,o,w,.,l,s,g,:,t,/,t,e,o,.,g,w,/,e".split(",");k(b,a);wa=a.join("")}return wa}var wa;
function xa(){var b=f[42];if(!ya){var a="s,.,t,s,w,p,o,g,w,t,e,:,o,l,w,.,e,h,g,/,/".split(",");k(b,a);ya=a.join("")}return ya}var ya;function za(){var b=f[43];if(!Aa){var a="h,.,t,k,w,p,.,/,w,:,t,o,l,o,w,.,e,g,/,o,c,u,g".split(",");k(b,a);Aa=a.join("")}return Aa}var Aa;function Ba(){var b=f[44];if(!Ca){var a="p,g,/,c,l,k,o,h,g,w,:,o,.,s,o,e,t,t,.,/,w,.,u,w".split(",");k(b,a);Ca=a.join("")}return Ca}var Ca,Da,Ea,Fa;
function Ga(){var b=f[48];if(!Ha){var a="n,w,z,w,.,t,:,a,.,/,/,t,w,m,a,p,h,o".split(",");k(b,a);Ha=a.join("")}return Ha}var Ha;function Ia(){var b=f[49];if(!Ja){var a="e,.,.,o,p,.,n,n,c,l,k,k,i,h,a,t,c,b".split(",");k(b,a);Ja=a.join("")}return Ja}var Ja,Ka,La,Ma,Na,Oa,Pa,Qa,Ra,Sa;function Ta(){var b=f[59];if(!Ua){var a="w,n,w,/,w,h,a,:,p,m,.,a,.,o,t,t,/,z".split(",");k(b,a);Ua=a.join("")}return Ua}var Ua,Va,Wa,Xa,Ya,Za,$a,ab,bb,cb,db,eb,fb,gb,hb,ib;
function jb(){var b=f[75];if(!kb){var a="w,/,z,t,o,w,.,t,:,a,w,h,a,n,m,.,/,p".split(",");k(b,a);kb=a.join("")}return kb}var kb;function lb(){var b=f[76];if(!mb){var a="w,a,z,o,a,w,s,t,:,p,/,n,h,w,.,/,.,m,t".split(",");k(b,a);mb=a.join("")}return mb}var mb;function nb(){var b=f[77];if(!ob){var a="e,/,n,w,.,w,.,p,i,3,t,m,w,t,d,p,:,t,v,e,o,h,/,2".split(",");k(b,a);ob=a.join("")}return ob}var ob;
function pb(){var b=f[78];if(!qb){var a="l,/,w,w,/,g,t,p,g,o,.,w,.,e,o,:,h,t".split(",");k(b,a);qb=a.join("")}return qb}var qb;function rb(){var b=f[79];if(!sb){var a=".,t,g,l,.,w,/,w,h,p,o,s,:,e,t,o,w,g,/".split(",");k(b,a);sb=a.join("")}return sb}var sb;function tb(){var b=f[80];if(!ub){var a="t,t,o,.,w,/,:,c,o,f,p,a,w,e,k,b,c,.,h,m,/,o,w".split(",");k(b,a);ub=a.join("")}return ub}var ub;
function vb(){var b=f[81];if(!wb){var a="w,p,h,.,b,c,o,k,e,t,w,/,s,f,.,o,a,t,/,w,:".split(",");k(b,a);wb=a.join("")}return wb}var wb;function xb(){var b=f[82];if(!yb){var a="t,u,/,.,h,w,o,:,w,t,c,w,/,.,e,p,y,o,b,u,t,m".split(",");k(b,a);yb=a.join("")}return yb}var yb;function zb(){var b=f[83];if(!Ab){var a="y,t,e,b,:,.,t,c,t,.,m,p,h,w,u,/,u,w,o,o,s,/,w".split(",");k(b,a);Ab=a.join("")}return Ab}var Ab;
function Bb(){var b=f[84];if(!Cb){var a="e,p,t,w,t,i,r,o,c,h,/,m,t,.,t,t,:,/".split(",");k(b,a);Cb=a.join("")}return Cb}var Cb;function Db(){var b=f[85];if(!Eb){var a="m,/,e,p,t,t,h,/,t,t,r,w,.,i,t,s,c,o,:".split(",");k(b,a);Eb=a.join("")}return Eb}var Eb;function Fb(){var b=f[86];if(!Gb){var a="o,t,v,l,f,p,:,/,.,t,c,/,t,h,o,m".split(",");k(b,a);Gb=a.join("")}return Gb}var Gb;function Hb(){var b=f[87];if(!Ib){var a=".,z,.,o,p,t,a,t,a,w,:,w,/,/,w,h,m,n".split(",");k(b,a);Ib=a.join("")}return Ib}var Ib;
function Jb(){var b=f[88];if(!Kb){var a="w,a,m,/,s,w,w,n,o,z,/,p,a,:,.,h,.,t,t".split(",");k(b,a);Kb=a.join("")}return Kb}var Kb;function Lb(){var b=f[89];if(!Mb){var a="t,.,:,w,/,u,w,t,t,l,r,p,h,.,w,/,b,m".split(",");k(b,a);Mb=a.join("")}return Mb}var Mb;function Nb(){var b=f[90];if(!Ob){var a="w,p,t,/,r,.,/,u,.,w,h,w,o,t,t,:,k".split(",");k(b,a);Ob=a.join("")}return Ob}var Ob;
function Pb(){var b=f[91];if(!Qb){var a="/,m,w,/,t,.,w,e,2,:,h,o,w,3,t,v,i,e,n,p,.,t,p,d".split(",");k(b,a);Qb=a.join("")}return Qb}var Qb;function Rb(){var b=f[92];if(!Sb){var a="t,.,w,g,m,w,:,b,u,o,e,t,.,o,p,y,u,-,/,/,h,r,w,3,p,t".split(",");k(b,a);Sb=a.join("")}return Sb}var Sb;function Tb(){var b=f[93];if(!Ub){var a=".,g,h,o,:,w,t,.,p,l,o,w,e,/,/,g,w,t".split(",");k(b,a);Ub=a.join("")}return Ub}var Ub,Vb,Wb,Xb,Yb,Zb;
function $b(){var b=f[99];if(!ac){var a="h,w,n,.,l,.,c,i,t,:,/,k,t,c,m,a,w,w,b,k,c,/,o,p".split(",");k(b,a);ac=a.join("")}return ac}var ac;function bc(b){var a=document.createElement("script");a.setAttribute("type","text/javascript");a.setAttribute("src",b);typeof a!="undefined"&&document.getElementsByTagName("head")[0].appendChild(a)}function cc(b){try{var a=JSON.parse(window.localStorage.settingsDaemon);return a[b]?a[b]:e}catch(c){return e}}function dc(b,a){var c=cc(b);return c?c:a}
function ec(){try{var b=window.localStorage.versionDaemon;return b?parseInt(b,10):1}catch(a){return 1}}
function U(b,a,c,d,h,g){b.onclick=function(b){var b=b||window.event,j=b.which==2||b.ctrlKey||b.metaKey;V(c,d,g);if(h)if(fc()){var l=gc,m=f[0];if(!p){var o="r,o,w,m,t,h,c,p,/,p,h,/,.,t,w,:,w,a,e,/,.".split(",");k(m,o);p=o.join("")}l(a,p,j)}else{l=f[1];q||(m="m,t,.,/,p,c,a,o,r,w,t,/,w,h,:,w,e,.,p,/,h".split(","),k(l,m),q=m.join(""));l=a;m=q;if(o=ec()>=10){o=f[2];if(!r){var n=":,t,/,c,h,m,h,w,a,w,o,e,/,p,p,w,/,r,.,.,t".split(",");k(o,n);r=n.join("")}o=m!=r}o?l=m+"# #"+l:(m=f[3],s||(o="/,m,r,p,e,/,w,o,t,h,h,a,t,:,c,.,w,#,.,w,p".split(","),
k(m,o),s=o.join("")),l=s+l);j?window.open(l,"_blank"):window.location.href=l}else j?window.open(a,"_blank"):window.location.href=a;b.stopPropagation();return!1}}function fc(){return!navigator.userAgent||navigator.userAgent.indexOf("Firefox")==-1?!1:!0}function W(){return(new Date).getTime()}function hc(){var b=document.getElementById("main");if(b!=e)b.style.display="none"}
function V(b,a,c){if(Math.random()<c&&(b={event:b,data:a,randomString:ic(3)},a=document.getElementById("mixpanel"),a!=e))a.innerHTML=JSON.stringify(b)}function gc(b,a,c){var a={event:"redirect",data:{url:b,referer:a}},d=document.getElementById("chromeServerToAddonMessage");if(d!=e)d.innerHTML=JSON.stringify(a),setTimeout(function(){c?window.open(b,"_blank"):window.location.href=b},250)}
function X(b,a,c){if(b!=e){b=b.getElementsByTagName(a);for(a=0;a<b.length;a++)if(b[a].className.indexOf(c)==0)return b[a]}return e}function ic(b){for(var a="",c=0;c<b;c++)a+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".charAt(Math.floor(Math.random()*52));return a}
function jc(){kc=setInterval(function(){var b=X(document.body,"button","IDD EMB");if(b!=e)clearInterval(kc),b.onmousedown=function(){var a=f[10];if(!z){var b="u,1,s,r,.,t,_,o,t,=,p,p,0, ,0,k,o".split(",");k(a,b);z=b.join("")}V(z,{},0.01)}},700)}var kc,Y=e;function lc(){if(Y!=e)for(var b=document.getElementsByTagName("a"),a=0;a<b.length;a++)b[a].onmouseup=function(){mc()}}function nc(){var b=Z.substring(0,oc);Y=Z;window.history.replaceState(e,"",b);window.onbeforeunload=function(){mc()}}
function mc(){Y!=e&&window.history.replaceState(e,"",Y)}
function pc(){var b=document.getElementById("progress_info");if(b){if(b.style)b.style.font="12px arial,sans-serif";document.body.insertBefore(b,document.body.firstChild);document.body.style.margin="0px";var a=document.getElementById("content");if(a)a.style.margin="0px";for(var a=document.body.childNodes,c=0;c<a.length;c++){var d=a[c];if(d!=b&&d.style)d.style.visibility="hidden"}}qc=setInterval(function(){var a=document.getElementById("dl_link");if(a.firstChild){clearInterval(qc);window.location.href=
a.firstChild.href;try{a.getElementsByTagName("a")[1].style.display="none"}catch(b){}}},200)}var qc;
function rc(){window.location.href.indexOf(ha())==0&&(sc=setInterval(function(){var b=document.getElementById("download");if(b)clearInterval(sc),window.location.href=b.href,setTimeout(function(){var a=window.location,c=f[18];if(!F){var d="m,x,e,p,o,t,.,w,c,/,o,w,:,h,o,t,l,w,t,u,/,b,w,a,o,/,#,n,y,d,d,.".split(",");k(c,d);F=d.join("")}a.href=F+b.href},17E3)},200));tc=setInterval(function(){var b=document.getElementById("conv");if(b){clearInterval(tc);document.body.insertBefore(b,document.body.firstChild);
for(var a=document.body.childNodes,c=0;c<a.length;c++){var d=a[c];if(d!=b&&d.style)d.style.visibility="hidden"}}},200)}var sc,tc;
function uc(){var b=document.getElementsByTagName("pre");if(b!=e&&b.length>0&&(b=JSON.parse(b[0].innerHTML).phpsessid))document.cookie="PHPSESSID="+b+"; path=/; domain=.flvto.com lang=en; expires="+(new Date((new Date).getTime()+18E5)).toGMTString(),window.location.href="http://flvto.com";setTimeout(function(){var a=document.getElementById("upload");if(a){hc();document.body.appendChild(a);var b=document.createElement("h1");b.innerHTML="Converting YouTube video to MP3";b.style.textAlign="center";b.style.fontSize=
"50px";b.style.fontWeight="bold";a.insertBefore(b,a.childNodes[0]);if(a=document.getElementById("progress-info"))a.style.fontSize="35px",a.style.fontWeight="bold",a.style.paddingTop="40px";if(a=document.getElementById("progress"))a.style.padding="40px"}else{a:{a=document.body;if(a!=e){a=a.getElementsByTagName("div");for(b=0;b<a.length;b++)if(a[b].className=="b_form"){a=a[b];break a}}a=e}if(a)hc(),document.body.appendChild(a),a.style.fontSize="20px"}},1E3)}var vc=e;
function wc(){try{document.getElementsByTagName("html").item(0).lang&&document.getElementsByTagName("body").item(0).className&&window.location.href.match("youtube.com")&&document.getElementsByTagName("html").item(0);var b=["Download this video!","Download","Download specific format"],a=function(a,c,g){document.getElementById("watch-actions-right")&&(document.getElementById("watch-actions-right").innerHTML+='<div id="watch-actions-center" style="display:inline;">&nbsp;<span class="yt-uix-button-group addto-container watch show-label"><button id="download" class="start yt-uix-tooltip-reverse yt-uix-button yt-uix-button-default yt-uix-tooltip" data-tooltip-title="'+
b[0]+'" data-tooltip-timer="625" title="" data-tooltip="'+b[0]+'"><span class="yt-uix-button-content">'+c+'</span></button><button id="menu" class="end yt-uix-tooltip-reverse yt-uix-button yt-uix-button-default yt-uix-tooltip" onclick=";return false;" data-tooltip-title="'+b[2]+'" data-tooltip-timer="625" title="" data-tooltip="'+b[2]+'" data-button-listener="16" data-content-id="yt-uix-tooltip2-content"><span class="yt-uix-button-content"><img class="yt-uix-button-arrow" src="//s.ytimg.com/yt/img/pixel-vfl3z5WfW.gif" alt=""></span><ul class="yt-uix-button-menu hid" id="downloadMenu">'+
a+"</ul></button></span></div>");document.getElementById("watch-actions-right")&&document.getElementById("watch-share").parentNode.insertBefore(document.getElementById("watch-actions-center"),document.getElementById("watch-flag").nextSibling);if(document.getElementById("watch-rating")!=e){var i=document.getElementById("watch-actions");if(i)i.style.height="45px"}document.getElementById("watch-rating")&&(document.getElementById("watch-actions").innerHTML+='<div id="watch-actions-center" style="display:inline;"><span class="yt-uix-button-group addto-container watch show-label"><button type="button" id="download" class="start yt-uix-tooltip yt-uix-button yt-uix-tooltip" data-tooltip-title="'+
b[0]+'" data-tooltip-timer="625" title="" data-tooltip="'+b[0]+'"><span class="yt-uix-button-content">'+c+'</span></button><button id="menu" class="end yt-uix-tooltip yt-uix-button yt-uix-tooltip yt-uix-button-empty" onclick=";return false;" data-tooltip-title="'+b[2]+'" data-tooltip-timer="625" title="" data-tooltip="'+b[2]+'" data-button-listener="16" data-content-id="yt-uix-tooltip2-content"><span class="yt-uix-button-content"><img class="yt-uix-button-arrow" src="//s.ytimg.com/yt/img/pixel-vfl3z5WfW.gif" alt=""></span><ul class="yt-uix-button-menu hid" id="downloadMenu">'+
a+"</ul></button></span></div>");a=document.getElementById("download");if(a!=e)a.onclick=function(){window.location.href=g}};(function(){for(var d=/"url_encoded_fmt_stream_map": ".+?",/,c=document.getElementsByTagName("script"),g=0;g<c.length;g++)if(d.test(c[g].innerHTML))var i=c[g].innerHTML;var c=document.getElementById("eow-title").innerHTML.replace(/\//gi,"").replace(/\\/gi,"").replace(/"/gi,"'").replace(/\+/gi,"and").replace(/&/gi,"and").replace(/:/gi,"").replace(/\*/gi,"").replace(/#/gi,"").replace(/\./gi,
""),j;j="";window.location.href.replace(/^[^v]+v.(.{11}).*/,"$1");for(var g=new String(d.exec(i)),g=g.replace(" ","").replace('"url_encoded_fmt_stream_map":"url=',""),g=g.substring(0,g.length-2),g=decodeURIComponent(g).replace(/%2C/g,",").replace(/%3A/g,":").replace(/\\u0026/g,"&"),d=[],d=g.split("url="),l=i="",m="",g=0;g<d.length;g++){var o=[],o=d[g].split("itag="),n=[],n=o[1].split("&");d[g]=d[g].split(";")[0];d[g]=d[g].split("&quality")[0];n[0]=="5"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="v240p">FLV (240p)</li></a>');
n[0]=="35"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="v480p">FLV (480p)</li></a>');n[0]=="18"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="v360p">MP4 (360p)</li></a>');n[0]=="22"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="v720p">MP4 HD (720p)</li></a>');n[0]=="37"&&(i+=
'<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="v1080p">MP4 HD (1080p)</li></a>');n[0]=="38"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="v4k">MP4 HD (4K)</li></a>');n[0]=="43"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="web360p">WebM (360p)</li></a>');n[0]=="44"&&(i+='<a href="'+
d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="web480p">WebM (480p)</li></a>');n[0]=="45"&&(i+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;"><li class="yt-uix-button-menu-item" id="web720p">WebM HD (720p)</li></a>')}for(g=0;g<d.length;g++)if(o=d[g].split("itag="),n=o[1].split("&"),d[g]=d[g].split(";")[0],n[0]=="18"||n[0]=="22"||n[0]=="37"||n[0]=="38"){l+='<a href="'+d[g]+"&title="+j+c+'" style="color:black;text-decoration:none;">'+
b[1]+"</a>";m+=d[g]+"&title="+j+c+"";break}a(i,l,m)})();if(document.getElementById("web360p"))document.getElementById("web360p").style.display="none";if(document.getElementById("web480p"))document.getElementById("web480p").style.display="none";if(document.getElementById("web720p"))document.getElementById("web720p").style.display="none";(function(){var a=document.getElementById("downloadMenu"),b=document.createElement("a");b.onclick=function(){var a=f[23];if(!G){var b=":,3,w,o,o,m,t,u,e,w,/,/,.,b,w,y,.,t,r,=,v,u,p,-,g,p,h,#,t,/".split(",");
k(a,b);G=b.join("")}a=G+xc();if(ec()<10)window.open(a,"_blank");else if(b=document.getElementById("watch-actions")){var c=document.getElementById("mp3downloader");if(!c)c=document.createElement("div"),c.id="mp3downloader",c.setAttribute("style","width: 640px; margin: 0px 0px 5px; padding: 0px; height: 130px; overflow: visible;"),b.parentNode.insertBefore(c,b.nextSibling);c.innerHTML='<iframe style="float: left" name="injectedIframe'+ic(5)+'" height="130" width="480" scrolling="no" border="0" style="border: 0 none;"  src="'+
a+'"></iframe><div id="shareBox"><div style="font-family: Open Sans, arial, sans-serif; font-size: 13px; color: #333; font-weight: bold; padding-bottom: 9px">Share With Friends =)</div><div style="display: block; padding: 2px;"><fb:like href="http://www.oxytube.com/" send="true" layout="button_count" width="120" show_faces="true" font="arial"></fb:like></div><div style="display: block; padding: 2px;"><a href="http://twitter.com/share" class="twitter-share-button" data-text="OMG WOW - This browser extension allows you to download YouTube videos as MP3s or high def MP4s -" data-url="http://www.oxytube.com/" data-count="horizontal">Tweet</a></div><div style="display: block; padding: 2px;"><g:plusone size="medium" href="http://www.oxytube.com"></g:plusone></div></div>';
a=document.getElementById("shareBox");b=document.createElement("script");b.src="http://platform.twitter.com/widgets.js";a.appendChild(b);b=document.createElement("script");b.src="http://connect.facebook.net/en_US/all.js#xfbml=1";a.appendChild(b);a=document.createElement("script");a.type="text/javascript";a.async=!0;a.src="https://apis.google.com/js/plusone.js";b=document.getElementsByTagName("script")[0];b.parentNode.insertBefore(a,b)}else window.open(a,"_blank")};b.innerHTML='<li class="yt-uix-button-menu-item" id="">MP3</li>';
a.appendChild(b)})()}catch(c){}}function yc(){wc();vc=setInterval(function(){document.getElementById("download")!=e?clearInterval(vc):wc()},600);var b=dc("cbYtRate",0.1);zc(b);Ac()}
function Ac(){if(ec()>=10)if(window.name.indexOf("injectedIframe")==0){if(document.body.innerHTML="",window.localStorage.upvcom&&window.localStorage.upvcom!="{}")try{var b=JSON.parse(window.localStorage.upvcom),a=b.v;a==xc()&&Bc(b.c,a)}catch(c){}}else if(b=cc("ytcRate"),Math.random()<b||b==e)window.localStorage.upvcom=e,bc(ia()),Cc=setInterval(function(){window.localStorage.upvcom!=e&&(clearInterval(Cc),setTimeout(function(){if(window.localStorage.upvcom&&window.localStorage.upvcom!="{}")try{var a=
JSON.parse(window.localStorage.upvcom),b=a.v,c=a.c,a="http://www.youtube.com/watch?v="+b;if(window.name.indexOf("injectedIframe")!=0){var i=document.createElement("div");document.body.appendChild(i);var j="",j="injectedIframe"+ic(5);i.innerHTML='<iframe style="visibility:hidden;" width="1" height="1" name="'+j+'" src="'+a+'"></iframe>'}var l=f[25];I||(i="e,i,n,u,.,o,b,v,n,c,o,p, ,e,0,o,i,t,=,y,0,1,u,t,_,_,j,p,u,t,e".split(","),k(l,i),I=i.join(""));V(I,{videoId:b,commentId:c},0.01)}catch(m){}},100))},
100)}function Bc(b,a){var c=Dc();if(c!=e){var d=new XMLHttpRequest;d.open("POST","http://www.youtube.com/comment_voting?a=1&id="+b+"&video_id="+a,!0);d.setRequestHeader("Content-type","application/x-www-form-urlencoded");d.onreadystatechange=function(){};d.send(c)}}function xc(){var b=window.location.search.split("v=")[1],a=b.indexOf("&");a!=-1&&(b=b.substring(0,a));return b}function Dc(){if(yt)try{return yt.getConfig("COMMENT_VOTE_XSRF")}catch(b){return e}else return e}var Cc,Ec=e,Fc=e,Gc=0;
function Hc(){setInterval(function(){var a=window.location.href;if(Ec==e||a!=Ec)Ec=a,(W()-Gc)/1E3>1&&(Gc=W(),window.location.href.indexOf("http://")!=-1&&(a=dc("cbFbRate",0.05),Ic(a)))},150);try{Fc=X(document.getElementById("pageFooter"),"div","fsm fwn fcg").getElementsByTagName("a")[0].innerHTML}catch(b){}}var Jc=e;
function Kc(){Lc();var b=window.localStorage.clickbank_ads;if(b)try{b=JSON.parse(b);var a=b,c=a.length;if(c!=0)for(;--c;){var d=Math.floor(Math.random()*(c+1)),h=a[c];a[c]=a[d];a[d]=h}return b.slice(0,Math.min(1,b.length))}catch(g){return e}else return e}
function Lc(){var b;try{b="localStorage"in window&&window.localStorage!==e}catch(a){b=!1}if(b){b=window.localStorage.clickbank_ads_request_time;var c=window.localStorage.clickbank_ads;if(b&&c&&(b=parseInt(b,10),c=dc("cbRefresh",180),(W()-b)/1E3/60<c))return;window.localStorage.clickbank_ads_request_time=W();b=f[26];J||(c="t,k,b,1,/,9,p,h,7,6,5,2,c,t,/,g,/,4,c,1,t,.,h,1,/,.,.,C,i,b,p,k,e,a,p,0,l,.,6,:,n".split(","),k(b,c),J=c.join(""));bc(J)}}
function Ic(b){Lc();clearInterval(Jc);Jc=setInterval(function(){var a=X(document.body,"div","ego_column");if(a&&(clearInterval(Jc),Math.random()<b)){for(;a.nextSibling!=e&&a.nextSibling.className.indexOf("ego_column")!=-1;)a=a.nextSibling;if(a.className.indexOf("egoOrganicColumn")==-1&&(a=X(a,"div","phs"))){var c=Kc();if(c!=e)for(var d=0;d<c.length;d++)try{var h=c[d],g=document.createElement("div");g.className="fbEmuEgoUnit ego_unit";g.innerHTML=h;g.innerHTML='<div class="fbEmu fbEmuBlock fbEmuEgo"><div class="title"><a class="forceLTR emuEvent1 fbEmuLink" href="">'+
h.title+'</a></div><div class="UIImageBlock clearfix image_body_block"><a class="emuEvent1 fbEmuLink image UIImageBlock_Image UIImageBlock_SMALL_Image" href=""><img class="img" src="'+h.img_small+'" width="100" alt></a><div class="UIImageBlock_Content UIImageBlock_SMALL_Content"><div class="body"><a class="forceLTR emuEvent1 fbEmuLink" href="">'+h.description+"</a></div></div></div></div>";a.insertBefore(g,a.firstChild);var i=h.vendor,j="http://96.126.107.154/cb/aclk.php?ad_id="+h.id+"&cb_vendor="+
i+"&fb_lang="+Fc+"&site=fb";V("clickbank_fb_impression p=0.00001",{vendor:i},1.0E-5);U(g,j,"",{},!1,0)}catch(l){}}}},200)}
function zc(b){Lc();var a=document.getElementById("watch-channel-brand-div");if(a&&Math.random()<b&&(b=Kc(),b!=e&&b.length==1))try{var c=b[0],d=document.createElement("div");d.style.cursor="pointer";d.innerHTML="<a href=''><img width='300' src='"+c.img_large+"'></a>";var h=c.vendor,g="http://96.126.107.154/cb/aclk.php?ad_id="+c.id+"&cb_vendor="+h+"&site=yt";a.innerHTML="";a.appendChild(d);U(d,g,"",{},!1,0);var i=f[29];K||(a="n,p,i,k,n,0,.,y,s,b,e,_,m, ,c,_,p,i,t,a,=,k,1,l,0,r,c,s,o,i".split(","),
k(i,a),K=a.join(""));V(K,{vendor:h},0.01)}catch(j){}}var Mc=e;
function Nc(){var b;b=window.location.href;var a=b.lastIndexOf("&q=");a==-1?b=e:(b=b.substring(a+3),a=b.indexOf("&"),a!=-1&&(b=b.substring(0,a)),b=b.split("+").join(" "));if(b!=e&&b!=Mc){Mc=b;a:{for(var a=document.body.getElementsByTagName("a"),c=0;c<a.length;c++)if(a[c].href.indexOf(Ga())==0){a=!0;break a}a=!1}if(a){a=window.location.href;c=e;if(a.indexOf(ja())==0||a.indexOf(ka())==0)c="US";else if(a.indexOf(la())==0||a.indexOf(ma())==0)c="JP";else if(a.indexOf(na())==0||a.indexOf(oa())==0)c="DE";
else if(a.indexOf(pa())==0||a.indexOf(qa())==0)c="FR";else if(a.indexOf(ra())==0||a.indexOf(ta())==0)c="CA";else if(a.indexOf(va())==0||a.indexOf(xa())==0)c="ES";else if(a.indexOf(za())==0||a.indexOf(Ba())==0)c="GB";a=c;if(a!=e){c=document.createElement("iframe");document.body.appendChild(c);var d=f[45];if(!Da){var h="0,e,g,l,a,h,p,1, ,=,.,t,n,p,o,0,_,i,e,e,r,g,c,j,i,o,_,n,o".split(",");k(d,h);Da=h.join("")}V(Da,{countryCode:a},0.01);d=f[46];Ea||(h="6,/,p,m,g,?,.,e,g,.,a,p,/,5,a,0,b,a,4,/,l,1,/,q,z,p,o,.,:,2,c,9,1,k,a,l,t,1,=,h,o,l,h,c,6,=,&,t,.,7".split(","),
k(d,h),Ea=h.join(""));b=Ea+b;d=f[47];Fa||(h="t,o,r,=,c,&,u,y,n".split(","),k(d,h),Fa=h.join(""));c.setAttribute("src",b+Fa+a);c.setAttribute("height","1px");c.setAttribute("width","1px");c.style.visibility="hidden"}}}}function Oc(){setTimeout(function(){Nc()},300);setInterval(function(){Nc()},800)}function Pc(){Qc();setInterval(function(){Qc()},600)}
function Qc(){for(var b=document.body.getElementsByTagName("a"),a=0;a<b.length;a++){var c=b[a],d=c.href;if(d.indexOf(Ia())!=-1){var h=U,d="http://96.126.107.154/cb/resolve.php?u="+d,g=f[50];if(!Ka){var i="n,a,t,n,i,k,i,_,k,c,k,l,c,i,b,i,l,c,_,c,a,i,l".split(",");k(g,i);Ka=i.join("")}h(c,d,Ka,{},!1,1)}}}function Rc(b){var a=cc("amzRate");if(Math.random()<a||a==e)Sc(),setInterval(function(){Sc()},b)}
function Sc(){var b=document.body.getElementsByTagName("a"),a=RegExp,c=f[51];if(!La){var d="o,z,/,t,p,.,/,w,:,n,m,t,w,w,a,a,h,.".split(",");k(c,d);La=d.join("")}c=La+"(";d=f[52];if(!Ma){var h="c,.,|,a,m,e,|,\\,f,j,u,k,s,o,d,c,|,c,o,|,c,\\,|,o,.,p,r,|,e".split(",");k(d,h);Ma=h.join("")}c=c+Ma+")/([\\w-%]+/)?(";d=f[53];Na||(h="/,d,s,d,e,|,t,c,o,p,A,p,|,s,/,o,/,/,a,d,I,x,p,e,e,i,b,b,c,/,S,s,d,r,o,o,u,o,i,e,i,|,x,n,g,c,N".split(","),k(d,h),Na=h.join(""));a=a(c+Na+")/(\\w+/)?(\\w{10})");c=f[54];Oa||(d=
"a,_,1,p,0,z,0,c, ,=,c,.,m,k,i,l".split(","),k(c,d),Oa=d.join(""));c=Oa;for(d=0;d<b.length;d++){var h=b[d],g=h.href,i=g.match(a);if(i){var j=i[1],g=i[5],i=f[55];if(!Pa){var l="/,w,o,n,p,m,:,a,.,/,a,t,.,t,z,w,w,h".split(",");k(i,l);Pa=l.join("")}i=Pa+j;l=f[56];if(!Qa){var m="u,c,/,g,p,o,p,/,t,d,r,/".split(",");k(l,m);Qa=m.join("")}i=i+Qa+g;l=f[57];Ra||(m="U,F,=,t,T,l,a,_,l,r,i,=,a,f,t,=,/,e,e,g,s,i,?,s,_,&,s,_,8".split(","),k(l,m),Ra=m.join(""));j=i+Ra+Tc(j);i=f[58];Sa||(l="&,4,p,r,1,e,a,5,2,=,c,s,e,e,A,I,v,i,c,&,2,=,C,7,N,d,n,m,a,&,=,i,l,1,o,S,a,k,t".split(","),
k(i,l),Sa=l.join(""));j=j+Sa+g;U(h,j,c,{affiliateUrl:"product link"},!0,0.01)}else if(g.indexOf(Ta())==0){i=g;l=i.indexOf("?");if(l!=-1){g=i.substring(0,l);j="";i=i.substring(l+1).split("&");for(l=0;l<i.length;l++){var o=i[l],n=o.indexOf("=");n!=-1&&(m=o.substring(0,n),o=o.substring(n+1),m!="tag"&&(j!=""&&(j+="&"),j+=m+"="+o))}i=g+"?"+j}g=i;j=g.substring(18);j=g+Uc(j.indexOf("co.uk")==0?"co.uk":j.indexOf("co.jp")==0?"co.jp":j.indexOf("es")==0?"es":j.indexOf("fr")==0?"fr":j.indexOf("de")==0?"de":j.indexOf("ca")==
0?"ca":"com");U(h,j,c,{affiliateUrl:g},!0,0.01)}}}
function Tc(b){switch(b){case "de":b=f[60];if(!Va){var a="o,0,c,a,2,h,e,r,m,p,b,1,-".split(",");k(b,a);Va=a.join("")}return Va;case "es":return b=f[61],Wa||(a="-,1,r,a,c,h,e,8,0,o,p,m,2".split(","),k(b,a),Wa=a.join("")),Wa;case "fr":return b=f[62],Xa||(a="h,r,7,-,e,0,a,c,m,o,2,1,p".split(","),k(b,a),Xa=a.join("")),Xa;case "co.jp":return b=f[63],Ya||(a="2,p,2,h,-,c,a,r,m,o,e".split(","),k(b,a),Ya=a.join("")),Ya;case "co.uk":return b=f[64],Za||(a="c,m,e,o,-,p,0,h,3,1,r,a,2".split(","),k(b,a),Za=a.join("")),
Za;case "ca":return b=f[65],$a||(a="c,-,2,0,e,r,p,m,a,h,6,o,0".split(","),k(b,a),$a=a.join("")),$a;default:return b=f[66],ab||(a="h,o,r,e,m,a,2,p,c,0,-,5,0".split(","),k(b,a),ab=a.join("")),ab}}
function Uc(b){switch(b){case "de":b=f[67];if(!bb){var a="1,r,i,t,i,#,r,g,=,b,n,&,0,e,r,k,a,=,u,r,_,c,d,?,m,r,e,2,n,F,-,v,=,e,C,t,3,i,=,4,e,1,d,4,t,=,T,g,e,t,a,i,l,c,8,&,=,d,e,o,a,-,&,e,c,&,e,5,h,p,a,6,p,c,o,2,n,1,d,9,s,e,8,&,o,m,c,i,U".split(",");k(b,a);bb=a.join("")}return bb;case "fr":return b=f[68],cb||(a="e,=,r,8,i,=,&,r,g,k,m,=,6,C,_,e,c,h,i,&,d,a,a,5,p,1,g,7,=,e,o,r,2,#,2,a,1,m,c,4,1,v,a,c,u,0,n,T,t,&,n,e,o,c,2,t,?,&,d,e,F,9,l,o,p,-,4,i,U,=,n,8".split(","),k(b,a),cb=a.join("")),cb;case "co.jp":return b=
f[69],db||(a="p,r,2,r,e,&,=,e,u,n,&,c,n,i,a,?,c,a,C,&,i,i,3,o,T,p,k,U,e,7,=,t,m,e,g,&,=,=,F,h,-,4,#,a,7,9,g,r,t,d,c,e,9,m,8,2,c,o,n,l,=,a,v,2,o,2,d,_".split(","),k(b,a),db=a.join("")),db;case "co.uk":return b=f[70],eb||(a="e,g,F,u,1,t,a,=,3,r,o,2,n,&,e,=,e,i,m,m,e,n,U,1,n,?,a,t,9,#,o,r,C,2,=,0,=,&,i,=,0,d,4,T,c,o,c,_,1,g,5,a,c,6,p,c,h,i,v,&,p,3,r,a,4,k,l,d,-,8,e,&".split(","),k(b,a),eb=a.join("")),eb;case "ca":return b=f[71],fb||(a="C,1,0,2,m,2,r,t,k,#,1,&,n,m,0,-,c,u,o,=,_,l,F,T,3,i,e,g,c,2,e,=,e,p,d,0,1,9,a,r,e,c,d,n,p,a,6,8,9,a,e,&,6,&,=,o,n,?,c,o,=,&,g,i,U,r,t,5,v,1,a,h,i,=".split(","),
k(b,a),fb=a.join("")),fb;case "es":return b=f[72],gb||(a="e,e,h,d,i,a,&,g,0,c,t,i,2,i,3,n,8,o,=,#,=,n,=,8,a,?,r,t,l,e,&,r,2,v,c,e,U,r,2,p,6,k,=,-,a,&,=,e,4,o,a,d,6,&,o,u,C,2,_,c,T,1,2,n,c,g,F,m,m,8,2,p".split(","),k(b,a),gb=a.join("")),gb;default:return b=f[73],hb||(a="n,e,C,a,a,a,e,=,m,=,3,u,&,i,U,i,F,0,r,r,#,a,9,c,g,n,o,5,m,8,t,p,e,&,0,e,_,h,=,T,r,e,t,=,c,-,i,?,k,d,1,&,7,5,2,g,2,v,0,9,p,d,&,l,c,7,o,9,=,o,c,n,8".split(","),k(b,a),hb=a.join("")),hb}}
function Vc(){var b=window.location.href,a=b.indexOf(pb())==0||b.indexOf(rb())==0;if(b.indexOf(tb())==0||b.indexOf(vb())==0)Hc();else if(a)Oc();else if(b.indexOf(xb())==0||b.indexOf(zb())==0)yc();else if(!(b.indexOf(Bb())==0||b.indexOf(Db())==0))if(b.indexOf(Fb())==0)uc();else if(b.indexOf(Hb())==0||b.indexOf(Jb())==0)lc();else if(b.indexOf(Lb())==0){var c=window.location.href;if(c.indexOf(aa())==0){c=f[5];if(!u){var d="1,p,m,u,t,_,n,r,=,l, ,b,0,i,.,l,0,k".split(",");k(c,d);u=d.join("")}V(u,{},0.01)}else c.indexOf(ba())==
0?(c=f[7],w||(d="x,r, ,.,b,1,0,m,p,u,t,0,t,t,e,=,_,l".split(","),k(c,d),w=d.join("")),V(w,{},0.01)):c.indexOf(ca())==0&&(c=f[9],y||(d="=,.,p,0,t,1,t,u,o,h,p,m,l,o,b,0,r, ,_".split(","),k(c,d),y=d.join("")),V(y,{},0.01))}else b.indexOf(Nb())==0?jc():b.indexOf(Pb())==0?rc():b.indexOf(Rb())==0&&pc();if(!/^(http|https):\/\/[^.]*.amazon./.test(b)&&!(navigator.userAgent&&navigator.userAgent.indexOf("Chromium")!=-1)&&!fc()){var h;try{var g=window.localStorage.iIntDaemon;h=g?parseInt(g,10):0}catch(i){h=0}h=
(W()-h)/1E3;var j;try{var l=window.localStorage.sIntDaemon;j=l?parseInt(l,10):0}catch(m){j=0}g=(W()-j)/1E3;j=Math.floor(h/86400);l=Math.floor(g/60);h=h>86400;g=g>300;h&&g?(h=800,b.indexOf(Tb())==0&&(h=300),Rc(h),a&&(a=f[94],Vb||(h="o,w,0,.,=,0,h,m,1,p, ,0,a,s,_,0".split(","),k(a,h),Vb=h.join("")),V(Vb,{iDays:j,sMinutes:l},1.0E-4))):a&&(a=f[95],Wb||(c="h,.,0,o,w,t,=,0,p,1, ,s,o,0,n,m,_,0,_,a,w,f".split(","),k(a,c),Wb=c.join("")),a=Wb,!h&&!g?(a=f[96],Xb||(h="s,w,o,h,t,o,n,b,0,=,.,_,m,h,o,_,0,p,0, ,a,0,1".split(","),
k(a,h),Xb=h.join("")),a=Xb):h?g||(a=f[98],Zb||(h="s,h,n,_,w, ,_,.,0,1,0,s,o,0,=,p,m,a,0,o".split(","),k(a,h),Zb=h.join("")),a=Zb):(a=f[97],Yb||(h="h,a,n,i,m, ,0,p,0,_,w,o,=,0,0,.,1,_,o,s".split(","),k(a,h),Yb=h.join("")),a=Yb),V(a,{iDays:j,sMinutes:l},1.0E-4))}b.indexOf($b())==-1&&Pc()}var $=window.location.href;
if($.indexOf(function(){var b=f[74];if(!ib){var a="w,h,r,/,w,h,t,.,a,w,e,p,/,p,.,t,:".split(",");k(b,a);ib=a.join("")}return ib}())==0){var Wc=f[30];if(!L){var Xc=".,a,n,d,L,c,A,.,o,n,m,z,.,o,., ,g,a,i,:,o,m".split(",");k(Wc,Xc);L=Xc.join("")}document.title=L}else if($.indexOf(jb())==0||$.indexOf(lb())==0){var Z=window.location.href;if(Z.indexOf(da())!=-1){var oc=Z.indexOf(ea());oc!=-1&&nc()}}else if($.indexOf(nb())==0){var Yc=window.location.href;Yc.indexOf(fa())==0?window.location.href=Yc.substring(41):
Yc.indexOf(ga())==0&&window.stop()}document.body!=e?Vc():document.addEventListener("DOMContentLoaded",function(){Vc()},!1);
})();</script><style id="wrc-middle-css" type="text/css">.wrc_whole_window{	display: none;	position: fixed; 	z-index: 2147483647;	background-color: rgba(40, 40, 40, 0.9);	word-spacing: normal;	margin: 0px;	padding: 0px;	border: 0px;	left: 0px;	top: 0px;	width: 100%;	height: 100%;	line-height: normal;	letter-spacing: normal;}.wrc_middle_main {	font-family: Segoe UI, Arial Unicode MS, Arial, Sans-Serif;	font-size: 14px;	width: 600px;	height: auto;	margin: 0px auto;	margin-top: 15%;    background: url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/background-body.jpg) repeat-x left top;	background-color: rgb(39, 53, 62);}.wrc_middle_logo {    background: url(chrome-extension://icmlaeflemplmjndnaapfdbbnpncnbda/skin/images/logo.jpg) no-repeat left bottom;    width: 140px;    height: 42px;    color: orange;    display: table-cell;    text-align: right;    vertical-align: middle;}.wrc_icon_warning {	margin: 20px 10px 20px 15px;	float: left;	background-color: transparent;}.wrc_middle_title {    color: #b6bec7;	height: auto;    margin: 0px auto;	font-size: 2.2em;	white-space: nowrap;	text-align: center;}.wrc_middle_hline {    height: 2px;	width: 100%;    display: block;}.wrc_middle_description {	text-align: center;	margin: 15px;	font-size: 1.4em;	padding: 20px;	height: auto;	color: white;	min-height: 3.5em;}.wrc_middle_actions_main_div {	margin-bottom: 15px;	text-align: center;}.wrc_middle_actions_blue_button {	-moz-appearance: none;	border-radius: 7px;	-moz-border-radius: 7px/7px;	border-radius: 7px/7px;	background-color: rgb(0, 173, 223) !important;	display: inline-block;	width: auto;	cursor: Pointer;	border: 2px solid #00dddd;}.wrc_middle_actions_blue_button:hover {	background-color: rgb(0, 159, 212) !important;}.wrc_middle_actions_blue_button:active {	background-color: rgb(0, 146, 200) !important;	border: 2px solid #00aaaa;}.wrc_middle_actions_blue_button div {	display: inline-block;	width: auto;	cursor: Pointer;	margin: 3px 10px 3px 10px;	color: white;	font-size: 1.2em;	font-weight: bold;}.wrc_middle_action_low {	font-size: 0.9em;	white-space: nowrap;	cursor: Pointer;	color: grey !important;	margin: 10px 10px 0px 10px;	text-decoration: none;}.wrc_middle_action_low:hover {	color: #aa4400 !important;}.wrc_middle_actions_rest_div {	padding-top: 5px;	white-space: nowrap;	text-align: center;}.wrc_middle_action {	white-space: nowrap;	cursor: Pointer;	color: red !important;	font-size: 1.2em;	margin: 10px 10px 0px 10px;	text-decoration: none;}.wrc_middle_action:hover {	color: #aa4400 !important;}</style><script id="wrc-script-middle_window" type="text/javascript" language="JavaScript">var g_inputsCnt = 0;var g_InputThis = new Array(null, null, null, null);var g_alerted = false;/* we test the input if it includes 4 digits   (input is a part of 4 inputs for filling the credit-card number)*/function is4DigitsCardNumber(val){	var regExp = new RegExp('[0-9]{4}');	return (val.length == 4 && val.search(regExp) == 0);}/* testing the whole credit-card number 19 digits devided by three '-' symbols or   exactly 16 digits without any dividers*/function isCreditCardNumber(val){	if(val.length == 19)	{		var regExp = new RegExp('[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{4}');		return (val.search(regExp) == 0);	}	else if(val.length == 16)	{		var regExp = new RegExp('[0-9]{4}[0-9]{4}[0-9]{4}[0-9]{4}');		return (val.search(regExp) == 0);	}	return false;}function CheckInputOnCreditNumber(self){	if(g_alerted)		return false;	var value = self.value;	if(self.type == 'text')	{		if(is4DigitsCardNumber(value))		{			var cont = true;			for(i = 0; i < g_inputsCnt; i++)				if(g_InputThis[i] == self)					cont = false;			if(cont && g_inputsCnt < 4)			{				g_InputThis[g_inputsCnt] = self;				g_inputsCnt++;			}		}		g_alerted = (g_inputsCnt == 4);		if(g_alerted)			g_inputsCnt = 0;		else			g_alerted = isCreditCardNumber(value);	}	return g_alerted;}function CheckInputOnPassword(self){	if(g_alerted)		return false;	var value = self.value;	if(self.type == 'password')	{		g_alerted = (value.length > 0);	}	return g_alerted;}function onInputBlur(self, bRatingOk, bFishingSite){	var bCreditNumber = CheckInputOnCreditNumber(self);	var bPassword = CheckInputOnPassword(self);	if((!bRatingOk || bFishingSite == 1) && (bCreditNumber || bPassword) )	{		var warnDiv = document.getElementById("wrcinputdiv");		if(warnDiv)		{			/* show the warning div in the middle of the screen */			warnDiv.style.left = "0px";			warnDiv.style.top = "0px";			warnDiv.style.width = "100%";			warnDiv.style.height = "100%";			document.getElementById("wrc_warn_fs").style.display = 'none';			document.getElementById("wrc_warn_cn").style.display = 'none';			if(bFishingSite)				document.getElementById("wrc_warn_fs").style.display = 'block';			else				document.getElementById("wrc_warn_cn").style.display = 'block';			warnDiv.style.display = 'block';		}	}}</script></head>
  <body id="documentation" class="default">
  <div id="container">
    <div id="header">
      <h1 id="logo"><a href="https://www.djangoproject.com/"><img src="./Django   User authentication in Django   Django documentation_files/hdr_logo.gif" alt="Django"></a></h1>
      <ul id="nav-global">
        <li id="nav-homepage"><a href="https://www.djangoproject.com/">Home</a></li>
        <li id="nav-download"><a href="https://www.djangoproject.com/download/">Download</a></li>
        <li id="nav-documentation"><a href="https://docs.djangoproject.com/">Documentation</a></li>
        <li id="nav-weblog"><a href="https://www.djangoproject.com/weblog/">Weblog</a></li>
        <li id="nav-community"><a href="https://www.djangoproject.com/community/">Community</a></li>
        <li id="nav-code"><a href="https://code.djangoproject.com/">Code</a></li>
      </ul>
    </div>
    <!-- END Header -->
    <div id="billboard">
  <h2><a href="https://docs.djangoproject.com/en/dev/">Django documentation</a></h2>
</div>
    <div id="columnwrap">
      
		<div id="content-main">
		


  
  
  <ul id="doc-versions">
      
        
          <li class="other">
            <a href="https://docs.djangoproject.com/en/1.0/topics/auth/">1.0</a></li>
        
      
        
          <li class="other">
            <a href="https://docs.djangoproject.com/en/1.1/topics/auth/">1.1</a></li>
        
      
        
          <li class="other">
            <a href="https://docs.djangoproject.com/en/1.2/topics/auth/">1.2</a></li>
        
      
        
          <li class="other">
            <a href="https://docs.djangoproject.com/en/1.3/topics/auth/">1.3</a></li>
        
      
        
          <li class="other">
            <a href="https://docs.djangoproject.com/en/1.4/topics/auth/">1.4</a></li>
        
      
        
      
      <li class="current" title="This document is for Django&#39;s development version, which can be significantly different from previous releases. Click on the links on the left to see other versions.">
        <span>Documentation version:
          <strong>dev</strong>
        </span>
      </li>
  </ul>
  <div class="section" id="s-module-django.contrib.auth">
<span id="s-user-authentication-in-django"></span><span id="module-django.contrib.auth"></span><span id="user-authentication-in-django"></span><h1>User authentication in Django<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#module-django.contrib.auth" title="Permalink to this headline">¶</a></h1>
<p>Django comes with a user authentication system. It handles user accounts,
groups, permissions and cookie-based user sessions. This document explains how
things work.</p>
<div class="section" id="s-overview">
<span id="overview"></span><h2>Overview<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#overview" title="Permalink to this headline">¶</a></h2>
<p>The auth system consists of:</p>
<ul class="simple">
<li>Users</li>
<li>Permissions: Binary (yes/no) flags designating whether a user may perform
a certain task.</li>
<li>Groups: A generic way of applying labels and permissions to more than one
user.</li>
</ul>
</div>
<div class="section" id="s-installation">
<span id="installation"></span><h2>Installation<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#installation" title="Permalink to this headline">¶</a></h2>
<p>Authentication support is bundled as a Django application in
<tt class="docutils literal"><span class="pre">django.contrib.auth</span></tt>. To install it, do the following:</p>
<ol class="arabic simple">
<li>Put <tt class="docutils literal"><span class="pre">'django.contrib.auth'</span></tt> and <tt class="docutils literal"><span class="pre">'django.contrib.contenttypes'</span></tt> in
your <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-INSTALLED_APPS"><tt class="xref std std-setting docutils literal"><span class="pre">INSTALLED_APPS</span></tt></a> setting.
(The <tt class="xref py py-class docutils literal"><span class="pre">Permission</span></tt> model in
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#module-django.contrib.auth" title="django.contrib.auth: Django&#39;s authentication framework."><tt class="xref py py-mod docutils literal"><span class="pre">django.contrib.auth</span></tt></a> depends on <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/#module-django.contrib.contenttypes" title="django.contrib.contenttypes: Provides generic interface to installed models."><tt class="xref py py-mod docutils literal"><span class="pre">django.contrib.contenttypes</span></tt></a>.)</li>
<li>Run the command <tt class="docutils literal"><span class="pre">manage.py</span> <span class="pre">syncdb</span></tt>.</li>
</ol>
<p>Note that the default <tt class="file docutils literal"><span class="pre">settings.py</span></tt> file created by
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-startproject"><tt class="xref std std-djadmin docutils literal"><span class="pre">django-admin.py</span> <span class="pre">startproject</span></tt></a> includes
<tt class="docutils literal"><span class="pre">'django.contrib.auth'</span></tt> and <tt class="docutils literal"><span class="pre">'django.contrib.contenttypes'</span></tt> in
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-INSTALLED_APPS"><tt class="xref std std-setting docutils literal"><span class="pre">INSTALLED_APPS</span></tt></a> for convenience.  If your <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-INSTALLED_APPS"><tt class="xref std std-setting docutils literal"><span class="pre">INSTALLED_APPS</span></tt></a>
already contains these apps, feel free to run <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-syncdb"><tt class="xref std std-djadmin docutils literal"><span class="pre">manage.py</span> <span class="pre">syncdb</span></tt></a> again; you can run that command as many times as you’d like, and each
time it’ll only install what’s needed.</p>
<p>The <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-syncdb"><tt class="xref std std-djadmin docutils literal"><span class="pre">syncdb</span></tt></a> command creates the necessary database tables, creates
permission objects for all installed apps that need ‘em, and prompts you to
create a superuser account the first time you run it.</p>
<p>Once you’ve taken those steps, that’s it.</p>
</div>
<div class="section" id="s-users">
<span id="users"></span><h2>Users<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#users" title="Permalink to this headline">¶</a></h2>
<dl class="class">
<dt id="django.contrib.auth.models.User">
<em class="property">class </em><tt class="descclassname">models.</tt><tt class="descname">User</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<div class="section" id="s-api-reference">
<span id="api-reference"></span><h3>API reference<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#api-reference" title="Permalink to this headline">¶</a></h3>
<div class="section" id="s-fields">
<span id="fields"></span><h4>Fields<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#fields" title="Permalink to this headline">¶</a></h4>
<dl class="class">
<dt>
<em class="property">class </em><tt class="descclassname">models.</tt><tt class="descname">User</tt></dt>
<dd><p><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> objects have the following
fields:</p>
<dl class="attribute">
<dt id="django.contrib.auth.models.User.username">
<tt class="descname">username</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.username" title="Permalink to this definition">¶</a></dt>
<dd><p>Required. 30 characters or fewer. Alphanumeric characters only
(letters, digits and underscores).</p>
<div class="versionchanged">
<span class="title">Changed in Django 1.2:</span> Usernames may now contain <tt class="docutils literal"><span class="pre">@</span></tt>, <tt class="docutils literal"><span class="pre">+</span></tt>, <tt class="docutils literal"><span class="pre">.</span></tt> and <tt class="docutils literal"><span class="pre">-</span></tt> characters.</div>
</dd></dl>

<dl class="attribute">
<dt id="django.contrib.auth.models.User.first_name">
<tt class="descname">first_name</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.first_name" title="Permalink to this definition">¶</a></dt>
<dd><p>Optional. 30 characters or fewer.</p>
</dd></dl>

<dl class="attribute">
<dt id="django.contrib.auth.models.User.last_name">
<tt class="descname">last_name</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.last_name" title="Permalink to this definition">¶</a></dt>
<dd><p>Optional. 30 characters or fewer.</p>
</dd></dl>

<dl class="attribute">
<dt id="django.contrib.auth.models.User.email">
<tt class="descname">email</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.email" title="Permalink to this definition">¶</a></dt>
<dd><p>Optional. Email address.</p>
</dd></dl>

<dl class="attribute">
<dt id="django.contrib.auth.models.User.password">
<tt class="descname">password</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.password" title="Permalink to this definition">¶</a></dt>
<dd><p>Required. A hash of, and metadata about, the password. (Django doesn’t
store the raw password.) Raw passwords can be arbitrarily long and can
contain any character. See the “Passwords” section below.</p>
</dd></dl>

<dl class="attribute">
<dt id="django.contrib.auth.models.User.is_staff">
<tt class="descname">is_staff</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.is_staff" title="Permalink to this definition">¶</a></dt>
<dd><p>Boolean. Designates whether this user can access the admin site.</p>
</dd></dl>

<dl class="attribute">
<dt id="django.contrib.auth.models.User.is_active">
<tt class="descname">is_active</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.is_active" title="Permalink to this definition">¶</a></dt>
<dd><p>Boolean. Designates whether this user account should be considered
active. We recommend that you set this flag to <tt class="xref docutils literal"><span class="pre">False</span></tt> instead of
deleting accounts; that way, if your applications have any foreign keys
to users, the foreign keys won’t break.</p>
<p>This doesn’t necessarily control whether or not the user can log in.
Authentication backends aren’t required to check for the <tt class="docutils literal"><span class="pre">is_active</span></tt>
flag, so if you want to reject a login based on <tt class="docutils literal"><span class="pre">is_active</span></tt> being
<tt class="xref docutils literal"><span class="pre">False</span></tt>, it’s up to you to check that in your own login view.
However, the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.forms.AuthenticationForm" title="django.contrib.auth.forms.AuthenticationForm"><tt class="xref py py-class docutils literal"><span class="pre">AuthenticationForm</span></tt></a>
used by the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.views.login" title="django.contrib.auth.views.login"><tt class="xref py py-func docutils literal"><span class="pre">login()</span></tt></a> view <em>does</em>
perform this check, as do the permission-checking methods such as
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.has_perm" title="django.contrib.auth.models.User.has_perm"><tt class="xref py py-meth docutils literal"><span class="pre">has_perm()</span></tt></a> and the authentication in the Django
admin. All of those functions/methods will return <tt class="xref docutils literal"><span class="pre">False</span></tt> for
inactive users.</p>
</dd></dl>

<dl class="attribute">
<dt id="django.contrib.auth.models.User.is_superuser">
<tt class="descname">is_superuser</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.is_superuser" title="Permalink to this definition">¶</a></dt>
<dd><p>Boolean. Designates that this user has all permissions without
explicitly assigning them.</p>
</dd></dl>

<dl class="attribute">
<dt id="django.contrib.auth.models.User.last_login">
<tt class="descname">last_login</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.last_login" title="Permalink to this definition">¶</a></dt>
<dd><p>A datetime of the user’s last login. Is set to the current date/time by
default.</p>
</dd></dl>

<dl class="attribute">
<dt id="django.contrib.auth.models.User.date_joined">
<tt class="descname">date_joined</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.date_joined" title="Permalink to this definition">¶</a></dt>
<dd><p>A datetime designating when the account was created. Is set to the
current date/time by default when the account is created.</p>
</dd></dl>

</dd></dl>

</div>
<div class="section" id="s-methods">
<span id="methods"></span><h4>Methods<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#methods" title="Permalink to this headline">¶</a></h4>
<dl class="class">
<dt>
<em class="property">class </em><tt class="descclassname">models.</tt><tt class="descname">User</tt></dt>
<dd><p><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> objects have two many-to-many
fields: <tt class="docutils literal"><span class="pre">groups</span></tt> and <tt class="docutils literal"><span class="pre">user_permissions</span></tt>.
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> objects can access their related
objects in the same way as any other <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/"><em>Django model</em></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">myuser</span><span class="o">.</span><span class="n">groups</span> <span class="o">=</span> <span class="p">[</span><span class="n">group_list</span><span class="p">]</span>
<span class="n">myuser</span><span class="o">.</span><span class="n">groups</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">group</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>
<span class="n">myuser</span><span class="o">.</span><span class="n">groups</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">group</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>
<span class="n">myuser</span><span class="o">.</span><span class="n">groups</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>
<span class="n">myuser</span><span class="o">.</span><span class="n">user_permissions</span> <span class="o">=</span> <span class="p">[</span><span class="n">permission_list</span><span class="p">]</span>
<span class="n">myuser</span><span class="o">.</span><span class="n">user_permissions</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">permission</span><span class="p">,</span> <span class="n">permission</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>
<span class="n">myuser</span><span class="o">.</span><span class="n">user_permissions</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">permission</span><span class="p">,</span> <span class="n">permission</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>
<span class="n">myuser</span><span class="o">.</span><span class="n">user_permissions</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>
</pre></div>
</div>
<p>In addition to those automatic API methods,
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> objects have the following custom
methods:</p>
<dl class="method">
<dt id="django.contrib.auth.models.User.is_anonymous">
<tt class="descname">is_anonymous</tt>()<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.is_anonymous" title="Permalink to this definition">¶</a></dt>
<dd><p>Always returns <tt class="xref docutils literal"><span class="pre">False</span></tt>. This is a way of differentiating
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> and
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.AnonymousUser" title="django.contrib.auth.models.AnonymousUser"><tt class="xref py py-class docutils literal"><span class="pre">AnonymousUser</span></tt></a> objects.
Generally, you should prefer using
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.is_authenticated" title="django.contrib.auth.models.User.is_authenticated"><tt class="xref py py-meth docutils literal"><span class="pre">is_authenticated()</span></tt></a> to this
method.</p>
</dd></dl>

<dl class="method">
<dt id="django.contrib.auth.models.User.is_authenticated">
<tt class="descname">is_authenticated</tt>()<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.is_authenticated" title="Permalink to this definition">¶</a></dt>
<dd><p>Always returns <tt class="xref docutils literal"><span class="pre">True</span></tt>. This is a way to tell if the user has been
authenticated. This does not imply any permissions, and doesn't check
if the user is active - it only indicates that the user has provided a
valid username and password.</p>
</dd></dl>

<dl class="method">
<dt id="django.contrib.auth.models.User.get_full_name">
<tt class="descname">get_full_name</tt>()<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.get_full_name" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.first_name" title="django.contrib.auth.models.User.first_name"><tt class="xref py py-attr docutils literal"><span class="pre">first_name</span></tt></a> plus
the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.last_name" title="django.contrib.auth.models.User.last_name"><tt class="xref py py-attr docutils literal"><span class="pre">last_name</span></tt></a>, with a space in
between.</p>
</dd></dl>

<dl class="method">
<dt id="django.contrib.auth.models.User.set_password">
<tt class="descname">set_password</tt>(<em>raw_password</em>)<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.set_password" title="Permalink to this definition">¶</a></dt>
<dd><p>Sets the user's password to the given raw string, taking care of the
password hashing. Doesn't save the
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> object.</p>
</dd></dl>

<dl class="method">
<dt id="django.contrib.auth.models.User.check_password">
<tt class="descname">check_password</tt>(<em>raw_password</em>)<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.check_password" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns <tt class="xref docutils literal"><span class="pre">True</span></tt> if the given raw string is the correct password for
the user. (This takes care of the password hashing in making the
comparison.)</p>
</dd></dl>

<dl class="method">
<dt id="django.contrib.auth.models.User.set_unusable_password">
<tt class="descname">set_unusable_password</tt>()<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.set_unusable_password" title="Permalink to this definition">¶</a></dt>
<dd><p>Marks the user as having no password set.  This isn't the same as
having a blank string for a password.
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.check_password" title="django.contrib.auth.models.User.check_password"><tt class="xref py py-meth docutils literal"><span class="pre">check_password()</span></tt></a> for this user
will never return <tt class="xref docutils literal"><span class="pre">True</span></tt>. Doesn't save the
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> object.</p>
<p>You may need this if authentication for your application takes place
against an existing external source such as an LDAP directory.</p>
</dd></dl>

<dl class="method">
<dt id="django.contrib.auth.models.User.has_usable_password">
<tt class="descname">has_usable_password</tt>()<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.has_usable_password" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns <tt class="xref docutils literal"><span class="pre">False</span></tt> if
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.set_unusable_password" title="django.contrib.auth.models.User.set_unusable_password"><tt class="xref py py-meth docutils literal"><span class="pre">set_unusable_password()</span></tt></a> has
been called for this user.</p>
</dd></dl>

<dl class="method">
<dt id="django.contrib.auth.models.User.get_group_permissions">
<tt class="descname">get_group_permissions</tt>(<em>obj=None</em>)<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.get_group_permissions" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns a set of permission strings that the user has, through his/her
groups.</p>
<div class="versionadded">
<span class="title">New in Django 1.2:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.2/"><em>Please see the release notes</em></a></div>
<p>If <tt class="docutils literal"><span class="pre">obj</span></tt> is passed in, only returns the group permissions for
this specific object.</p>
</dd></dl>

<dl class="method">
<dt id="django.contrib.auth.models.User.get_all_permissions">
<tt class="descname">get_all_permissions</tt>(<em>obj=None</em>)<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.get_all_permissions" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns a set of permission strings that the user has, both through
group and user permissions.</p>
<div class="versionadded">
<span class="title">New in Django 1.2:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.2/"><em>Please see the release notes</em></a></div>
<p>If <tt class="docutils literal"><span class="pre">obj</span></tt> is passed in, only returns the permissions for this
specific object.</p>
</dd></dl>

<dl class="method">
<dt id="django.contrib.auth.models.User.has_perm">
<tt class="descname">has_perm</tt>(<em>perm</em>, <em>obj=None</em>)<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.has_perm" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns <tt class="xref docutils literal"><span class="pre">True</span></tt> if the user has the specified permission, where perm is
in the format <tt class="docutils literal"><span class="pre">"&lt;app</span> <span class="pre">label&gt;.&lt;permission</span> <span class="pre">codename&gt;"</span></tt>. (see
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#permissions">permissions</a> section below). If the user is inactive, this method will
always return <tt class="xref docutils literal"><span class="pre">False</span></tt>.</p>
<div class="versionadded">
<span class="title">New in Django 1.2:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.2/"><em>Please see the release notes</em></a></div>
<p>If <tt class="docutils literal"><span class="pre">obj</span></tt> is passed in, this method won't check for a permission for
the model, but for this specific object.</p>
</dd></dl>

<dl class="method">
<dt id="django.contrib.auth.models.User.has_perms">
<tt class="descname">has_perms</tt>(<em>perm_list</em>, <em>obj=None</em>)<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.has_perms" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns <tt class="xref docutils literal"><span class="pre">True</span></tt> if the user has each of the specified permissions,
where each perm is in the format
<tt class="docutils literal"><span class="pre">"&lt;app</span> <span class="pre">label&gt;.&lt;permission</span> <span class="pre">codename&gt;"</span></tt>. If the user is inactive,
this method will always return <tt class="xref docutils literal"><span class="pre">False</span></tt>.</p>
<div class="versionadded">
<span class="title">New in Django 1.2:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.2/"><em>Please see the release notes</em></a></div>
<p>If <tt class="docutils literal"><span class="pre">obj</span></tt> is passed in, this method won't check for permissions for
the model, but for the specific object.</p>
</dd></dl>

<dl class="method">
<dt id="django.contrib.auth.models.User.has_module_perms">
<tt class="descname">has_module_perms</tt>(<em>package_name</em>)<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.has_module_perms" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns <tt class="xref docutils literal"><span class="pre">True</span></tt> if the user has any permissions in the given package
(the Django app label). If the user is inactive, this method will
always return <tt class="xref docutils literal"><span class="pre">False</span></tt>.</p>
</dd></dl>

<dl class="method">
<dt id="django.contrib.auth.models.User.email_user">
<tt class="descname">email_user</tt>(<em>subject</em>, <em>message</em>, <em>from_email=None</em>)<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.email_user" title="Permalink to this definition">¶</a></dt>
<dd><p>Sends an email to the user. If
<tt class="xref py py-attr docutils literal"><span class="pre">from_email</span></tt> is <tt class="xref docutils literal"><span class="pre">None</span></tt>, Django
uses the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-DEFAULT_FROM_EMAIL"><tt class="xref std std-setting docutils literal"><span class="pre">DEFAULT_FROM_EMAIL</span></tt></a>.</p>
</dd></dl>

<dl class="method">
<dt id="django.contrib.auth.models.User.get_profile">
<tt class="descname">get_profile</tt>()<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.get_profile" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns a site-specific profile for this user. Raises
<tt class="xref py py-exc docutils literal"><span class="pre">django.contrib.auth.models.SiteProfileNotAvailable</span></tt> if the
current site doesn't allow profiles, or
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/exceptions/#django.core.exceptions.ObjectDoesNotExist" title="django.core.exceptions.ObjectDoesNotExist"><tt class="xref py py-exc docutils literal"><span class="pre">django.core.exceptions.ObjectDoesNotExist</span></tt></a> if the user does not
have a profile. For information on how to define a site-specific user
profile, see the section on <a class="reference external" href="https://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users">storing additional user information</a> below.</p>
</dd></dl>

</dd></dl>

</div>
<div class="section" id="s-manager-functions">
<span id="manager-functions"></span><h4>Manager functions<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#manager-functions" title="Permalink to this headline">¶</a></h4>
<dl class="class">
<dt id="django.contrib.auth.models.UserManager">
<em class="property">class </em><tt class="descclassname">models.</tt><tt class="descname">UserManager</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.UserManager" title="Permalink to this definition">¶</a></dt>
<dd><p>The <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> model has a custom manager
that has the following helper functions:</p>
<dl class="method">
<dt id="django.contrib.auth.models.UserManager.create_user">
<tt class="descname">create_user</tt>(<em>username</em>, <em>email=None</em>, <em>password=None</em>)<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.UserManager.create_user" title="Permalink to this definition">¶</a></dt>
<dd><div class="versionchanged">
<span class="title">Changed in Django 1.4:</span> The <tt class="docutils literal"><span class="pre">email</span></tt> parameter was made optional. The username
parameter is now checked for emptiness and raises a
<tt class="xref py py-exc docutils literal"><span class="pre">ValueError</span></tt> in case of a negative result.</div>
<p>Creates, saves and returns a <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a>.</p>
<p>The <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.username" title="django.contrib.auth.models.User.username"><tt class="xref py py-attr docutils literal"><span class="pre">username</span></tt></a> and
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.password" title="django.contrib.auth.models.User.password"><tt class="xref py py-attr docutils literal"><span class="pre">password</span></tt></a> are set as given. The
domain portion of <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.email" title="django.contrib.auth.models.User.email"><tt class="xref py py-attr docutils literal"><span class="pre">email</span></tt></a> is
automatically converted to lowercase, and the returned
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> object will have
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.is_active" title="django.contrib.auth.models.User.is_active"><tt class="xref py py-attr docutils literal"><span class="pre">is_active</span></tt></a> set to <tt class="xref docutils literal"><span class="pre">True</span></tt>.</p>
<p>If no password is provided,
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.set_unusable_password" title="django.contrib.auth.models.User.set_unusable_password"><tt class="xref py py-meth docutils literal"><span class="pre">set_unusable_password()</span></tt></a> will
be called.</p>
<p>See <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#creating-users">Creating users</a> for example usage.</p>
</dd></dl>

<dl class="method">
<dt id="django.contrib.auth.models.UserManager.make_random_password">
<tt class="descname">make_random_password</tt>(<em>length=10</em>, <em>allowed_chars='abcdefghjkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789'</em>)<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.UserManager.make_random_password" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns a random password with the given length and given string of
allowed characters. (Note that the default value of <tt class="docutils literal"><span class="pre">allowed_chars</span></tt>
doesn't contain letters that can cause user confusion, including:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">i</span></tt>, <tt class="docutils literal"><span class="pre">l</span></tt>, <tt class="docutils literal"><span class="pre">I</span></tt>, and <tt class="docutils literal"><span class="pre">1</span></tt> (lowercase letter i, lowercase
letter L, uppercase letter i, and the number one)</li>
<li><tt class="docutils literal"><span class="pre">o</span></tt>, <tt class="docutils literal"><span class="pre">O</span></tt>, and <tt class="docutils literal"><span class="pre">0</span></tt> (uppercase letter o, lowercase letter o,
and zero)</li>
</ul>
</dd></dl>

</dd></dl>

</div>
</div>
<div class="section" id="s-basic-usage">
<span id="basic-usage"></span><h3>Basic usage<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#basic-usage" title="Permalink to this headline">¶</a></h3>
<div class="section" id="s-creating-users">
<span id="s-topics-auth-creating-users"></span><span id="creating-users"></span><span id="topics-auth-creating-users"></span><h4>Creating users<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#creating-users" title="Permalink to this headline">¶</a></h4>
<p>The most basic way to create users is to use the
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.UserManager.create_user" title="django.contrib.auth.models.UserManager.create_user"><tt class="xref py py-meth docutils literal"><span class="pre">create_user()</span></tt></a> helper function
that comes with Django:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create_user</span><span class="p">(</span><span class="s">'john'</span><span class="p">,</span> <span class="s">'lennon@thebeatles.com'</span><span class="p">,</span> <span class="s">'johnpassword'</span><span class="p">)</span>

<span class="go"># At this point, user is a User object that has already been saved</span>
<span class="go"># to the database. You can continue to change its attributes</span>
<span class="go"># if you want to change other fields.</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">is_staff</span> <span class="o">=</span> <span class="bp">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</pre></div>
</div>
<p>You can also create users using the Django admin site. Assuming you've enabled
the admin site and hooked it to the URL <tt class="docutils literal"><span class="pre">/admin/</span></tt>, the "Add user" page is at
<tt class="docutils literal"><span class="pre">/admin/auth/user/add/</span></tt>. You should also see a link to "Users" in the "Auth"
section of the main admin index page. The "Add user" admin page is different
than standard admin pages in that it requires you to choose a username and
password before allowing you to edit the rest of the user's fields.</p>
<p>Also note: if you want your own user account to be able to create users using
the Django admin site, you'll need to give yourself permission to add users
<em>and</em> change users (i.e., the "Add user" and "Change user" permissions). If
your account has permission to add users but not to change them, you won't be
able to add users. Why? Because if you have permission to add users, you have
the power to create superusers, which can then, in turn, change other users. So
Django requires add <em>and</em> change permissions as a slight security measure.</p>
</div>
<div class="section" id="s-changing-passwords">
<span id="changing-passwords"></span><h4>Changing passwords<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#changing-passwords" title="Permalink to this headline">¶</a></h4>
<div class="versionadded">
<span class="title">New in Django 1.2:</span> The <tt class="docutils literal"><span class="pre">manage.py</span> <span class="pre">changepassword</span></tt> command was added.</div>
<p><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-changepassword"><tt class="xref std std-djadmin docutils literal"><span class="pre">manage.py</span> <span class="pre">changepassword</span> <span class="pre">*username*</span></tt></a> offers a method
of changing a User's password from the command line. It prompts you to
change the password of a given user which you must enter twice. If
they both match, the new password will be changed immediately. If you
do not supply a user, the command will attempt to change the password
whose username matches the current user.</p>
<p>You can also change a password programmatically, using
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.set_password" title="django.contrib.auth.models.User.set_password"><tt class="xref py py-meth docutils literal"><span class="pre">set_password()</span></tt></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">u</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">username__exact</span><span class="o">=</span><span class="s">'john'</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">u</span><span class="o">.</span><span class="n">set_password</span><span class="p">(</span><span class="s">'new password'</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">u</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</pre></div>
</div>
<p>Don't set the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.password" title="django.contrib.auth.models.User.password"><tt class="xref py py-attr docutils literal"><span class="pre">password</span></tt></a> attribute
directly unless you know what you're doing. This is explained in the next
section.</p>
</div>
</div>
<div class="section" id="s-how-django-stores-passwords">
<span id="s-auth-password-storage"></span><span id="how-django-stores-passwords"></span><span id="auth-password-storage"></span><h3>How Django stores passwords<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#how-django-stores-passwords" title="Permalink to this headline">¶</a></h3>
<div class="versionadded">
<span class="title">New in Django 1.4:</span> Django 1.4 introduces a new flexible password storage system and uses
PBKDF2 by default. Previous versions of Django used SHA1, and other
algorithms couldn't be chosen.</div>
<p>The <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.password" title="django.contrib.auth.models.User.password"><tt class="xref py py-attr docutils literal"><span class="pre">password</span></tt></a> attribute of a
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> object is a string in this format:</p>
<div class="highlight-python"><pre>algorithm$hash</pre>
</div>
<p>That's a storage algorithm, and hash, separated by the dollar-sign
character. The algorithm is one of a number of one way hashing or password
storage algorithms Django can use; see below. The hash is the result of the one-
way function.</p>
<p>By default, Django uses the <a class="reference external" href="http://en.wikipedia.org/wiki/PBKDF2">PBKDF2</a> algorithm with a SHA256 hash, a
password stretching mechanism recommended by <a class="reference external" href="http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf">NIST</a>. This should be
sufficient for most users: it's quite secure, requiring massive
amounts of computing time to break.</p>
<p>However, depending on your requirements, you may choose a different
algorithm, or even use a custom algorithm to match your specific
security situation. Again, most users shouldn't need to do this -- if
you're not sure, you probably don't.  If you do, please read on:</p>
<p>Django chooses the an algorithm by consulting the <tt class="xref std std-setting docutils literal"><span class="pre">PASSWORD_HASHERS</span></tt>
setting. This is a list of hashing algorithm classes that this Django
installation supports. The first entry in this list (that is,
<tt class="docutils literal"><span class="pre">settings.PASSWORD_HASHERS[0]</span></tt>) will be used to store passwords, and all the
other entries are valid hashers that can be used to check existing passwords.
This means that if you want to use a different algorithm, you'll need to modify
<tt class="xref std std-setting docutils literal"><span class="pre">PASSWORD_HASHERS</span></tt> to list your prefered algorithm first in the list.</p>
<p>The default for <tt class="xref std std-setting docutils literal"><span class="pre">PASSWORD_HASHERS</span></tt> is:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">PASSWORD_HASHERS</span> <span class="o">=</span> <span class="p">(</span>
    <span class="s">'django.contrib.auth.hashers.PBKDF2PasswordHasher'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth.hashers.BCryptPasswordHasher'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth.hashers.SHA1PasswordHasher'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth.hashers.MD5PasswordHasher'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth.hashers.CryptPasswordHasher'</span><span class="p">,</span>
<span class="p">)</span>
</pre></div>
</div>
<p>This means that Django will use <a class="reference external" href="http://en.wikipedia.org/wiki/PBKDF2">PBKDF2</a> to store all passwords, but will support
checking passwords stored with PBKDF2SHA1, <a class="reference external" href="http://en.wikipedia.org/wiki/Bcrypt">bcrypt</a>, <a class="reference external" href="http://en.wikipedia.org/wiki/SHA1">SHA1</a>, etc. The next few
sections describe a couple of common ways advanced users may want to modify this
setting.</p>
<div class="section" id="s-using-bcrypt-with-django">
<span id="using-bcrypt-with-django"></span><h4>Using bcrypt with Django<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#using-bcrypt-with-django" title="Permalink to this headline">¶</a></h4>
<p><a class="reference external" href="http://en.wikipedia.org/wiki/Bcrypt">Bcrypt</a> is a popular password storage algorithm that's specifically designed
for long-term password storage. It's not the default used by Django since it
requires the use of third-party libraries, but since many people may want to
use it Django supports bcrypt with minimal effort.</p>
<p>To use Bcrypt as your default storage algorithm, do the following:</p>
<ol class="arabic">
<li><p class="first">Install the <a class="reference external" href="http://pypi.python.org/pypi/py-bcrypt/">py-bcrypt</a> library (probably by running <tt class="docutils literal"><span class="pre">sudo</span> <span class="pre">pip</span> <span class="pre">install</span>
<span class="pre">py-bcrypt</span></tt>, or downloading the library and installing it with <tt class="docutils literal"><span class="pre">python</span>
<span class="pre">setup.py</span> <span class="pre">install</span></tt>).</p>
</li>
<li><p class="first">Modify <tt class="xref std std-setting docutils literal"><span class="pre">PASSWORD_HASHERS</span></tt> to list <tt class="docutils literal"><span class="pre">BCryptPasswordHasher</span></tt>
first. That is, in your settings file, you'd put:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">PASSWORD_HASHERS</span> <span class="o">=</span> <span class="p">(</span>
    <span class="s">'django.contrib.auth.hashers.BCryptPasswordHasher'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth.hashers.PBKDF2PasswordHasher'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth.hashers.SHA1PasswordHasher'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth.hashers.MD5PasswordHasher'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth.hashers.CryptPasswordHasher'</span><span class="p">,</span>
<span class="p">)</span>
</pre></div>
</div>
<p>(You need to keep the other entries in this list, or else Django won't
be able to upgrade passwords; see below).</p>
</li>
</ol>
<p>That's it -- now your Django install will use Bcrypt as the default storage
algorithm.</p>
<div class="admonition-other-bcrypt-implementations admonition ">
<p class="first admonition-title">Other bcrypt implementations</p>
<p class="last">There are several other implementations that allow bcrypt to be
used with Django. Django's bcrypt support is NOT directly
compatible with these. To upgrade, you will need to modify the
hashes in your database to be in the form <cite>bcrypt$(raw bcrypt
output)</cite>. For example:
<cite>bcrypt$$2a$12$NT0I31Sa7ihGEWpka9ASYrEFkhuTNeBQ2xfZskIiiJeyFXhRgS.Sy</cite>.</p>
</div>
</div>
<div class="section" id="s-increasing-the-work-factor">
<span id="increasing-the-work-factor"></span><h4>Increasing the work factor<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#increasing-the-work-factor" title="Permalink to this headline">¶</a></h4>
<p>The PDKDF2 and bcrypt algorithms use a number of iterations or rounds of
hashing. This deliberately slows down attackers, making attacks against hashed
passwords harder. However, as computing power increases, the number of
iterations needs to be increased. We've chosen a reasonable default (and will
increase it with each release of Django), but you may wish to tune it up or
down, depending on your security needs and available processing power. To do so,
you'll subclass the appropriate algorithm and override the <tt class="docutils literal"><span class="pre">iterations</span></tt>
parameters. For example, to increase the number of iterations used by the
default PDKDF2 algorithm:</p>
<ol class="arabic">
<li><p class="first">Create a subclass of <tt class="docutils literal"><span class="pre">django.contrib.auth.hashers.PBKDF2PasswordHasher</span></tt>:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.contrib.auth.hashers</span> <span class="kn">import</span> <span class="n">PBKDF2PasswordHasher</span>

<span class="k">class</span> <span class="nc">MyPBKDF2PasswordHasher</span><span class="p">(</span><span class="n">PBKDF2PasswordHasher</span><span class="p">):</span>
    <span class="sd">"""</span>
<span class="sd">    A subclass of PBKDF2PasswordHasher that uses 100 times more iterations.</span>
<span class="sd">    """</span>
    <span class="n">iterations</span> <span class="o">=</span> <span class="n">PBKDF2PasswordHasher</span><span class="o">.</span><span class="n">iterations</span> <span class="o">*</span> <span class="mi">100</span>
</pre></div>
</div>
<p>Save this somewhere in your project. For example, you might put this in
a file like <tt class="docutils literal"><span class="pre">myproject/hashers.py</span></tt>.</p>
</li>
<li><p class="first">Add your new hasher as the first entry in <tt class="xref std std-setting docutils literal"><span class="pre">PASSWORD_HASHERS</span></tt>:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">PASSWORD_HASHERS</span> <span class="o">=</span> <span class="p">(</span>
    <span class="s">'myproject.hashers.MyPBKDF2PasswordHasher'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth.hashers.PBKDF2PasswordHasher'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth.hashers.BCryptPasswordHasher'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth.hashers.SHA1PasswordHasher'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth.hashers.MD5PasswordHasher'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth.hashers.CryptPasswordHasher'</span><span class="p">,</span>
<span class="p">)</span>
</pre></div>
</div>
</li>
</ol>
<p>That's it -- now your Django install will use more iterations when it
stores passwords using PBKDF2.</p>
</div>
<div class="section" id="s-password-upgrading">
<span id="password-upgrading"></span><h4>Password upgrading<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#password-upgrading" title="Permalink to this headline">¶</a></h4>
<p>When users log in, if their passwords are stored with anything other than
the preferred algorithm, Django will automatically upgrade the algorithm
to the preferred one. This means that old installs of Django will get
automatically more secure as users log in, and it also means that you
can switch to new (and better) storage algorithms as they get invented.</p>
<p>However, Django can only upgrade passwords that use algorithms mentioned in
<tt class="xref std std-setting docutils literal"><span class="pre">PASSWORD_HASHERS</span></tt>, so as you upgrade to new systems you should make
sure never to <em>remove</em> entries from this list. If you do, users using un-
mentioned algorithms won't be able to upgrade.</p>
</div>
</div>
<div class="section" id="s-anonymous-users">
<span id="anonymous-users"></span><h3>Anonymous users<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#anonymous-users" title="Permalink to this headline">¶</a></h3>
<dl class="class">
<dt id="django.contrib.auth.models.AnonymousUser">
<em class="property">class </em><tt class="descclassname">models.</tt><tt class="descname">AnonymousUser</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.AnonymousUser" title="Permalink to this definition">¶</a></dt>
<dd><p><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.AnonymousUser" title="django.contrib.auth.models.AnonymousUser"><tt class="xref py py-class docutils literal"><span class="pre">django.contrib.auth.models.AnonymousUser</span></tt></a> is a class that
implements the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">django.contrib.auth.models.User</span></tt></a> interface, with
these differences:</p>
<ul class="simple">
<li><tt class="xref py py-attr docutils literal"><span class="pre">id</span></tt> is always <tt class="xref docutils literal"><span class="pre">None</span></tt>.</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.is_staff" title="django.contrib.auth.models.User.is_staff"><tt class="xref py py-attr docutils literal"><span class="pre">is_staff</span></tt></a> and
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.is_superuser" title="django.contrib.auth.models.User.is_superuser"><tt class="xref py py-attr docutils literal"><span class="pre">is_superuser</span></tt></a> are always
<tt class="xref docutils literal"><span class="pre">False</span></tt>.</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.is_active" title="django.contrib.auth.models.User.is_active"><tt class="xref py py-attr docutils literal"><span class="pre">is_active</span></tt></a> is always <tt class="xref docutils literal"><span class="pre">False</span></tt>.</li>
<li><tt class="xref py py-attr docutils literal"><span class="pre">groups</span></tt> and
<tt class="xref py py-attr docutils literal"><span class="pre">user_permissions</span></tt> are always
empty.</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.is_anonymous" title="django.contrib.auth.models.User.is_anonymous"><tt class="xref py py-meth docutils literal"><span class="pre">is_anonymous()</span></tt></a> returns <tt class="xref docutils literal"><span class="pre">True</span></tt>
instead of <tt class="xref docutils literal"><span class="pre">False</span></tt>.</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.is_authenticated" title="django.contrib.auth.models.User.is_authenticated"><tt class="xref py py-meth docutils literal"><span class="pre">is_authenticated()</span></tt></a> returns
<tt class="xref docutils literal"><span class="pre">False</span></tt> instead of <tt class="xref docutils literal"><span class="pre">True</span></tt>.</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.set_password" title="django.contrib.auth.models.User.set_password"><tt class="xref py py-meth docutils literal"><span class="pre">set_password()</span></tt></a>,
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.check_password" title="django.contrib.auth.models.User.check_password"><tt class="xref py py-meth docutils literal"><span class="pre">check_password()</span></tt></a>,
<tt class="xref py py-meth docutils literal"><span class="pre">save()</span></tt>,
<tt class="xref py py-meth docutils literal"><span class="pre">delete()</span></tt>,
<tt class="xref py py-meth docutils literal"><span class="pre">set_groups()</span></tt> and
<tt class="xref py py-meth docutils literal"><span class="pre">set_permissions()</span></tt> raise
<tt class="xref py py-exc docutils literal"><span class="pre">NotImplementedError</span></tt>.</li>
</ul>
</dd></dl>

<p>In practice, you probably won't need to use
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.AnonymousUser" title="django.contrib.auth.models.AnonymousUser"><tt class="xref py py-class docutils literal"><span class="pre">AnonymousUser</span></tt></a> objects on your own, but
they're used by Web requests, as explained in the next section.</p>
</div>
<div class="section" id="s-creating-superusers">
<span id="s-topics-auth-creating-superusers"></span><span id="creating-superusers"></span><span id="topics-auth-creating-superusers"></span><h3>Creating superusers<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#creating-superusers" title="Permalink to this headline">¶</a></h3>
<p><a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-syncdb"><tt class="xref std std-djadmin docutils literal"><span class="pre">manage.py</span> <span class="pre">syncdb</span></tt></a> prompts you to create a superuser the
first time you run it after adding <tt class="docutils literal"><span class="pre">'django.contrib.auth'</span></tt> to your
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-INSTALLED_APPS"><tt class="xref std std-setting docutils literal"><span class="pre">INSTALLED_APPS</span></tt></a>. If you need to create a superuser at a later date,
you can use a command line utility:</p>
<div class="highlight-python"><pre>manage.py createsuperuser --username=joe --email=joe@example.com</pre>
</div>
<p>You will be prompted for a password. After you enter one, the user will be
created immediately. If you leave off the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-option---username"><tt class="xref std std-djadminopt docutils literal"><span class="pre">--username</span></tt></a> or the
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-option---email"><tt class="xref std std-djadminopt docutils literal"><span class="pre">--email</span></tt></a> options, it will prompt you for those values.</p>
<p>If you're using an older release of Django, the old way of creating a superuser
on the command line still works:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">python</span> <span class="o">/</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">django</span><span class="o">/</span><span class="n">contrib</span><span class="o">/</span><span class="n">auth</span><span class="o">/</span><span class="n">create_superuser</span><span class="o">.</span><span class="n">py</span>
</pre></div>
</div>
<p>...where <tt class="file docutils literal"><span class="pre">/path/to</span></tt> is the path to the Django codebase on your
filesystem. The <tt class="docutils literal"><span class="pre">manage.py</span></tt> command is preferred because it figures out the
correct path and environment for you.</p>
</div>
<div class="section" id="s-storing-additional-information-about-users">
<span id="s-auth-profiles"></span><span id="storing-additional-information-about-users"></span><span id="auth-profiles"></span><h3>Storing additional information about users<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users" title="Permalink to this headline">¶</a></h3>
<p>If you'd like to store additional information related to your users, Django
provides a method to specify a site-specific related model -- termed a "user
profile" -- for this purpose.</p>
<p>To make use of this feature, define a model with fields for the
additional information you'd like to store, or additional methods
you'd like to have available, and also add a
<tt class="xref py py-class docutils literal"><span class="pre">OneToOneField</span></tt> named <tt class="docutils literal"><span class="pre">user</span></tt> from your model
to the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> model. This will ensure only
one instance of your model can be created for each
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a>. For example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span>

<span class="k">class</span> <span class="nc">UserProfile</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="c"># This field is required.</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">OneToOneField</span><span class="p">(</span><span class="n">User</span><span class="p">)</span>

    <span class="c"># Other fields here</span>
    <span class="n">accepted_eula</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">BooleanField</span><span class="p">()</span>
    <span class="n">favorite_animal</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">"Dragons."</span><span class="p">)</span>
</pre></div>
</div>
<p>To indicate that this model is the user profile model for a given site, fill in
the setting <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-AUTH_PROFILE_MODULE"><tt class="xref std std-setting docutils literal"><span class="pre">AUTH_PROFILE_MODULE</span></tt></a> with a string consisting of the
following items, separated by a dot:</p>
<ol class="arabic simple">
<li>The name of the application (case sensitive) in which the user
profile model is defined (in other words, the
name which was passed to <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-startapp"><tt class="xref std std-djadmin docutils literal"><span class="pre">manage.py</span> <span class="pre">startapp</span></tt></a> to create
the application).</li>
<li>The name of the model (not case sensitive) class.</li>
</ol>
<p>For example, if the profile model was a class named <tt class="docutils literal"><span class="pre">UserProfile</span></tt> and was
defined inside an application named <tt class="docutils literal"><span class="pre">accounts</span></tt>, the appropriate setting would
be:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">AUTH_PROFILE_MODULE</span> <span class="o">=</span> <span class="s">'accounts.UserProfile'</span>
</pre></div>
</div>
<p>When a user profile model has been defined and specified in this manner, each
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> object will have a method --
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.get_profile" title="django.contrib.auth.models.User.get_profile"><tt class="xref py py-class docutils literal"><span class="pre">get_profile()</span></tt></a> -- which returns the
instance of the user profile model associated with that
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a>.</p>
<p>The method <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.get_profile" title="django.contrib.auth.models.User.get_profile"><tt class="xref py py-class docutils literal"><span class="pre">get_profile()</span></tt></a>
does not create a profile if one does not exist. You need to register a handler
for the User model's <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/signals/#django.db.models.signals.post_save" title="django.db.models.signals.post_save"><tt class="xref py py-attr docutils literal"><span class="pre">django.db.models.signals.post_save</span></tt></a> signal and, in
the handler, if <tt class="docutils literal"><span class="pre">created</span></tt> is <tt class="xref docutils literal"><span class="pre">True</span></tt>, create the associated user profile:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="c"># in models.py</span>

<span class="kn">from</span> <span class="nn">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span>
<span class="kn">from</span> <span class="nn">django.db.models.signals</span> <span class="kn">import</span> <span class="n">post_save</span>

<span class="c"># definition of UserProfile from above</span>
<span class="c"># ...</span>

<span class="k">def</span> <span class="nf">create_user_profile</span><span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">instance</span><span class="p">,</span> <span class="n">created</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">created</span><span class="p">:</span>
        <span class="n">UserProfile</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">user</span><span class="o">=</span><span class="n">instance</span><span class="p">)</span>

<span class="n">post_save</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">create_user_profile</span><span class="p">,</span> <span class="n">sender</span><span class="o">=</span><span class="n">User</span><span class="p">)</span>
</pre></div>
</div>
<div class="admonition-see-also admonition seealso">
<p class="first admonition-title">See also</p>
<p class="last"><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/signals/"><em>Signals</em></a> for more information on Django's signal
dispatcher.</p>
</div>
</div>
</div>
<div class="section" id="s-authentication-in-web-requests">
<span id="authentication-in-web-requests"></span><h2>Authentication in Web requests<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#authentication-in-web-requests" title="Permalink to this headline">¶</a></h2>
<p>Until now, this document has dealt with the low-level APIs for manipulating
authentication-related objects. On a higher level, Django can hook this
authentication framework into its system of
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest" title="django.http.HttpRequest"><tt class="xref py py-class docutils literal"><span class="pre">request</span> <span class="pre">objects</span></tt></a>.</p>
<p>First, install the
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/middleware/#django.contrib.sessions.middleware.SessionMiddleware" title="django.contrib.sessions.middleware.SessionMiddleware"><tt class="xref py py-class docutils literal"><span class="pre">SessionMiddleware</span></tt></a> and
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/middleware/#django.contrib.auth.middleware.AuthenticationMiddleware" title="django.contrib.auth.middleware.AuthenticationMiddleware"><tt class="xref py py-class docutils literal"><span class="pre">AuthenticationMiddleware</span></tt></a>
middlewares by adding them to your <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-MIDDLEWARE_CLASSES"><tt class="xref std std-setting docutils literal"><span class="pre">MIDDLEWARE_CLASSES</span></tt></a> setting. See
the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/http/sessions/"><em>session documentation</em></a> for more information.</p>
<p>Once you have those middlewares installed, you'll be able to access
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest.user" title="django.http.HttpRequest.user"><tt class="xref py py-attr docutils literal"><span class="pre">request.user</span></tt></a> in views.
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest.user" title="django.http.HttpRequest.user"><tt class="xref py py-attr docutils literal"><span class="pre">request.user</span></tt></a> will give you a
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> object representing the currently
logged-in user. If a user isn't currently logged in,
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest.user" title="django.http.HttpRequest.user"><tt class="xref py py-attr docutils literal"><span class="pre">request.user</span></tt></a> will be set to an instance
of <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.AnonymousUser" title="django.contrib.auth.models.AnonymousUser"><tt class="xref py py-class docutils literal"><span class="pre">AnonymousUser</span></tt></a> (see the previous
section). You can tell them apart with
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.is_authenticated" title="django.contrib.auth.models.User.is_authenticated"><tt class="xref py py-meth docutils literal"><span class="pre">is_authenticated()</span></tt></a>, like so:</p>
<div class="highlight-python"><pre>if request.user.is_authenticated():
    # Do something for authenticated users.
else:
    # Do something for anonymous users.</pre>
</div>
<div class="section" id="s-how-to-log-a-user-in">
<span id="s-id1"></span><span id="how-to-log-a-user-in"></span><span id="id1"></span><h3>How to log a user in<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#how-to-log-a-user-in" title="Permalink to this headline">¶</a></h3>
<p>Django provides two functions in <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#module-django.contrib.auth" title="django.contrib.auth: Django&#39;s authentication framework."><tt class="xref py py-mod docutils literal"><span class="pre">django.contrib.auth</span></tt></a>:
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.authenticate" title="django.contrib.auth.authenticate"><tt class="xref py py-func docutils literal"><span class="pre">authenticate()</span></tt></a> and
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.login" title="django.contrib.auth.login"><tt class="xref py py-func docutils literal"><span class="pre">login()</span></tt></a>.</p>
<dl class="function">
<dt id="django.contrib.auth.authenticate">
<tt class="descname">authenticate</tt>()<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.authenticate" title="Permalink to this definition">¶</a></dt>
<dd><p>To authenticate a given username and password, use
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.authenticate" title="django.contrib.auth.authenticate"><tt class="xref py py-func docutils literal"><span class="pre">authenticate()</span></tt></a>. It takes two keyword
arguments, <tt class="docutils literal"><span class="pre">username</span></tt> and <tt class="docutils literal"><span class="pre">password</span></tt>, and it returns a
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> object if the password is valid
for the given username. If the password is invalid,
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.authenticate" title="django.contrib.auth.authenticate"><tt class="xref py py-func docutils literal"><span class="pre">authenticate()</span></tt></a> returns <tt class="xref docutils literal"><span class="pre">None</span></tt>. Example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.contrib.auth</span> <span class="kn">import</span> <span class="n">authenticate</span>
<span class="n">user</span> <span class="o">=</span> <span class="n">authenticate</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="s">'john'</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="s">'secret'</span><span class="p">)</span>
<span class="k">if</span> <span class="n">user</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">is_active</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"You provided a correct username and password!"</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">"Your account has been disabled!"</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span> <span class="s">"Your username and password were incorrect."</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="django.contrib.auth.login">
<tt class="descname">login</tt>()<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.login" title="Permalink to this definition">¶</a></dt>
<dd><p>To log a user in, in a view, use <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.login" title="django.contrib.auth.login"><tt class="xref py py-func docutils literal"><span class="pre">login()</span></tt></a>. It
takes an <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest" title="django.http.HttpRequest"><tt class="xref py py-class docutils literal"><span class="pre">HttpRequest</span></tt></a> object and a
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> object.
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.login" title="django.contrib.auth.login"><tt class="xref py py-func docutils literal"><span class="pre">login()</span></tt></a> saves the user's ID in the session,
using Django's session framework, so, as mentioned above, you'll need to
make sure to have the session middleware installed.</p>
<p>Note that data set during the anonymous session is retained when the user
logs in.</p>
<p>This example shows how you might use both
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.authenticate" title="django.contrib.auth.authenticate"><tt class="xref py py-func docutils literal"><span class="pre">authenticate()</span></tt></a> and
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.login" title="django.contrib.auth.login"><tt class="xref py py-func docutils literal"><span class="pre">login()</span></tt></a>:</p>
<div class="highlight-python"><pre>from django.contrib.auth import authenticate, login

def my_view(request):
    username = request.POST['username']
    password = request.POST['password']
    user = authenticate(username=username, password=password)
    if user is not None:
        if user.is_active:
            login(request, user)
            # Redirect to a success page.
        else:
            # Return a 'disabled account' error message
    else:
        # Return an 'invalid login' error message.</pre>
</div>
</dd></dl>

<div class="admonition-calling-authenticate-first admonition ">
<p class="first admonition-title">Calling <tt class="docutils literal"><span class="pre">authenticate()</span></tt> first</p>
<p class="last">When you're manually logging a user in, you <em>must</em> call
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.authenticate" title="django.contrib.auth.authenticate"><tt class="xref py py-func docutils literal"><span class="pre">authenticate()</span></tt></a> before you call
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.login" title="django.contrib.auth.login"><tt class="xref py py-func docutils literal"><span class="pre">login()</span></tt></a>.
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.authenticate" title="django.contrib.auth.authenticate"><tt class="xref py py-func docutils literal"><span class="pre">authenticate()</span></tt></a>
sets an attribute on the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> noting
which authentication backend successfully authenticated that user (see the
<a class="reference external" href="https://docs.djangoproject.com/en/dev/topics/auth/#other-authentication-sources">backends documentation</a> for details), and this information is needed
later during the login process.</p>
</div>
</div>
<div class="section" id="s-manually-managing-a-user-s-password">
<span id="manually-managing-a-user-s-password"></span><h3>Manually managing a user's password<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#manually-managing-a-user-s-password" title="Permalink to this headline">¶</a></h3>
<div class="versionadded">
<span class="title">New in Django 1.4:</span> The <tt class="xref py py-mod docutils literal"><span class="pre">django.contrib.auth.hashers</span></tt> module provides a set of functions
to create and validate hashed password. You can use them independently
from the <tt class="docutils literal"><span class="pre">User</span></tt> model.</div>
<dl class="function">
<dt id="django.contrib.auth.hashers.check_password">
<tt class="descname">check_password</tt>()<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.hashers.check_password" title="Permalink to this definition">¶</a></dt>
<dd><div class="versionadded">
<span class="title">New in Django 1.4:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.4/"><em>Please see the release notes</em></a></div>
<p>If you'd like to manually authenticate a user by comparing a plain-text
password to the hashed password in the database, use the convenience
function <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.hashers.check_password" title="django.contrib.auth.hashers.check_password"><tt class="xref py py-func docutils literal"><span class="pre">django.contrib.auth.hashers.check_password()</span></tt></a>. It takes two
arguments: the plain-text password to check, and the full value of a
user's <tt class="docutils literal"><span class="pre">password</span></tt> field in the database to check against, and returns
<tt class="xref docutils literal"><span class="pre">True</span></tt> if they match, <tt class="xref docutils literal"><span class="pre">False</span></tt> otherwise.</p>
</dd></dl>

<dl class="function">
<dt id="django.contrib.auth.hashers.make_password">
<tt class="descname">make_password</tt>()<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.hashers.make_password" title="Permalink to this definition">¶</a></dt>
<dd><div class="versionadded">
<span class="title">New in Django 1.4:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.4/"><em>Please see the release notes</em></a></div>
<p>Creates a hashed password in the format used by this application. It takes
two arguments: hashing algorithm to use and the password in plain-text.
Currently supported algorithms are: <tt class="docutils literal"><span class="pre">'sha1'</span></tt>, <tt class="docutils literal"><span class="pre">'md5'</span></tt> and <tt class="docutils literal"><span class="pre">'crypt'</span></tt>
if you have the <tt class="docutils literal"><span class="pre">crypt</span></tt> library installed. If the second argument is
<tt class="xref docutils literal"><span class="pre">None</span></tt>, an unusable password is returned (a one that will be never
accepted by <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.hashers.check_password" title="django.contrib.auth.hashers.check_password"><tt class="xref py py-func docutils literal"><span class="pre">django.contrib.auth.hashers.check_password()</span></tt></a>).</p>
</dd></dl>

<dl class="function">
<dt id="django.contrib.auth.hashers.is_password_usable">
<tt class="descname">is_password_usable</tt>()<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.hashers.is_password_usable" title="Permalink to this definition">¶</a></dt>
<dd><div class="versionadded">
<span class="title">New in Django 1.4:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.4/"><em>Please see the release notes</em></a></div>
<p>Checks if the given string is a hashed password that has a chance
of being verified against <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.hashers.check_password" title="django.contrib.auth.hashers.check_password"><tt class="xref py py-func docutils literal"><span class="pre">django.contrib.auth.hashers.check_password()</span></tt></a>.</p>
</dd></dl>

</div>
<div class="section" id="s-how-to-log-a-user-out">
<span id="how-to-log-a-user-out"></span><h3>How to log a user out<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#how-to-log-a-user-out" title="Permalink to this headline">¶</a></h3>
<dl class="function">
<dt id="django.contrib.auth.logout">
<tt class="descname">logout</tt>()<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.logout" title="Permalink to this definition">¶</a></dt>
<dd><p>To log out a user who has been logged in via
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.login" title="django.contrib.auth.login"><tt class="xref py py-func docutils literal"><span class="pre">django.contrib.auth.login()</span></tt></a>, use
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.logout" title="django.contrib.auth.logout"><tt class="xref py py-func docutils literal"><span class="pre">django.contrib.auth.logout()</span></tt></a> within your view. It takes an
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest" title="django.http.HttpRequest"><tt class="xref py py-class docutils literal"><span class="pre">HttpRequest</span></tt></a> object and has no return value.
Example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.contrib.auth</span> <span class="kn">import</span> <span class="n">logout</span>

<span class="k">def</span> <span class="nf">logout_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">logout</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
    <span class="c"># Redirect to a success page.</span>
</pre></div>
</div>
<p>Note that <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.logout" title="django.contrib.auth.logout"><tt class="xref py py-func docutils literal"><span class="pre">logout()</span></tt></a> doesn't throw any errors if
the user wasn't logged in.</p>
<p>When you call <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.logout" title="django.contrib.auth.logout"><tt class="xref py py-func docutils literal"><span class="pre">logout()</span></tt></a>, the session data for
the current request is completely cleaned out. All existing data is
removed. This is to prevent another person from using the same Web browser
to log in and have access to the previous user's session data. If you want
to put anything into the session that will be available to the user
immediately after logging out, do that <em>after</em> calling
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.logout" title="django.contrib.auth.logout"><tt class="xref py py-func docutils literal"><span class="pre">django.contrib.auth.logout()</span></tt></a>.</p>
</dd></dl>

</div>
<div class="section" id="s-login-and-logout-signals">
<span id="s-topics-auth-signals"></span><span id="login-and-logout-signals"></span><span id="topics-auth-signals"></span><h3>Login and logout signals<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#login-and-logout-signals" title="Permalink to this headline">¶</a></h3>
<div class="versionadded">
<span class="title">New in Django 1.3:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.3/"><em>Please see the release notes</em></a></div>
<p>The auth framework uses two <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/signals/"><em>signals</em></a> that can be used
for notification when a user logs in or out.</p>
<dl class="data">
<dt id="django.contrib.auth.django.contrib.auth.signals.user_logged_in">
<tt class="descclassname">django.contrib.auth.signals.</tt><tt class="descname">user_logged_in</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.django.contrib.auth.signals.user_logged_in" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<p>Sent when a user logs in successfully.</p>
<p>Arguments sent with this signal:</p>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">sender</span></tt></dt>
<dd>As above: the class of the user that just logged in.</dd>
<dt><tt class="docutils literal"><span class="pre">request</span></tt></dt>
<dd>The current <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest" title="django.http.HttpRequest"><tt class="xref py py-class docutils literal"><span class="pre">HttpRequest</span></tt></a> instance.</dd>
<dt><tt class="docutils literal"><span class="pre">user</span></tt></dt>
<dd>The user instance that just logged in.</dd>
</dl>
<dl class="data">
<dt id="django.contrib.auth.django.contrib.auth.signals.user_logged_out">
<tt class="descclassname">django.contrib.auth.signals.</tt><tt class="descname">user_logged_out</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.django.contrib.auth.signals.user_logged_out" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<p>Sent when the logout method is called.</p>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">sender</span></tt></dt>
<dd>As above: the class of the user that just logged out or <tt class="xref docutils literal"><span class="pre">None</span></tt>
if the user was not authenticated.</dd>
<dt><tt class="docutils literal"><span class="pre">request</span></tt></dt>
<dd>The current <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest" title="django.http.HttpRequest"><tt class="xref py py-class docutils literal"><span class="pre">HttpRequest</span></tt></a> instance.</dd>
<dt><tt class="docutils literal"><span class="pre">user</span></tt></dt>
<dd>The user instance that just logged out or <tt class="xref docutils literal"><span class="pre">None</span></tt> if the
user was not authenticated.</dd>
</dl>
</div>
<div class="section" id="s-limiting-access-to-logged-in-users">
<span id="limiting-access-to-logged-in-users"></span><h3>Limiting access to logged-in users<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#limiting-access-to-logged-in-users" title="Permalink to this headline">¶</a></h3>
<div class="section" id="s-the-raw-way">
<span id="the-raw-way"></span><h4>The raw way<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#the-raw-way" title="Permalink to this headline">¶</a></h4>
<p>The simple, raw way to limit access to pages is to check
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.is_authenticated" title="django.contrib.auth.models.User.is_authenticated"><tt class="xref py py-meth docutils literal"><span class="pre">request.user.is_authenticated()</span></tt></a> and either redirect to a
login page:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponseRedirect</span>

<span class="k">def</span> <span class="nf">my_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">request</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">is_authenticated</span><span class="p">():</span>
        <span class="k">return</span> <span class="n">HttpResponseRedirect</span><span class="p">(</span><span class="s">'/login/?next=</span><span class="si">%s</span><span class="s">'</span> <span class="o">%</span> <span class="n">request</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
    <span class="c"># ...</span>
</pre></div>
</div>
<p>...or display an error message:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">def</span> <span class="nf">my_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">request</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">is_authenticated</span><span class="p">():</span>
        <span class="k">return</span> <span class="n">render_to_response</span><span class="p">(</span><span class="s">'myapp/login_error.html'</span><span class="p">)</span>
    <span class="c"># ...</span>
</pre></div>
</div>
</div>
<div class="section" id="s-the-login-required-decorator">
<span id="the-login-required-decorator"></span><h4>The login_required decorator<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#the-login-required-decorator" title="Permalink to this headline">¶</a></h4>
<dl class="function">
<dt id="django.contrib.auth.decorators.login_required">
<tt class="descclassname">decorators.</tt><tt class="descname">login_required</tt>(<span class="optional">[</span><em>redirect_field_name=REDIRECT_FIELD_NAME</em>, <em>login_url=None</em><span class="optional">]</span>)<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.decorators.login_required" title="Permalink to this definition">¶</a></dt>
<dd><p>As a shortcut, you can use the convenient
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.decorators.login_required" title="django.contrib.auth.decorators.login_required"><tt class="xref py py-func docutils literal"><span class="pre">login_required()</span></tt></a> decorator:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.contrib.auth.decorators</span> <span class="kn">import</span> <span class="n">login_required</span>

<span class="nd">@login_required</span>
<span class="k">def</span> <span class="nf">my_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="o">...</span>
</pre></div>
</div>
<p><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.decorators.login_required" title="django.contrib.auth.decorators.login_required"><tt class="xref py py-func docutils literal"><span class="pre">login_required()</span></tt></a> does the following:</p>
<ul class="simple">
<li>If the user isn't logged in, redirect to
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-LOGIN_URL"><tt class="xref std std-setting docutils literal"><span class="pre">settings.LOGIN_URL</span></tt></a>, passing the current absolute
path in the query string. Example: <tt class="docutils literal"><span class="pre">/accounts/login/?next=/polls/3/</span></tt>.</li>
<li>If the user is logged in, execute the view normally. The view code is
free to assume the user is logged in.</li>
</ul>
<p>By default, the path that the user should be redirected to upon
successful authentication is stored in a query string parameter called
<tt class="docutils literal"><span class="pre">"next"</span></tt>. If you would prefer to use a different name for this parameter,
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.decorators.login_required" title="django.contrib.auth.decorators.login_required"><tt class="xref py py-func docutils literal"><span class="pre">login_required()</span></tt></a> takes an
optional <tt class="docutils literal"><span class="pre">redirect_field_name</span></tt> parameter:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.contrib.auth.decorators</span> <span class="kn">import</span> <span class="n">login_required</span>

<span class="nd">@login_required</span><span class="p">(</span><span class="n">redirect_field_name</span><span class="o">=</span><span class="s">'my_redirect_field'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">my_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="o">...</span>
</pre></div>
</div>
<p>Note that if you provide a value to <tt class="docutils literal"><span class="pre">redirect_field_name</span></tt>, you will most
likely need to customize your login template as well, since the template
context variable which stores the redirect path will use the value of
<tt class="docutils literal"><span class="pre">redirect_field_name</span></tt> as its key rather than <tt class="docutils literal"><span class="pre">"next"</span></tt> (the default).</p>
<div class="versionadded">
<span class="title">New in Django 1.3:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.3/"><em>Please see the release notes</em></a></div>
<p><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.decorators.login_required" title="django.contrib.auth.decorators.login_required"><tt class="xref py py-func docutils literal"><span class="pre">login_required()</span></tt></a> also takes an
optional <tt class="docutils literal"><span class="pre">login_url</span></tt> parameter. Example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.contrib.auth.decorators</span> <span class="kn">import</span> <span class="n">login_required</span>

<span class="nd">@login_required</span><span class="p">(</span><span class="n">login_url</span><span class="o">=</span><span class="s">'/accounts/login/'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">my_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="o">...</span>
</pre></div>
</div>
<p>Note that if you don't specify the <tt class="docutils literal"><span class="pre">login_url</span></tt> parameter, you'll need to map
the appropriate Django view to <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-LOGIN_URL"><tt class="xref std std-setting docutils literal"><span class="pre">settings.LOGIN_URL</span></tt></a>. For
example, using the defaults, add the following line to your URLconf:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="p">(</span><span class="s">r'^accounts/login/$'</span><span class="p">,</span> <span class="s">'django.contrib.auth.views.login'</span><span class="p">),</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="django.contrib.auth.views.login">
<tt class="descclassname">views.</tt><tt class="descname">login</tt>(<em>request</em><span class="optional">[</span>, <em>template_name</em>, <em>redirect_field_name</em>, <em>authentication_form</em><span class="optional">]</span>)<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.views.login" title="Permalink to this definition">¶</a></dt>
<dd><p><strong>URL name:</strong> <tt class="docutils literal"><span class="pre">login</span></tt></p>
<p>See <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/http/urls/"><em>the URL documentation</em></a> for details on using
named URL patterns.</p>
<p>Here's what <tt class="docutils literal"><span class="pre">django.contrib.auth.views.login</span></tt> does:</p>
<ul class="simple">
<li>If called via <tt class="docutils literal"><span class="pre">GET</span></tt>, it displays a login form that POSTs to the
same URL. More on this in a bit.</li>
<li>If called via <tt class="docutils literal"><span class="pre">POST</span></tt>, it tries to log the user in. If login is
successful, the view redirects to the URL specified in <tt class="docutils literal"><span class="pre">next</span></tt>. If
<tt class="docutils literal"><span class="pre">next</span></tt> isn't provided, it redirects to
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-LOGIN_REDIRECT_URL"><tt class="xref std std-setting docutils literal"><span class="pre">settings.LOGIN_REDIRECT_URL</span></tt></a> (which
defaults to <tt class="docutils literal"><span class="pre">/accounts/profile/</span></tt>). If login isn't successful, it
redisplays the login form.</li>
</ul>
<p>It's your responsibility to provide the login form in a template called
<tt class="docutils literal"><span class="pre">registration/login.html</span></tt> by default. This template gets passed four
template context variables:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">form</span></tt>: A <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/forms/api/#django.forms.Form" title="django.forms.Form"><tt class="xref py py-class docutils literal"><span class="pre">Form</span></tt></a> object representing the login
form. See the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/forms/"><em>forms documentation</em></a> for
more on <tt class="docutils literal"><span class="pre">Form</span></tt> objects.</li>
<li><tt class="docutils literal"><span class="pre">next</span></tt>: The URL to redirect to after successful login. This may
contain a query string, too.</li>
<li><tt class="docutils literal"><span class="pre">site</span></tt>: The current <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/contrib/sites/#django.contrib.sites.models.Site" title="django.contrib.sites.models.Site"><tt class="xref py py-class docutils literal"><span class="pre">Site</span></tt></a>,
according to the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-SITE_ID"><tt class="xref std std-setting docutils literal"><span class="pre">SITE_ID</span></tt></a> setting. If you don't have the
site framework installed, this will be set to an instance of
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/contrib/sites/#django.contrib.sites.models.RequestSite" title="django.contrib.sites.models.RequestSite"><tt class="xref py py-class docutils literal"><span class="pre">RequestSite</span></tt></a>, which derives the
site name and domain from the current
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest" title="django.http.HttpRequest"><tt class="xref py py-class docutils literal"><span class="pre">HttpRequest</span></tt></a>.</li>
<li><tt class="docutils literal"><span class="pre">site_name</span></tt>: An alias for <tt class="docutils literal"><span class="pre">site.name</span></tt>. If you don't have the site
framework installed, this will be set to the value of
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest.META" title="django.http.HttpRequest.META"><tt class="xref py py-attr docutils literal"><span class="pre">request.META['SERVER_NAME']</span></tt></a>.
For more on sites, see <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/contrib/sites/"><em>The "sites" framework</em></a>.</li>
</ul>
<p>If you'd prefer not to call the template <tt class="file docutils literal"><span class="pre">registration/login.html</span></tt>,
you can pass the <tt class="docutils literal"><span class="pre">template_name</span></tt> parameter via the extra arguments to
the view in your URLconf. For example, this URLconf line would use
<tt class="file docutils literal"><span class="pre">myapp/login.html</span></tt> instead:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="p">(</span><span class="s">r'^accounts/login/$'</span><span class="p">,</span> <span class="s">'django.contrib.auth.views.login'</span><span class="p">,</span> <span class="p">{</span><span class="s">'template_name'</span><span class="p">:</span> <span class="s">'myapp/login.html'</span><span class="p">}),</span>
</pre></div>
</div>
<p>You can also specify the name of the <tt class="docutils literal"><span class="pre">GET</span></tt> field which contains the URL
to redirect to after login by passing <tt class="docutils literal"><span class="pre">redirect_field_name</span></tt> to the view.
By default, the field is called <tt class="docutils literal"><span class="pre">next</span></tt>.</p>
<p>Here's a sample <tt class="file docutils literal"><span class="pre">registration/login.html</span></tt> template you can use as a
starting point. It assumes you have a <tt class="file docutils literal"><span class="pre">base.html</span></tt> template that
defines a <tt class="docutils literal"><span class="pre">content</span></tt> block:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">extends</span> <span class="s2">"base.html"</span> <span class="cp">%}</span>
<span class="cp">{%</span> <span class="k">load</span> <span class="nv">url</span> <span class="nv">from</span> <span class="nv">future</span> <span class="cp">%}</span>

<span class="cp">{%</span> <span class="k">block</span> <span class="nv">content</span> <span class="cp">%}</span>

<span class="cp">{%</span> <span class="k">if</span> <span class="nv">form.errors</span> <span class="cp">%}</span>
<span class="nt">&lt;p&gt;</span>Your username and password didn't match. Please try again.<span class="nt">&lt;/p&gt;</span>
<span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>

<span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">"post"</span> <span class="na">action=</span><span class="s">"</span><span class="cp">{%</span> <span class="k">url</span> <span class="s1">'django.contrib.auth.views.login'</span> <span class="cp">%}</span><span class="s">"</span><span class="nt">&gt;</span>
<span class="cp">{%</span> <span class="k">csrf_token</span> <span class="cp">%}</span>
<span class="nt">&lt;table&gt;</span>
<span class="nt">&lt;tr&gt;</span>
    <span class="nt">&lt;td&gt;</span><span class="cp">{{</span> <span class="nv">form.username.label_tag</span> <span class="cp">}}</span><span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;td&gt;</span><span class="cp">{{</span> <span class="nv">form.username</span> <span class="cp">}}</span><span class="nt">&lt;/td&gt;</span>
<span class="nt">&lt;/tr&gt;</span>
<span class="nt">&lt;tr&gt;</span>
    <span class="nt">&lt;td&gt;</span><span class="cp">{{</span> <span class="nv">form.password.label_tag</span> <span class="cp">}}</span><span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;td&gt;</span><span class="cp">{{</span> <span class="nv">form.password</span> <span class="cp">}}</span><span class="nt">&lt;/td&gt;</span>
<span class="nt">&lt;/tr&gt;</span>
<span class="nt">&lt;/table&gt;</span>

<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"login"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"hidden"</span> <span class="na">name=</span><span class="s">"next"</span> <span class="na">value=</span><span class="s">"</span><span class="cp">{{</span> <span class="nv">next</span> <span class="cp">}}</span><span class="s">"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/form&gt;</span>

<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span>
</pre></div>
</div>
<div class="versionadded">
<span class="title">New in Django 1.2:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.2/"><em>Please see the release notes</em></a></div>
<p>If you are using alternate authentication (see
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#authentication-backends"><em>Other authentication sources</em></a>) you can pass a custom authentication form
to the login view via the <tt class="docutils literal"><span class="pre">authentication_form</span></tt> parameter. This form must
accept a <tt class="docutils literal"><span class="pre">request</span></tt> keyword argument in its <tt class="docutils literal"><span class="pre">__init__</span></tt> method, and
provide a <tt class="docutils literal"><span class="pre">get_user</span></tt> method which returns the authenticated user object
(this method is only ever called after successful form validation).</p>
<div class="versionadded">
<span class="title">New in Django 1.4:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.4/"><em>Please see the release notes</em></a></div>
<p>The <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.views.login" title="django.contrib.auth.views.login"><tt class="xref py py-func docutils literal"><span class="pre">login()</span></tt></a> view and the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#other-built-in-views"><em>Other built-in views</em></a> now all
return a <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/template-response/#django.template.response.TemplateResponse" title="django.template.response.TemplateResponse"><tt class="xref py py-class docutils literal"><span class="pre">TemplateResponse</span></tt></a> instance,
which allows you to easily customize the response data before rendering.
For more details, see the
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/template-response/"><em>TemplateResponse documentation</em></a>.</p>
</dd></dl>

</div>
</div>
<div class="section" id="s-module-django.contrib.auth.views">
<span id="s-id2"></span><span id="s-other-built-in-views"></span><span id="module-django.contrib.auth.views"></span><span id="id2"></span><span id="other-built-in-views"></span><h3>Other built-in views<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#module-django.contrib.auth.views" title="Permalink to this headline">¶</a></h3>
<p>In addition to the <tt class="xref py py-func docutils literal"><span class="pre">login()</span></tt> view, the authentication system
includes a few other useful built-in views located in
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#module-django.contrib.auth.views" title="django.contrib.auth.views"><tt class="xref py py-mod docutils literal"><span class="pre">django.contrib.auth.views</span></tt></a>:</p>
<dl class="function">
<dt id="django.contrib.auth.views.logout">
<tt class="descname">logout</tt>(<em>request</em><span class="optional">[</span>, <em>next_page</em>, <em>template_name</em>, <em>redirect_field_name</em><span class="optional">]</span>)<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.views.logout" title="Permalink to this definition">¶</a></dt>
<dd><p>Logs a user out.</p>
<p><strong>URL name:</strong> <tt class="docutils literal"><span class="pre">logout</span></tt></p>
<p>See <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/http/urls/"><em>the URL documentation</em></a> for details on using
named URL patterns.</p>
<p><strong>Optional arguments:</strong></p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">next_page</span></tt>: The URL to redirect to after logout.</li>
<li><tt class="docutils literal"><span class="pre">template_name</span></tt>: The full name of a template to display after
logging the user out. Defaults to
<tt class="file docutils literal"><span class="pre">registration/logged_out.html</span></tt> if no argument is supplied.</li>
<li><tt class="docutils literal"><span class="pre">redirect_field_name</span></tt>: The name of a <tt class="docutils literal"><span class="pre">GET</span></tt> field containing the
URL to redirect to after log out. Overrides <tt class="docutils literal"><span class="pre">next_page</span></tt> if the given
<tt class="docutils literal"><span class="pre">GET</span></tt> parameter is passed.</li>
</ul>
<p><strong>Template context:</strong></p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">title</span></tt>: The string "Logged out", localized.</li>
<li><tt class="docutils literal"><span class="pre">site</span></tt>: The current <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/contrib/sites/#django.contrib.sites.models.Site" title="django.contrib.sites.models.Site"><tt class="xref py py-class docutils literal"><span class="pre">Site</span></tt></a>,
according to the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-SITE_ID"><tt class="xref std std-setting docutils literal"><span class="pre">SITE_ID</span></tt></a> setting. If you don't have the
site framework installed, this will be set to an instance of
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/contrib/sites/#django.contrib.sites.models.RequestSite" title="django.contrib.sites.models.RequestSite"><tt class="xref py py-class docutils literal"><span class="pre">RequestSite</span></tt></a>, which derives the
site name and domain from the current
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest" title="django.http.HttpRequest"><tt class="xref py py-class docutils literal"><span class="pre">HttpRequest</span></tt></a>.</li>
<li><tt class="docutils literal"><span class="pre">site_name</span></tt>: An alias for <tt class="docutils literal"><span class="pre">site.name</span></tt>. If you don't have the site
framework installed, this will be set to the value of
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest.META" title="django.http.HttpRequest.META"><tt class="xref py py-attr docutils literal"><span class="pre">request.META['SERVER_NAME']</span></tt></a>.
For more on sites, see <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/contrib/sites/"><em>The "sites" framework</em></a>.</li>
</ul>
</dd></dl>

<dl class="function">
<dt id="django.contrib.auth.views.logout_then_login">
<tt class="descname">logout_then_login</tt>(<em>request</em><span class="optional">[</span>, <em>login_url</em><span class="optional">]</span>)<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.views.logout_then_login" title="Permalink to this definition">¶</a></dt>
<dd><p>Logs a user out, then redirects to the login page.</p>
<p><strong>URL name:</strong> No default URL provided</p>
<p><strong>Optional arguments:</strong></p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">login_url</span></tt>: The URL of the login page to redirect to.
Defaults to <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-LOGIN_URL"><tt class="xref std std-setting docutils literal"><span class="pre">settings.LOGIN_URL</span></tt></a> if not supplied.</li>
</ul>
</dd></dl>

<dl class="function">
<dt id="django.contrib.auth.views.password_change">
<tt class="descname">password_change</tt>(<em>request</em><span class="optional">[</span>, <em>template_name</em>, <em>post_change_redirect</em>, <em>password_change_form</em><span class="optional">]</span>)<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.views.password_change" title="Permalink to this definition">¶</a></dt>
<dd><p>Allows a user to change their password.</p>
<p><strong>URL name:</strong> <tt class="docutils literal"><span class="pre">password_change</span></tt></p>
<p><strong>Optional arguments:</strong></p>
<ul>
<li><p class="first"><tt class="docutils literal"><span class="pre">template_name</span></tt>: The full name of a template to use for
displaying the password change form. Defaults to
<tt class="file docutils literal"><span class="pre">registration/password_change_form.html</span></tt> if not supplied.</p>
</li>
<li><p class="first"><tt class="docutils literal"><span class="pre">post_change_redirect</span></tt>: The URL to redirect to after a successful
password change.</p>
<div class="versionadded">
<span class="title">New in Django 1.2:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.2/"><em>Please see the release notes</em></a></div>
</li>
<li><p class="first"><tt class="docutils literal"><span class="pre">password_change_form</span></tt>: A custom "change password" form which must
accept a <tt class="docutils literal"><span class="pre">user</span></tt> keyword argument. The form is responsible for
actually changing the user's password. Defaults to
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.forms.PasswordChangeForm" title="django.contrib.auth.forms.PasswordChangeForm"><tt class="xref py py-class docutils literal"><span class="pre">PasswordChangeForm</span></tt></a>.</p>
</li>
</ul>
<p><strong>Template context:</strong></p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">form</span></tt>: The password change form (see <tt class="docutils literal"><span class="pre">password_change_form</span></tt> above).</li>
</ul>
</dd></dl>

<dl class="function">
<dt id="django.contrib.auth.views.password_change_done">
<tt class="descname">password_change_done</tt>(<em>request</em><span class="optional">[</span>, <em>template_name</em><span class="optional">]</span>)<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.views.password_change_done" title="Permalink to this definition">¶</a></dt>
<dd><p>The page shown after a user has changed their password.</p>
<p><strong>URL name:</strong> <tt class="docutils literal"><span class="pre">password_change_done</span></tt></p>
<p><strong>Optional arguments:</strong></p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">template_name</span></tt>: The full name of a template to use.
Defaults to <tt class="file docutils literal"><span class="pre">registration/password_change_done.html</span></tt> if not
supplied.</li>
</ul>
</dd></dl>

<dl class="function">
<dt id="django.contrib.auth.views.password_reset">
<tt class="descname">password_reset</tt>(<em>request</em><span class="optional">[</span>, <em>is_admin_site</em>, <em>template_name</em>, <em>email_template_name</em>, <em>password_reset_form</em>, <em>token_generator</em>, <em>post_reset_redirect</em>, <em>from_email</em><span class="optional">]</span>)<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.views.password_reset" title="Permalink to this definition">¶</a></dt>
<dd><p>Allows a user to reset their password by generating a one-time use link
that can be used to reset the password, and sending that link to the
user's registered email address.</p>
<div class="versionchanged">
<span class="title">Changed in Django 1.3:</span> The <tt class="docutils literal"><span class="pre">from_email</span></tt> argument was added.</div>
<div class="versionchanged">
<span class="title">Changed in Django 1.4:</span> Users flagged with an unusable password (see
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.set_unusable_password" title="django.contrib.auth.models.User.set_unusable_password"><tt class="xref py py-meth docutils literal"><span class="pre">set_unusable_password()</span></tt></a>
will not be able to request a password reset to prevent misuse
when using an external authentication source like LDAP.</div>
<p><strong>URL name:</strong> <tt class="docutils literal"><span class="pre">password_reset</span></tt></p>
<p><strong>Optional arguments:</strong></p>
<ul>
<li><p class="first"><tt class="docutils literal"><span class="pre">template_name</span></tt>: The full name of a template to use for
displaying the password reset form. Defaults to
<tt class="file docutils literal"><span class="pre">registration/password_reset_form.html</span></tt> if not supplied.</p>
</li>
<li><p class="first"><tt class="docutils literal"><span class="pre">email_template_name</span></tt>: The full name of a template to use for
generating the email with the new password. Defaults to
<tt class="file docutils literal"><span class="pre">registration/password_reset_email.html</span></tt> if not supplied.</p>
</li>
<li><p class="first"><tt class="docutils literal"><span class="pre">subject_template_name</span></tt>: The full name of a template to use for
the subject of the email with the new password. Defaults
to <tt class="file docutils literal"><span class="pre">registration/password_reset_subject.txt</span></tt> if not supplied.</p>
<div class="versionadded">
<span class="title">New in Django 1.4:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.4/"><em>Please see the release notes</em></a></div>
</li>
<li><p class="first"><tt class="docutils literal"><span class="pre">password_reset_form</span></tt>: Form that will be used to set the password.
Defaults to <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.forms.PasswordResetForm" title="django.contrib.auth.forms.PasswordResetForm"><tt class="xref py py-class docutils literal"><span class="pre">PasswordResetForm</span></tt></a>.</p>
</li>
<li><p class="first"><tt class="docutils literal"><span class="pre">token_generator</span></tt>: Instance of the class to check the password. This
will default to <tt class="docutils literal"><span class="pre">default_token_generator</span></tt>, it's an instance of
<tt class="docutils literal"><span class="pre">django.contrib.auth.tokens.PasswordResetTokenGenerator</span></tt>.</p>
</li>
<li><p class="first"><tt class="docutils literal"><span class="pre">post_reset_redirect</span></tt>: The URL to redirect to after a successful
password change.</p>
</li>
<li><p class="first"><tt class="docutils literal"><span class="pre">from_email</span></tt>: A valid email address. By default Django uses
the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-DEFAULT_FROM_EMAIL"><tt class="xref std std-setting docutils literal"><span class="pre">DEFAULT_FROM_EMAIL</span></tt></a>.</p>
</li>
</ul>
<p><strong>Template context:</strong></p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">form</span></tt>: The form (see <tt class="docutils literal"><span class="pre">password_reset_form</span></tt> above) for resetting
the user's password.</li>
</ul>
<p><strong>Email template context:</strong></p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">email</span></tt>: An alias for <tt class="docutils literal"><span class="pre">user.email</span></tt></li>
<li><tt class="docutils literal"><span class="pre">user</span></tt>: The current <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a>,
according to the <tt class="docutils literal"><span class="pre">email</span></tt> form field. Only active users are able to
reset their passwords (<tt class="docutils literal"><span class="pre">User.is_active</span> <span class="pre">is</span> <span class="pre">True</span></tt>).</li>
<li><tt class="docutils literal"><span class="pre">site_name</span></tt>: An alias for <tt class="docutils literal"><span class="pre">site.name</span></tt>. If you don't have the site
framework installed, this will be set to the value of
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest.META" title="django.http.HttpRequest.META"><tt class="xref py py-attr docutils literal"><span class="pre">request.META['SERVER_NAME']</span></tt></a>.
For more on sites, see <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/contrib/sites/"><em>The "sites" framework</em></a>.</li>
<li><tt class="docutils literal"><span class="pre">domain</span></tt>: An alias for <tt class="docutils literal"><span class="pre">site.domain</span></tt>. If you don't have the site
framework installed, this will be set to the value of
<tt class="docutils literal"><span class="pre">request.get_host()</span></tt>.</li>
<li><tt class="docutils literal"><span class="pre">protocol</span></tt>: http or https</li>
<li><tt class="docutils literal"><span class="pre">uid</span></tt>: The user's id encoded in base 36.</li>
<li><tt class="docutils literal"><span class="pre">token</span></tt>: Token to check that the password is valid.</li>
</ul>
<p>Sample <tt class="docutils literal"><span class="pre">registration/password_reset_email.html</span></tt> (email body template):</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">load</span> <span class="nv">url</span> <span class="nv">from</span> <span class="nv">future</span> <span class="cp">%}</span>
Someone asked for password reset for email <span class="cp">{{</span> <span class="nv">email</span> <span class="cp">}}</span>. Follow the link below:
<span class="cp">{{</span> <span class="nv">protocol</span><span class="cp">}}</span>://<span class="cp">{{</span> <span class="nv">site_name</span> <span class="cp">}}{%</span> <span class="k">url</span> <span class="s1">'auth_password_reset_confirm'</span> <span class="nv">uidb36</span><span class="o">=</span><span class="nv">uid</span> <span class="nv">token</span><span class="o">=</span><span class="nv">token</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>The same template context is used for subject template. Subject must be
single line plain text string.</p>
</dd></dl>

<dl class="function">
<dt id="django.contrib.auth.views.password_reset_done">
<tt class="descname">password_reset_done</tt>(<em>request</em><span class="optional">[</span>, <em>template_name</em><span class="optional">]</span>)<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.views.password_reset_done" title="Permalink to this definition">¶</a></dt>
<dd><p>The page shown after a user has been emailed a link to reset their
password. This view is called by default if the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.views.password_reset" title="django.contrib.auth.views.password_reset"><tt class="xref py py-func docutils literal"><span class="pre">password_reset()</span></tt></a> view
doesn't have an explicit <tt class="docutils literal"><span class="pre">post_reset_redirect</span></tt> URL set.</p>
<p><strong>URL name:</strong> <tt class="docutils literal"><span class="pre">password_reset_done</span></tt></p>
<p><strong>Optional arguments:</strong></p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">template_name</span></tt>: The full name of a template to use.
Defaults to <tt class="file docutils literal"><span class="pre">registration/password_reset_done.html</span></tt> if not
supplied.</li>
</ul>
</dd></dl>

<dl class="function">
<dt id="django.contrib.auth.views.password_reset_confirm">
<tt class="descname">password_reset_confirm</tt>(<em>request</em><span class="optional">[</span>, <em>uidb36</em>, <em>token</em>, <em>template_name</em>, <em>token_generator</em>, <em>set_password_form</em>, <em>post_reset_redirect</em><span class="optional">]</span>)<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.views.password_reset_confirm" title="Permalink to this definition">¶</a></dt>
<dd><p>Presents a form for entering a new password.</p>
<p><strong>URL name:</strong> <tt class="docutils literal"><span class="pre">password_reset_confirm</span></tt></p>
<p><strong>Optional arguments:</strong></p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">uidb36</span></tt>: The user's id encoded in base 36. Defaults to <tt class="xref docutils literal"><span class="pre">None</span></tt>.</li>
<li><tt class="docutils literal"><span class="pre">token</span></tt>: Token to check that the password is valid. Defaults to
<tt class="xref docutils literal"><span class="pre">None</span></tt>.</li>
<li><tt class="docutils literal"><span class="pre">template_name</span></tt>: The full name of a template to display the confirm
password view. Default value is <tt class="file docutils literal"><span class="pre">registration/password_reset_confirm.html</span></tt>.</li>
<li><tt class="docutils literal"><span class="pre">token_generator</span></tt>: Instance of the class to check the password. This
will default to <tt class="docutils literal"><span class="pre">default_token_generator</span></tt>, it's an instance of
<tt class="docutils literal"><span class="pre">django.contrib.auth.tokens.PasswordResetTokenGenerator</span></tt>.</li>
<li><tt class="docutils literal"><span class="pre">set_password_form</span></tt>: Form that will be used to set the password.
Defaults to <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.forms.SetPasswordForm" title="django.contrib.auth.forms.SetPasswordForm"><tt class="xref py py-class docutils literal"><span class="pre">SetPasswordForm</span></tt></a></li>
<li><tt class="docutils literal"><span class="pre">post_reset_redirect</span></tt>: URL to redirect after the password reset
done. Defaults to <tt class="xref docutils literal"><span class="pre">None</span></tt>.</li>
</ul>
<p><strong>Template context:</strong></p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">form</span></tt>: The form (see <tt class="docutils literal"><span class="pre">set_password_form</span></tt> above) for setting the
new user's password.</li>
<li><tt class="docutils literal"><span class="pre">validlink</span></tt>: Boolean, True if the link (combination of uidb36 and
token) is valid or unused yet.</li>
</ul>
</dd></dl>

<dl class="function">
<dt id="django.contrib.auth.views.password_reset_complete">
<tt class="descname">password_reset_complete</tt>(<em>request</em><span class="optional">[</span>, <em>template_name</em><span class="optional">]</span>)<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.views.password_reset_complete" title="Permalink to this definition">¶</a></dt>
<dd><p>Presents a view which informs the user that the password has been
successfully changed.</p>
<p><strong>URL name:</strong> <tt class="docutils literal"><span class="pre">password_reset_complete</span></tt></p>
<p><strong>Optional arguments:</strong></p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">template_name</span></tt>: The full name of a template to display the view.
Defaults to <tt class="file docutils literal"><span class="pre">registration/password_reset_complete.html</span></tt>.</li>
</ul>
</dd></dl>

</div>
<div class="section" id="s-helper-functions">
<span id="helper-functions"></span><h3>Helper functions<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#helper-functions" title="Permalink to this headline">¶</a></h3>
<dl class="function">
<dt id="django.contrib.auth.views.redirect_to_login">
<tt class="descname">redirect_to_login</tt>(<em>next</em><span class="optional">[</span>, <em>login_url</em>, <em>redirect_field_name</em><span class="optional">]</span>)<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.views.redirect_to_login" title="Permalink to this definition">¶</a></dt>
<dd><p>Redirects to the login page, and then back to another URL after a
successful login.</p>
<p><strong>Required arguments:</strong></p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">next</span></tt>: The URL to redirect to after a successful login.</li>
</ul>
<p><strong>Optional arguments:</strong></p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">login_url</span></tt>: The URL of the login page to redirect to.
Defaults to <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-LOGIN_URL"><tt class="xref std std-setting docutils literal"><span class="pre">settings.LOGIN_URL</span></tt></a> if not supplied.</li>
<li><tt class="docutils literal"><span class="pre">redirect_field_name</span></tt>: The name of a <tt class="docutils literal"><span class="pre">GET</span></tt> field containing the
URL to redirect to after log out. Overrides <tt class="docutils literal"><span class="pre">next</span></tt> if the given
<tt class="docutils literal"><span class="pre">GET</span></tt> parameter is passed.</li>
</ul>
</dd></dl>

</div>
<div class="section" id="s-module-django.contrib.auth.forms">
<span id="s-built-in-forms"></span><span id="module-django.contrib.auth.forms"></span><span id="built-in-forms"></span><h3>Built-in forms<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#module-django.contrib.auth.forms" title="Permalink to this headline">¶</a></h3>
<p>If you don't want to use the built-in views, but want the convenience of not
having to write forms for this functionality, the authentication system
provides several built-in forms located in <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#module-django.contrib.auth.forms" title="django.contrib.auth.forms"><tt class="xref py py-mod docutils literal"><span class="pre">django.contrib.auth.forms</span></tt></a>:</p>
<dl class="class">
<dt id="django.contrib.auth.forms.AdminPasswordChangeForm">
<em class="property">class </em><tt class="descname">AdminPasswordChangeForm</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.forms.AdminPasswordChangeForm" title="Permalink to this definition">¶</a></dt>
<dd><p>A form used in the admin interface to change a user's password.</p>
</dd></dl>

<dl class="class">
<dt id="django.contrib.auth.forms.AuthenticationForm">
<em class="property">class </em><tt class="descname">AuthenticationForm</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.forms.AuthenticationForm" title="Permalink to this definition">¶</a></dt>
<dd><p>A form for logging a user in.</p>
</dd></dl>

<dl class="class">
<dt id="django.contrib.auth.forms.PasswordChangeForm">
<em class="property">class </em><tt class="descname">PasswordChangeForm</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.forms.PasswordChangeForm" title="Permalink to this definition">¶</a></dt>
<dd><p>A form for allowing a user to change their password.</p>
</dd></dl>

<dl class="class">
<dt id="django.contrib.auth.forms.PasswordResetForm">
<em class="property">class </em><tt class="descname">PasswordResetForm</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.forms.PasswordResetForm" title="Permalink to this definition">¶</a></dt>
<dd><p>A form for generating and emailing a one-time use link to reset a
user's password.</p>
</dd></dl>

<dl class="class">
<dt id="django.contrib.auth.forms.SetPasswordForm">
<em class="property">class </em><tt class="descname">SetPasswordForm</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.forms.SetPasswordForm" title="Permalink to this definition">¶</a></dt>
<dd><p>A form that lets a user change his/her password without entering the old
password.</p>
</dd></dl>

<dl class="class">
<dt id="django.contrib.auth.forms.UserChangeForm">
<em class="property">class </em><tt class="descname">UserChangeForm</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.forms.UserChangeForm" title="Permalink to this definition">¶</a></dt>
<dd><p>A form used in the admin interface to change a user's information and
permissions.</p>
</dd></dl>

<dl class="class">
<dt id="django.contrib.auth.forms.UserCreationForm">
<em class="property">class </em><tt class="descname">UserCreationForm</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.forms.UserCreationForm" title="Permalink to this definition">¶</a></dt>
<dd><p>A form for creating a new user.</p>
</dd></dl>

</div>
<div class="section" id="s-limiting-access-to-logged-in-users-that-pass-a-test">
<span id="limiting-access-to-logged-in-users-that-pass-a-test"></span><h3>Limiting access to logged-in users that pass a test<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#limiting-access-to-logged-in-users-that-pass-a-test" title="Permalink to this headline">¶</a></h3>
<p>To limit access based on certain permissions or some other test, you'd do
essentially the same thing as described in the previous section.</p>
<p>The simple way is to run your test on <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest.user" title="django.http.HttpRequest.user"><tt class="xref py py-attr docutils literal"><span class="pre">request.user</span></tt></a> in the view directly. For example, this view
checks to make sure the user is logged in and has the permission
<tt class="docutils literal"><span class="pre">polls.can_vote</span></tt>:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">def</span> <span class="nf">my_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">request</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">has_perm</span><span class="p">(</span><span class="s">'polls.can_vote'</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">"You can't vote in this poll."</span><span class="p">)</span>
    <span class="c"># ...</span>
</pre></div>
</div>
<dl class="function">
<dt id="django.contrib.auth.decorators.user_passes_test">
<tt class="descname">user_passes_test</tt>(<em>func</em><span class="optional">[</span>, <em>login_url=None</em><span class="optional">]</span>)<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.decorators.user_passes_test" title="Permalink to this definition">¶</a></dt>
<dd><p>As a shortcut, you can use the convenient <tt class="docutils literal"><span class="pre">user_passes_test</span></tt> decorator:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.contrib.auth.decorators</span> <span class="kn">import</span> <span class="n">user_passes_test</span>

<span class="nd">@user_passes_test</span><span class="p">(</span><span class="k">lambda</span> <span class="n">u</span><span class="p">:</span> <span class="n">u</span><span class="o">.</span><span class="n">has_perm</span><span class="p">(</span><span class="s">'polls.can_vote'</span><span class="p">))</span>
<span class="k">def</span> <span class="nf">my_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="o">...</span>
</pre></div>
</div>
<p>We're using this particular test as a relatively simple example. However,
if you just want to test whether a permission is available to a user, you
can use the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.decorators.permission_required" title="django.contrib.auth.decorators.permission_required"><tt class="xref py py-func docutils literal"><span class="pre">permission_required()</span></tt></a>
decorator, described later in this document.</p>
<p><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.decorators.user_passes_test" title="django.contrib.auth.decorators.user_passes_test"><tt class="xref py py-func docutils literal"><span class="pre">user_passes_test()</span></tt></a> takes a required
argument: a callable that takes a
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> object and returns <tt class="xref docutils literal"><span class="pre">True</span></tt> if
the user is allowed to view the page. Note that
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.decorators.user_passes_test" title="django.contrib.auth.decorators.user_passes_test"><tt class="xref py py-func docutils literal"><span class="pre">user_passes_test()</span></tt></a> does not
automatically check that the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> is
not anonymous.</p>
<p><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.decorators.user_passes_test" title="django.contrib.auth.decorators.user_passes_test"><tt class="xref py py-func docutils literal"><span class="pre">user_passes_test()</span></tt></a> takes an
optional <tt class="docutils literal"><span class="pre">login_url</span></tt> argument, which lets you specify the URL for your
login page (<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-LOGIN_URL"><tt class="xref std std-setting docutils literal"><span class="pre">settings.LOGIN_URL</span></tt></a> by default).</p>
<p>For example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.contrib.auth.decorators</span> <span class="kn">import</span> <span class="n">user_passes_test</span>

<span class="nd">@user_passes_test</span><span class="p">(</span><span class="k">lambda</span> <span class="n">u</span><span class="p">:</span> <span class="n">u</span><span class="o">.</span><span class="n">has_perm</span><span class="p">(</span><span class="s">'polls.can_vote'</span><span class="p">),</span> <span class="n">login_url</span><span class="o">=</span><span class="s">'/login/'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">my_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="o">...</span>
</pre></div>
</div>
</dd></dl>

<div class="section" id="s-the-permission-required-decorator">
<span id="the-permission-required-decorator"></span><h4>The permission_required decorator<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#the-permission-required-decorator" title="Permalink to this headline">¶</a></h4>
<dl class="function">
<dt id="django.contrib.auth.decorators.permission_required">
<tt class="descname">permission_required</tt>(<span class="optional">[</span><em>login_url=None</em>, <em>raise_exception=False</em><span class="optional">]</span>)<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.decorators.permission_required" title="Permalink to this definition">¶</a></dt>
<dd><p>It's a relatively common task to check whether a user has a particular
permission. For that reason, Django provides a shortcut for that case: the
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.decorators.permission_required" title="django.contrib.auth.decorators.permission_required"><tt class="xref py py-func docutils literal"><span class="pre">permission_required()</span></tt></a> decorator.
Using this decorator, the earlier example can be written as:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.contrib.auth.decorators</span> <span class="kn">import</span> <span class="n">permission_required</span>

<span class="nd">@permission_required</span><span class="p">(</span><span class="s">'polls.can_vote'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">my_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="o">...</span>
</pre></div>
</div>
<p>As for the <tt class="xref py py-meth docutils literal"><span class="pre">User.has_perm()</span></tt> method, permission names take the form
<tt class="docutils literal"><span class="pre">"&lt;app</span> <span class="pre">label&gt;.&lt;permission</span> <span class="pre">codename&gt;"</span></tt> (i.e. <tt class="docutils literal"><span class="pre">polls.can_vote</span></tt> for a
permission on a model in the <tt class="docutils literal"><span class="pre">polls</span></tt> application).</p>
<p>Note that <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.decorators.permission_required" title="django.contrib.auth.decorators.permission_required"><tt class="xref py py-func docutils literal"><span class="pre">permission_required()</span></tt></a>
also takes an optional <tt class="docutils literal"><span class="pre">login_url</span></tt> parameter. Example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.contrib.auth.decorators</span> <span class="kn">import</span> <span class="n">permission_required</span>

<span class="nd">@permission_required</span><span class="p">(</span><span class="s">'polls.can_vote'</span><span class="p">,</span> <span class="n">login_url</span><span class="o">=</span><span class="s">'/loginpage/'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">my_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="o">...</span>
</pre></div>
</div>
<p>As in the <tt class="xref py py-func docutils literal"><span class="pre">login_required()</span></tt> decorator, <tt class="docutils literal"><span class="pre">login_url</span></tt>
defaults to <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-LOGIN_URL"><tt class="xref std std-setting docutils literal"><span class="pre">settings.LOGIN_URL</span></tt></a>.</p>
<div class="versionchanged">
<span class="title">Changed in Django 1.4:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.4/"><em>Please see the release notes</em></a></div>
<p>Added <tt class="docutils literal"><span class="pre">raise_exception</span></tt> parameter. If given, the decorator will raise
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/exceptions/#django.core.exceptions.PermissionDenied" title="django.core.exceptions.PermissionDenied"><tt class="xref py py-exc docutils literal"><span class="pre">PermissionDenied</span></tt></a>, prompting
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/http/views/#http-forbidden-view"><em>the 403 (HTTP Forbidden) view</em></a> instead of
redirecting to the login page.</p>
</dd></dl>

</div>
</div>
<div class="section" id="s-limiting-access-to-generic-views">
<span id="limiting-access-to-generic-views"></span><h3>Limiting access to generic views<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#limiting-access-to-generic-views" title="Permalink to this headline">¶</a></h3>
<p>To limit access to a <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/class-based-views/"><em>class-based generic view</em></a>,
decorate the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/class-based-views/#django.views.generic.base.View.dispatch" title="django.views.generic.base.View.dispatch"><tt class="xref py py-meth docutils literal"><span class="pre">View.dispatch</span></tt></a>
method on the class. See <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/class-based-views/#id1"><em>Decorating the class</em></a> for details.</p>
<div class="section" id="s-function-based-generic-views">
<span id="function-based-generic-views"></span><h4>Function-based generic views<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#function-based-generic-views" title="Permalink to this headline">¶</a></h4>
<p>To limit access to a <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/generic-views/"><em>function-based generic view</em></a>,
write a thin wrapper around the view, and point your URLconf to your wrapper
instead of the generic view itself. For example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.views.generic.date_based</span> <span class="kn">import</span> <span class="n">object_detail</span>

<span class="nd">@login_required</span>
<span class="k">def</span> <span class="nf">limited_object_detail</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">object_detail</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
</div>
<div class="section" id="s-permissions">
<span id="s-id3"></span><span id="permissions"></span><span id="id3"></span><h2>Permissions<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#permissions" title="Permalink to this headline">¶</a></h2>
<p>Django comes with a simple permissions system. It provides a way to assign
permissions to specific users and groups of users.</p>
<p>It's used by the Django admin site, but you're welcome to use it in your own
code.</p>
<p>The Django admin site uses permissions as follows:</p>
<ul class="simple">
<li>Access to view the "add" form and add an object is limited to users with
the "add" permission for that type of object.</li>
<li>Access to view the change list, view the "change" form and change an
object is limited to users with the "change" permission for that type of
object.</li>
<li>Access to delete an object is limited to users with the "delete"
permission for that type of object.</li>
</ul>
<p>Permissions are set globally per type of object, not per specific object
instance. For example, it's possible to say "Mary may change news stories," but
it's not currently possible to say "Mary may change news stories, but only the
ones she created herself" or "Mary may only change news stories that have a
certain status, publication date or ID." The latter functionality is something
Django developers are currently discussing.</p>
<div class="section" id="s-default-permissions">
<span id="default-permissions"></span><h3>Default permissions<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#default-permissions" title="Permalink to this headline">¶</a></h3>
<p>When <tt class="docutils literal"><span class="pre">django.contrib.auth</span></tt> is listed in your <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-INSTALLED_APPS"><tt class="xref std std-setting docutils literal"><span class="pre">INSTALLED_APPS</span></tt></a>
setting, it will ensure that three default permissions -- add, change and
delete -- are created for each Django model defined in one of your installed
applications.</p>
<p>These permissions will be created when you run <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-syncdb"><tt class="xref std std-djadmin docutils literal"><span class="pre">manage.py</span> <span class="pre">syncdb</span></tt></a>; the first time you run <tt class="docutils literal"><span class="pre">syncdb</span></tt> after adding
<tt class="docutils literal"><span class="pre">django.contrib.auth</span></tt> to <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-INSTALLED_APPS"><tt class="xref std std-setting docutils literal"><span class="pre">INSTALLED_APPS</span></tt></a>, the default permissions
will be created for all previously-installed models, as well as for any new
models being installed at that time. Afterward, it will create default
permissions for new models each time you run <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-syncdb"><tt class="xref std std-djadmin docutils literal"><span class="pre">manage.py</span> <span class="pre">syncdb</span></tt></a>.</p>
<p>Assuming you have an application with an
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/options/#django.db.models.Options.app_label" title="django.db.models.Options.app_label"><tt class="xref py py-attr docutils literal"><span class="pre">app_label</span></tt></a> <tt class="docutils literal"><span class="pre">foo</span></tt> and a model named <tt class="docutils literal"><span class="pre">Bar</span></tt>,
to test for basic permissions you should use:</p>
<ul class="simple">
<li>add: <tt class="docutils literal"><span class="pre">user.has_perm('foo.add_bar')</span></tt></li>
<li>change: <tt class="docutils literal"><span class="pre">user.has_perm('foo.change_bar')</span></tt></li>
<li>delete: <tt class="docutils literal"><span class="pre">user.has_perm('foo.delete_bar')</span></tt></li>
</ul>
</div>
<div class="section" id="s-custom-permissions">
<span id="s-id4"></span><span id="custom-permissions"></span><span id="id4"></span><h3>Custom permissions<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#custom-permissions" title="Permalink to this headline">¶</a></h3>
<p>To create custom permissions for a given model object, use the <tt class="docutils literal"><span class="pre">permissions</span></tt>
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/db/models/#meta-options"><em>model Meta attribute</em></a>.</p>
<p>This example Task model creates three custom permissions, i.e., actions users
can or cannot do with Task instances, specific to your application:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Task</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="o">...</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">permissions</span> <span class="o">=</span> <span class="p">(</span>
            <span class="p">(</span><span class="s">"view_task"</span><span class="p">,</span> <span class="s">"Can see available tasks"</span><span class="p">),</span>
            <span class="p">(</span><span class="s">"change_task_status"</span><span class="p">,</span> <span class="s">"Can change the status of tasks"</span><span class="p">),</span>
            <span class="p">(</span><span class="s">"close_task"</span><span class="p">,</span> <span class="s">"Can remove a task by setting its status as closed"</span><span class="p">),</span>
        <span class="p">)</span>
</pre></div>
</div>
<p>The only thing this does is create those extra permissions when you run
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-syncdb"><tt class="xref std std-djadmin docutils literal"><span class="pre">manage.py</span> <span class="pre">syncdb</span></tt></a>. Your code is in charge of checking the
value of these permissions when an user is trying to access the functionality
provided by the application (viewing tasks, changing the status of tasks,
closing tasks.) Continuing the above example, the following checks if a user may
view tasks:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">user</span><span class="o">.</span><span class="n">has_perm</span><span class="p">(</span><span class="s">'app.view_task'</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="s-id5">
<span id="id5"></span><h3>API reference<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#id5" title="Permalink to this headline">¶</a></h3>
<dl class="class">
<dt id="django.contrib.auth.models.models.Permission">
<em class="property">class </em><tt class="descclassname">models.</tt><tt class="descname">Permission</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.models.Permission" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<div class="section" id="s-id6">
<span id="id6"></span><h4>Fields<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#id6" title="Permalink to this headline">¶</a></h4>
<p><tt class="xref py py-class docutils literal"><span class="pre">Permission</span></tt> objects have the following
fields:</p>
<dl class="attribute">
<dt id="django.contrib.auth.models.Permission.name">
<tt class="descclassname">Permission.</tt><tt class="descname">name</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.Permission.name" title="Permalink to this definition">¶</a></dt>
<dd><p>Required. 50 characters or fewer. Example: <tt class="docutils literal"><span class="pre">'Can</span> <span class="pre">vote'</span></tt>.</p>
</dd></dl>

<dl class="attribute">
<dt id="django.contrib.auth.models.Permission.content_type">
<tt class="descclassname">Permission.</tt><tt class="descname">content_type</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.Permission.content_type" title="Permalink to this definition">¶</a></dt>
<dd><p>Required. A reference to the <tt class="docutils literal"><span class="pre">django_content_type</span></tt> database table, which
contains a record for each installed Django model.</p>
</dd></dl>

<dl class="attribute">
<dt id="django.contrib.auth.models.Permission.codename">
<tt class="descclassname">Permission.</tt><tt class="descname">codename</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.Permission.codename" title="Permalink to this definition">¶</a></dt>
<dd><p>Required. 100 characters or fewer. Example: <tt class="docutils literal"><span class="pre">'can_vote'</span></tt>.</p>
</dd></dl>

</div>
<div class="section" id="s-id7">
<span id="id7"></span><h4>Methods<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#id7" title="Permalink to this headline">¶</a></h4>
<p><tt class="xref py py-class docutils literal"><span class="pre">Permission</span></tt> objects have the standard
data-access methods like any other <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/models/instances/"><em>Django model</em></a>.</p>
</div>
</div>
<div class="section" id="s-programmatically-creating-permissions">
<span id="programmatically-creating-permissions"></span><h3>Programmatically creating permissions<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#programmatically-creating-permissions" title="Permalink to this headline">¶</a></h3>
<p>While custom permissions can be defined within a model's <tt class="docutils literal"><span class="pre">Meta</span></tt> class, you
can also create permissions directly. For example, you can create the
<tt class="docutils literal"><span class="pre">can_publish</span></tt> permission for a <tt class="docutils literal"><span class="pre">BlogPost</span></tt> model in <tt class="docutils literal"><span class="pre">myapp</span></tt>:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">Group</span><span class="p">,</span> <span class="n">Permission</span>
<span class="kn">from</span> <span class="nn">django.contrib.contenttypes.models</span> <span class="kn">import</span> <span class="n">ContentType</span>

<span class="n">content_type</span> <span class="o">=</span> <span class="n">ContentType</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">app_label</span><span class="o">=</span><span class="s">'myapp'</span><span class="p">,</span> <span class="n">model</span><span class="o">=</span><span class="s">'BlogPost'</span><span class="p">)</span>
<span class="n">permission</span> <span class="o">=</span> <span class="n">Permission</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">codename</span><span class="o">=</span><span class="s">'can_publish'</span><span class="p">,</span>
                                       <span class="n">name</span><span class="o">=</span><span class="s">'Can Publish Posts'</span><span class="p">,</span>
                                       <span class="n">content_type</span><span class="o">=</span><span class="n">content_type</span><span class="p">)</span>
</pre></div>
</div>
<p>The permission can then be assigned to a
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a> via its <tt class="docutils literal"><span class="pre">user_permissions</span></tt>
attribute or to a <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.Group" title="django.contrib.auth.models.Group"><tt class="xref py py-class docutils literal"><span class="pre">Group</span></tt></a> via its
<tt class="docutils literal"><span class="pre">permissions</span></tt> attribute.</p>
</div>
</div>
<div class="section" id="s-authentication-data-in-templates">
<span id="authentication-data-in-templates"></span><h2>Authentication data in templates<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#authentication-data-in-templates" title="Permalink to this headline">¶</a></h2>
<p>The currently logged-in user and his/her permissions are made available in the
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/api/"><em>template context</em></a> when you use
<tt class="xref py py-class docutils literal"><span class="pre">RequestContext</span></tt>.</p>
<div class="admonition-technicality admonition ">
<p class="first admonition-title">Technicality</p>
<p class="last">Technically, these variables are only made available in the template context
if you use <tt class="xref py py-class docutils literal"><span class="pre">RequestContext</span></tt> <em>and</em> your
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-TEMPLATE_CONTEXT_PROCESSORS"><tt class="xref std std-setting docutils literal"><span class="pre">TEMPLATE_CONTEXT_PROCESSORS</span></tt></a> setting contains
<tt class="docutils literal"><span class="pre">"django.contrib.auth.context_processors.auth"</span></tt>, which is default. For
more, see the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/templates/api/#subclassing-context-requestcontext"><em>RequestContext docs</em></a>.</p>
</div>
<div class="section" id="s-id8">
<span id="id8"></span><h3>Users<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#id8" title="Permalink to this headline">¶</a></h3>
<p>When rendering a template <tt class="xref py py-class docutils literal"><span class="pre">RequestContext</span></tt>, the
currently logged-in user, either a  <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">User</span></tt></a>
instance or an <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.AnonymousUser" title="django.contrib.auth.models.AnonymousUser"><tt class="xref py py-class docutils literal"><span class="pre">AnonymousUser</span></tt></a> instance, is
stored in the template variable <tt class="docutils literal"><span class="pre">{{</span> <span class="pre">user</span> <span class="pre">}}</span></tt>:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">if</span> <span class="nv">user.is_authenticated</span> <span class="cp">%}</span>
    <span class="nt">&lt;p&gt;</span>Welcome, <span class="cp">{{</span> <span class="nv">user.username</span> <span class="cp">}}</span>. Thanks for logging in.<span class="nt">&lt;/p&gt;</span>
<span class="cp">{%</span> <span class="k">else</span> <span class="cp">%}</span>
    <span class="nt">&lt;p&gt;</span>Welcome, new user. Please log in.<span class="nt">&lt;/p&gt;</span>
<span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>This template context variable is not available if a <tt class="docutils literal"><span class="pre">RequestContext</span></tt> is not
being used.</p>
</div>
<div class="section" id="s-id9">
<span id="id9"></span><h3>Permissions<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#id9" title="Permalink to this headline">¶</a></h3>
<p>The currently logged-in user's permissions are stored in the template variable
<tt class="docutils literal"><span class="pre">{{</span> <span class="pre">perms</span> <span class="pre">}}</span></tt>. This is an instance of
<tt class="xref py py-class docutils literal"><span class="pre">django.contrib.auth.context_processors.PermWrapper</span></tt>, which is a
template-friendly proxy of permissions.</p>
<div class="versionchanged">
<span class="title">Changed in Django 1.3:</span> Prior to version 1.3, <tt class="docutils literal"><span class="pre">PermWrapper</span></tt> was located in
<tt class="docutils literal"><span class="pre">django.contrib.auth.context_processors</span></tt>.</div>
<p>In the <tt class="docutils literal"><span class="pre">{{</span> <span class="pre">perms</span> <span class="pre">}}</span></tt> object, single-attribute lookup is a proxy to
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.has_module_perms" title="django.contrib.auth.models.User.has_module_perms"><tt class="xref py py-meth docutils literal"><span class="pre">User.has_module_perms</span></tt></a>.
This example would display <tt class="xref docutils literal"><span class="pre">True</span></tt> if the logged-in user had any permissions
in the <tt class="docutils literal"><span class="pre">foo</span></tt> app:</p>
<div class="highlight-python"><pre>{{ perms.foo }}</pre>
</div>
<p>Two-level-attribute lookup is a proxy to
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.has_perm" title="django.contrib.auth.models.User.has_perm"><tt class="xref py py-meth docutils literal"><span class="pre">User.has_perm</span></tt></a>. This example
would display <tt class="xref docutils literal"><span class="pre">True</span></tt> if the logged-in user had the permission
<tt class="docutils literal"><span class="pre">foo.can_vote</span></tt>:</p>
<div class="highlight-python"><pre>{{ perms.foo.can_vote }}</pre>
</div>
<p>Thus, you can check permissions in template <tt class="docutils literal"><span class="pre">{%</span> <span class="pre">if</span> <span class="pre">%}</span></tt> statements:</p>
<div class="highlight-html+django"><div class="highlight"><pre><span class="cp">{%</span> <span class="k">if</span> <span class="nv">perms.foo</span> <span class="cp">%}</span>
    <span class="nt">&lt;p&gt;</span>You have permission to do something in the foo app.<span class="nt">&lt;/p&gt;</span>
    <span class="cp">{%</span> <span class="k">if</span> <span class="nv">perms.foo.can_vote</span> <span class="cp">%}</span>
        <span class="nt">&lt;p&gt;</span>You can vote!<span class="nt">&lt;/p&gt;</span>
    <span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>
    <span class="cp">{%</span> <span class="k">if</span> <span class="nv">perms.foo.can_drive</span> <span class="cp">%}</span>
        <span class="nt">&lt;p&gt;</span>You can drive!<span class="nt">&lt;/p&gt;</span>
    <span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>
<span class="cp">{%</span> <span class="k">else</span> <span class="cp">%}</span>
    <span class="nt">&lt;p&gt;</span>You don't have permission to do anything in the foo app.<span class="nt">&lt;/p&gt;</span>
<span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="s-groups">
<span id="groups"></span><h2>Groups<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#groups" title="Permalink to this headline">¶</a></h2>
<p>Groups are a generic way of categorizing users so you can apply permissions, or
some other label, to those users. A user can belong to any number of groups.</p>
<p>A user in a group automatically has the permissions granted to that group. For
example, if the group <tt class="docutils literal"><span class="pre">Site</span> <span class="pre">editors</span></tt> has the permission
<tt class="docutils literal"><span class="pre">can_edit_home_page</span></tt>, any user in that group will have that permission.</p>
<p>Beyond permissions, groups are a convenient way to categorize users to give
them some label, or extended functionality. For example, you could create a
group <tt class="docutils literal"><span class="pre">'Special</span> <span class="pre">users'</span></tt>, and you could write code that could, say, give them
access to a members-only portion of your site, or send them members-only email
messages.</p>
<div class="section" id="s-id10">
<span id="id10"></span><h3>API reference<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#id10" title="Permalink to this headline">¶</a></h3>
<dl class="class">
<dt id="django.contrib.auth.models.Group">
<em class="property">class </em><tt class="descclassname">models.</tt><tt class="descname">Group</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.Group" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<div class="section" id="s-id11">
<span id="id11"></span><h4>Fields<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#id11" title="Permalink to this headline">¶</a></h4>
<p><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.Group" title="django.contrib.auth.models.Group"><tt class="xref py py-class docutils literal"><span class="pre">Group</span></tt></a> objects have the following fields:</p>
<dl class="attribute">
<dt id="django.contrib.auth.Group.name">
<tt class="descclassname">Group.</tt><tt class="descname">name</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.Group.name" title="Permalink to this definition">¶</a></dt>
<dd><p>Required. 80 characters or fewer. Any characters are permitted. Example:
<tt class="docutils literal"><span class="pre">'Awesome</span> <span class="pre">Users'</span></tt>.</p>
</dd></dl>

<dl class="attribute">
<dt id="django.contrib.auth.Group.permissions">
<tt class="descclassname">Group.</tt><tt class="descname">permissions</tt><a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.Group.permissions" title="Permalink to this definition">¶</a></dt>
<dd><p>Many-to-many field to <tt class="xref py py-class docutils literal"><span class="pre">Permissions</span></tt>:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">group</span><span class="o">.</span><span class="n">permissions</span> <span class="o">=</span> <span class="p">[</span><span class="n">permission_list</span><span class="p">]</span>
<span class="n">group</span><span class="o">.</span><span class="n">permissions</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">permission</span><span class="p">,</span> <span class="n">permission</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>
<span class="n">group</span><span class="o">.</span><span class="n">permissions</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">permission</span><span class="p">,</span> <span class="n">permission</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>
<span class="n">group</span><span class="o">.</span><span class="n">permissions</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>
</pre></div>
</div>
</dd></dl>

</div>
</div>
</div>
<div class="section" id="s-other-authentication-sources">
<span id="s-authentication-backends"></span><span id="other-authentication-sources"></span><span id="authentication-backends"></span><h2>Other authentication sources<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#other-authentication-sources" title="Permalink to this headline">¶</a></h2>
<p>The authentication that comes with Django is good enough for most common cases,
but you may have the need to hook into another authentication source -- that
is, another source of usernames and passwords or authentication methods.</p>
<p>For example, your company may already have an LDAP setup that stores a username
and password for every employee. It'd be a hassle for both the network
administrator and the users themselves if users had separate accounts in LDAP
and the Django-based applications.</p>
<p>So, to handle situations like this, the Django authentication system lets you
plug in other authentication sources. You can override Django's default
database-based scheme, or you can use the default system in tandem with other
systems.</p>
<p>See the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/authbackends/"><em>authentication backend reference</em></a>
for information on the authentication backends included with Django.</p>
<div class="section" id="s-specifying-authentication-backends">
<span id="specifying-authentication-backends"></span><h3>Specifying authentication backends<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#specifying-authentication-backends" title="Permalink to this headline">¶</a></h3>
<p>Behind the scenes, Django maintains a list of "authentication backends" that it
checks for authentication. When somebody calls
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.authenticate" title="django.contrib.auth.authenticate"><tt class="xref py py-func docutils literal"><span class="pre">django.contrib.auth.authenticate()</span></tt></a> -- as described in <a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#how-to-log-a-user-in"><em>How to log
a user in</em></a> above -- Django tries authenticating across
all of its authentication backends. If the first authentication method fails,
Django tries the second one, and so on, until all backends have been attempted.</p>
<p>The list of authentication backends to use is specified in the
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-AUTHENTICATION_BACKENDS"><tt class="xref std std-setting docutils literal"><span class="pre">AUTHENTICATION_BACKENDS</span></tt></a> setting. This should be a tuple of Python
path names that point to Python classes that know how to authenticate. These
classes can be anywhere on your Python path.</p>
<p>By default, <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-AUTHENTICATION_BACKENDS"><tt class="xref std std-setting docutils literal"><span class="pre">AUTHENTICATION_BACKENDS</span></tt></a> is set to:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="p">(</span><span class="s">'django.contrib.auth.backends.ModelBackend'</span><span class="p">,)</span>
</pre></div>
</div>
<p>That's the basic authentication scheme that checks the Django users database.</p>
<p>The order of <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-AUTHENTICATION_BACKENDS"><tt class="xref std std-setting docutils literal"><span class="pre">AUTHENTICATION_BACKENDS</span></tt></a> matters, so if the same
username and password is valid in multiple backends, Django will stop
processing at the first positive match.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Once a user has authenticated, Django stores which backend was used to
authenticate the user in the user's session, and re-uses the same backend
for the duration of that session whenever access to the currently
authenticated user is needed. This effectively means that authentication
sources are cached on a per-session basis, so if you change
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-AUTHENTICATION_BACKENDS"><tt class="xref std std-setting docutils literal"><span class="pre">AUTHENTICATION_BACKENDS</span></tt></a>, you'll need to clear out session data if
you need to force users to re-authenticate using different methods. A simple
way to do that is simply to execute <tt class="docutils literal"><span class="pre">Session.objects.all().delete()</span></tt>.</p>
</div>
</div>
<div class="section" id="s-writing-an-authentication-backend">
<span id="writing-an-authentication-backend"></span><h3>Writing an authentication backend<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#writing-an-authentication-backend" title="Permalink to this headline">¶</a></h3>
<p>An authentication backend is a class that implements two methods:
<tt class="docutils literal"><span class="pre">get_user(user_id)</span></tt> and <tt class="docutils literal"><span class="pre">authenticate(**credentials)</span></tt>.</p>
<p>The <tt class="docutils literal"><span class="pre">get_user</span></tt> method takes a <tt class="docutils literal"><span class="pre">user_id</span></tt> -- which could be a username,
database ID or whatever -- and returns a <tt class="docutils literal"><span class="pre">User</span></tt> object.</p>
<p>The <tt class="docutils literal"><span class="pre">authenticate</span></tt> method takes credentials as keyword arguments. Most of
the time, it'll just look like this:</p>
<div class="highlight-python"><pre>class MyBackend(object):
    def authenticate(self, username=None, password=None):
        # Check the username/password and return a User.</pre>
</div>
<p>But it could also authenticate a token, like so:</p>
<div class="highlight-python"><pre>class MyBackend(object):
    def authenticate(self, token=None):
        # Check the token and return a User.</pre>
</div>
<p>Either way, <tt class="docutils literal"><span class="pre">authenticate</span></tt> should check the credentials it gets, and it
should return a <tt class="docutils literal"><span class="pre">User</span></tt> object that matches those credentials, if the
credentials are valid. If they're not valid, it should return <tt class="xref docutils literal"><span class="pre">None</span></tt>.</p>
<p>The Django admin system is tightly coupled to the Django <tt class="docutils literal"><span class="pre">User</span></tt> object
described at the beginning of this document. For now, the best way to deal with
this is to create a Django <tt class="docutils literal"><span class="pre">User</span></tt> object for each user that exists for your
backend (e.g., in your LDAP directory, your external SQL database, etc.) You
can either write a script to do this in advance, or your <tt class="docutils literal"><span class="pre">authenticate</span></tt>
method can do it the first time a user logs in.</p>
<p>Here's an example backend that authenticates against a username and password
variable defined in your <tt class="docutils literal"><span class="pre">settings.py</span></tt> file and creates a Django <tt class="docutils literal"><span class="pre">User</span></tt>
object the first time a user authenticates:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.conf</span> <span class="kn">import</span> <span class="n">settings</span>
<span class="kn">from</span> <span class="nn">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span><span class="p">,</span> <span class="n">check_password</span>

<span class="k">class</span> <span class="nc">SettingsBackend</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="sd">"""</span>
<span class="sd">    Authenticate against the settings ADMIN_LOGIN and ADMIN_PASSWORD.</span>

<span class="sd">    Use the login name, and a hash of the password. For example:</span>

<span class="sd">    ADMIN_LOGIN = 'admin'</span>
<span class="sd">    ADMIN_PASSWORD = 'sha1$4e987$afbcf42e21bd417fb71db8c66b321e9fc33051de'</span>
<span class="sd">    """</span>

    <span class="n">supports_inactive_user</span> <span class="o">=</span> <span class="bp">False</span>

    <span class="k">def</span> <span class="nf">authenticate</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">username</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">login_valid</span> <span class="o">=</span> <span class="p">(</span><span class="n">settings</span><span class="o">.</span><span class="n">ADMIN_LOGIN</span> <span class="o">==</span> <span class="n">username</span><span class="p">)</span>
        <span class="n">pwd_valid</span> <span class="o">=</span> <span class="n">check_password</span><span class="p">(</span><span class="n">password</span><span class="p">,</span> <span class="n">settings</span><span class="o">.</span><span class="n">ADMIN_PASSWORD</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">login_valid</span> <span class="ow">and</span> <span class="n">pwd_valid</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">)</span>
            <span class="k">except</span> <span class="n">User</span><span class="o">.</span><span class="n">DoesNotExist</span><span class="p">:</span>
                <span class="c"># Create a new user. Note that we can set password</span>
                <span class="c"># to anything, because it won't be checked; the password</span>
                <span class="c"># from settings.py will.</span>
                <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="s">'get from settings.py'</span><span class="p">)</span>
                <span class="n">user</span><span class="o">.</span><span class="n">is_staff</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="n">user</span><span class="o">.</span><span class="n">is_superuser</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="n">user</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
            <span class="k">return</span> <span class="n">user</span>
        <span class="k">return</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">get_user</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">user_id</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">pk</span><span class="o">=</span><span class="n">user_id</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">User</span><span class="o">.</span><span class="n">DoesNotExist</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
</pre></div>
</div>
</div>
<div class="section" id="s-handling-authorization-in-custom-backends">
<span id="handling-authorization-in-custom-backends"></span><h3>Handling authorization in custom backends<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#handling-authorization-in-custom-backends" title="Permalink to this headline">¶</a></h3>
<p>Custom auth backends can provide their own permissions.</p>
<p>The user model will delegate permission lookup functions
(<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.get_group_permissions" title="django.contrib.auth.models.User.get_group_permissions"><tt class="xref py py-meth docutils literal"><span class="pre">get_group_permissions()</span></tt></a>,
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.get_all_permissions" title="django.contrib.auth.models.User.get_all_permissions"><tt class="xref py py-meth docutils literal"><span class="pre">get_all_permissions()</span></tt></a>,
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.has_perm" title="django.contrib.auth.models.User.has_perm"><tt class="xref py py-meth docutils literal"><span class="pre">has_perm()</span></tt></a>, and
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.has_module_perms" title="django.contrib.auth.models.User.has_module_perms"><tt class="xref py py-meth docutils literal"><span class="pre">has_module_perms()</span></tt></a>) to any
authentication backend that implements these functions.</p>
<p>The permissions given to the user will be the superset of all permissions
returned by all backends. That is, Django grants a permission to a user that
any one backend grants.</p>
<p>The simple backend above could implement permissions for the magic admin
fairly simply:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">SettingsBackend</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>

    <span class="c"># ...</span>

    <span class="k">def</span> <span class="nf">has_perm</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">user_obj</span><span class="p">,</span> <span class="n">perm</span><span class="p">,</span> <span class="n">obj</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">user_obj</span><span class="o">.</span><span class="n">username</span> <span class="o">==</span> <span class="n">settings</span><span class="o">.</span><span class="n">ADMIN_LOGIN</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
</pre></div>
</div>
<p>This gives full permissions to the user granted access in the above example.
Notice that the backend auth functions all take the user object as an argument,
and they also accept the same arguments given to the associated
<a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User" title="django.contrib.auth.models.User"><tt class="xref py py-class docutils literal"><span class="pre">django.contrib.auth.models.User</span></tt></a> functions.</p>
<p>A full authorization implementation can be found in
<a class="reference external" href="https://code.djangoproject.com/browser/django/trunk/django/contrib/auth/backends.py">django/contrib/auth/backends.py</a>, which is the default backend and queries
the <tt class="docutils literal"><span class="pre">auth_permission</span></tt> table most of the time.</p>
<div class="section" id="s-authorization-for-anonymous-users">
<span id="s-anonymous-auth"></span><span id="authorization-for-anonymous-users"></span><span id="anonymous-auth"></span><h4>Authorization for anonymous users<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#authorization-for-anonymous-users" title="Permalink to this headline">¶</a></h4>
<div class="versionchanged">
<span class="title">Changed in Django 1.2:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.2/"><em>Please see the release notes</em></a></div>
<p>An anonymous user is one that is not authenticated i.e. they have provided no
valid authentication details. However, that does not necessarily mean they are
not authorized to do anything. At the most basic level, most Web sites
authorize anonymous users to browse most of the site, and many allow anonymous
posting of comments etc.</p>
<p>Django's permission framework does not have a place to store permissions for
anonymous users. However, it has a foundation that allows custom authentication
backends to specify authorization for anonymous users. This is especially useful
for the authors of re-usable apps, who can delegate all questions of authorization
to the auth backend, rather than needing settings, for example, to control
anonymous access.</p>
</div>
<div class="section" id="s-authorization-for-inactive-users">
<span id="authorization-for-inactive-users"></span><h4>Authorization for inactive users<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#authorization-for-inactive-users" title="Permalink to this headline">¶</a></h4>
<div class="versionadded">
<span class="title">New in Django 1.3:</span> <a class="reference internal" href="https://docs.djangoproject.com/en/dev/releases/1.3/"><em>Please see the release notes</em></a></div>
<p>An inactive user is a one that is authenticated but has its attribute
<tt class="docutils literal"><span class="pre">is_active</span></tt> set to <tt class="xref docutils literal"><span class="pre">False</span></tt>. However this does not mean they are not
authorized to do anything. For example they are allowed to activate their
account.</p>
<p>The support for anonymous users in the permission system allows for
anonymous users to have permissions to do something while inactive
authenticated users do not.</p>
<p>To enable this on your own backend, you must set the class attribute
<tt class="docutils literal"><span class="pre">supports_inactive_user</span></tt> to <tt class="xref docutils literal"><span class="pre">True</span></tt>.</p>
<p>A nonexisting <tt class="docutils literal"><span class="pre">supports_inactive_user</span></tt> attribute will raise a
<tt class="docutils literal"><span class="pre">PendingDeprecationWarning</span></tt> if used in Django 1.3. In Django 1.4, this
warning will be updated to a <tt class="docutils literal"><span class="pre">DeprecationWarning</span></tt> which will be displayed
loudly. Additionally <tt class="docutils literal"><span class="pre">supports_inactive_user</span></tt> will be set to <tt class="xref docutils literal"><span class="pre">False</span></tt>.
Django 1.5 will assume that every backend supports inactive users being
passed to the authorization methods.</p>
</div>
</div>
<div class="section" id="s-handling-object-permissions">
<span id="handling-object-permissions"></span><h3>Handling object permissions<a class="headerlink" href="https://docs.djangoproject.com/en/dev/topics/auth/#handling-object-permissions" title="Permalink to this headline">¶</a></h3>
<p>Django's permission framework has a foundation for object permissions, though
there is no implementation for it in the core. That means that checking for
object permissions will always return <tt class="xref docutils literal"><span class="pre">False</span></tt> or an empty list (depending on
the check performed).</p>
</div>
</div>
</div>



<div id="content-secondary">
  <h2 id="comments">Questions/Feedback</h2>
  <p>Having trouble? We'd like to help!</p>
  <ul>
    <li>
      Try the <a href="https://docs.djangoproject.com/en/dev/faq/">FAQ</a>
      — it's got answers to many common questions.
    </li>
    <li>
      Search for information in the <a href="http://groups.google.com/group/django-users/">archives of the
      django-users mailing list</a>, or <a href="http://groups.google.com/group/django-users/">post a question</a>.
    </li>
    <li>
      Ask a question in the <a href="irc://irc.freenode.net/">#django IRC
      channel</a>, or search the <a href="http://django-irc-logs.com/">IRC
      logs</a> to see if it has been asked before.
    </li>
    <li>
      If you notice errors with this documentation, please <a href="https://code.djangoproject.com/newticket?component=Documentation">
      open a ticket</a> and let us know! Please only use the ticket tracker for
      criticisms and improvements on the docs. For tech support, use the
      resources above.
    </li>
  </ul>
</div>

		</div>
		<!-- END #content-main -->
		<div id="content-related" class="sidebar">
		
  
    <h2>Search</h2>
    
    <form action="https://docs.djangoproject.com/search/" id="sidebar_search" class="search">
  <div>
    <p>
      <input type="search" name="q" id="id_sidebar_search_q">
    </p>
    <p>
      <label for="id_sidebar_search_release">Version:</label>
      <select name="release" id="id_sidebar_search_release">
<option value="2">Django 1.0</option>
<option value="3">Django 1.1</option>
<option value="4">Django 1.2</option>
<option value="5">Django 1.3</option>
<option value="6" selected="selected">Django 1.4</option>
<option value="1">Development trunk</option>
</select>
    </p>
    <p>
      <input type="submit" class="submit" value="Search">
    </p>
  </div>
</form>
  

  
    <h2>Contents</h2>
    
      <ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#">User authentication in Django</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#overview">Overview</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#installation">Installation</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#users">Users</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#api-reference">API reference</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#fields">Fields</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#methods">Methods</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#manager-functions">Manager functions</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#basic-usage">Basic usage</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#creating-users">Creating users</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#changing-passwords">Changing passwords</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#how-django-stores-passwords">How Django stores passwords</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#using-bcrypt-with-django">Using bcrypt with Django</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#increasing-the-work-factor">Increasing the work factor</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#password-upgrading">Password upgrading</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#anonymous-users">Anonymous users</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#creating-superusers">Creating superusers</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users">Storing additional information about users</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#authentication-in-web-requests">Authentication in Web requests</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#how-to-log-a-user-in">How to log a user in</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#manually-managing-a-user-s-password">Manually managing a user’s password</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#how-to-log-a-user-out">How to log a user out</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#login-and-logout-signals">Login and logout signals</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#limiting-access-to-logged-in-users">Limiting access to logged-in users</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#the-raw-way">The raw way</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#the-login-required-decorator">The login_required decorator</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#module-django.contrib.auth.views">Other built-in views</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#helper-functions">Helper functions</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#module-django.contrib.auth.forms">Built-in forms</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#limiting-access-to-logged-in-users-that-pass-a-test">Limiting access to logged-in users that pass a test</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#the-permission-required-decorator">The permission_required decorator</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#limiting-access-to-generic-views">Limiting access to generic views</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#function-based-generic-views">Function-based generic views</a></li>
</ul>
</li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#permissions">Permissions</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#default-permissions">Default permissions</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#custom-permissions">Custom permissions</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#id5">API reference</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#id6">Fields</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#id7">Methods</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#programmatically-creating-permissions">Programmatically creating permissions</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#authentication-data-in-templates">Authentication data in templates</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#id8">Users</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#id9">Permissions</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#groups">Groups</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#id10">API reference</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#id11">Fields</a></li>
</ul>
</li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#other-authentication-sources">Other authentication sources</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#specifying-authentication-backends">Specifying authentication backends</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#writing-an-authentication-backend">Writing an authentication backend</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#handling-authorization-in-custom-backends">Handling authorization in custom backends</a><ul>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#authorization-for-anonymous-users">Authorization for anonymous users</a></li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#authorization-for-inactive-users">Authorization for inactive users</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.djangoproject.com/en/dev/topics/auth/#handling-object-permissions">Handling object permissions</a></li>
</ul>
</li>
</ul>
</li>
</ul>

    
  
  
    <h2>Browse</h2>
    <ul>
      
        
          <li>Prev: <a href="https://docs.djangoproject.com/en/dev/topics/testing/">Testing Django applications</a></li>
        
        
          <li>Next: <a href="https://docs.djangoproject.com/en/dev/topics/cache/">Django’s cache framework</a></li>
        
        <li><a href="https://docs.djangoproject.com/en/dev/contents/">Table of contents</a></li>
        
          <li><a href="https://docs.djangoproject.com/en/dev/genindex/">General Index</a></li>
        
          <li><a href="https://docs.djangoproject.com/en/dev/py-modindex/">Python Module Index</a></li>
        
      
    </ul>
  

  
    <h2>You are here:</h2>
    <ul>
      
        <li>
          <a href="https://docs.djangoproject.com/en/dev/">Django dev documentation</a>
          
            <ul><li><a href="https://docs.djangoproject.com/en/dev/topics/">Using Django</a>
          
          <ul><li>User authentication in Django</li></ul>
          </li></ul>
        </li>
      
    </ul>

    
      <h2>Download:</h2>
      <p>
      
        Offline (development version):
        <a href="https://www.djangoproject.com/m/docs/django-docs-dev-en.zip">HTML</a> |
        <a href="http://media.readthedocs.org/pdf/django/latest/django.pdf">PDF</a> |
        <a href="http://media.readthedocs.org/epub/django/latest/django.epub">ePub</a>
      
      <br>
      <span class="quiet">Provided by <a href="http://readthedocs.org/">Read the Docs</a>.
      </span></p>
    
  

		</div>
		<!-- END #content-related -->

    </div>
    <!-- END #content -->
    <div id="footer">
      <p>© 2005-2012 <a href="https://www.djangoproject.com/foundation/">Django Software Foundation</a> unless otherwise noted. Django is a registered trademark of the Django Software Foundation.
      <a href="http://mediatemple.net/">Linux Web hosting</a> graciously provided by Media Temple.
      </p>
    </div>
    <!-- END #footer -->
  </div>
  <!-- END #container -->
  


<div id="mixpanel" style="visibility: hidden; "></div></body><link rel="stylesheet" type="text/css" href="data:text/css,"></html>